/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => GhostyPostyPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian2 = require("obsidian");

// src/PublishPreviewModal.ts
var import_obsidian = require("obsidian");
var PublishPreviewModal = class extends import_obsidian.Modal {
  constructor(app, title, markdownContent, initialOptions, onSubmit) {
    super(app);
    this.title = title;
    this.markdownContent = markdownContent;
    this.initialOptions = initialOptions;
    this.onSubmit = onSubmit;
    this.currentOptions = {
      ...initialOptions,
      scheduledTime: initialOptions.scheduledTime || new Date()
    };
    this.previewComponent = new import_obsidian.Component();
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.createEl("h2", { text: "Preview & Publish" });
    new import_obsidian.Setting(contentEl).setName("Title").addText((text) => text.setValue(this.title).onChange((value) => {
      this.title = value;
    }));
    let statusDropdown;
    const statusSetting = new import_obsidian.Setting(contentEl).setName("Status").addDropdown((dropdown) => {
      statusDropdown = dropdown;
      return dropdown.addOption("draft", "Draft").addOption("published", "Published").addOption("scheduled", "Scheduled").setValue(this.currentOptions.status).onChange((value) => {
        const newStatus = value;
        this.currentOptions.status = newStatus;
        if (newStatus === "scheduled") {
          scheduleSetting.settingEl.style.display = "flex";
          if (!this.currentOptions.scheduledTime || this.currentOptions.scheduledTime <= new Date()) {
            const oneHourFromNow = new Date();
            oneHourFromNow.setHours(oneHourFromNow.getHours() + 1);
            this.currentOptions.scheduledTime = oneHourFromNow;
            dateInput.value = this.formatDateForInput(oneHourFromNow);
          }
        } else {
          scheduleSetting.settingEl.style.display = "none";
          this.currentOptions.scheduledTime = new Date();
        }
      });
    });
    const scheduleSetting = new import_obsidian.Setting(contentEl).setName("Schedule Post").setDesc('In your local time zone, only used when status is "scheduled"');
    scheduleSetting.settingEl.addClass("schedule-setting");
    const dateInput = scheduleSetting.controlEl.createEl("input", {
      type: "datetime-local",
      value: this.formatDateForInput(this.currentOptions.scheduledTime)
    });
    dateInput.type = "datetime-local";
    dateInput.value = this.formatDateForInput(this.currentOptions.scheduledTime);
    dateInput.className = "publish-preview-datetime-input";
    dateInput.addEventListener("input", (e) => {
      const target = e.target;
      if (target.value) {
        const scheduledDate = new Date(target.value);
        this.currentOptions.scheduledTime = scheduledDate;
      } else {
        const oneHourFromNow = new Date();
        oneHourFromNow.setHours(oneHourFromNow.getHours() + 1);
        this.currentOptions.scheduledTime = oneHourFromNow;
        dateInput.value = this.formatDateForInput(oneHourFromNow);
      }
    });
    if (this.currentOptions.status === "scheduled") {
      scheduleSetting.settingEl.addClass("visible");
    }
    new import_obsidian.Setting(contentEl).setName("Visibility").setDesc("Who can see this post").addDropdown((dropdown) => dropdown.addOption("public", "Everyone").addOption("members", "All Members").addOption("paid", "Paid Members Only").setValue(this.currentOptions.visibility).onChange((value) => {
      this.currentOptions.visibility = value;
    }));
    new import_obsidian.Setting(contentEl).setName("Featured Post").setDesc("Mark this post as featured").addToggle((toggle) => toggle.setValue(this.currentOptions.featured).onChange((value) => {
      this.currentOptions.featured = value;
    }));
    const tagsContainer = contentEl.createDiv();
    new import_obsidian.Setting(tagsContainer).setName("Tags").setDesc("Comma-separated list of tags").addText((text) => text.setValue(this.currentOptions.tags.join(", ")).onChange((value) => {
      this.currentOptions.tags = value.split(",").map((tag) => tag.trim()).filter((tag) => tag.length > 0);
    }));
    const buttonContainer = contentEl.createDiv({ cls: "modal-button-container publish-preview-buttons" });
    const cancelButton = buttonContainer.createEl("button", {
      text: "Cancel",
      cls: "modal-button"
    });
    cancelButton.addEventListener("click", () => this.close());
    const publishButton = buttonContainer.createEl("button", {
      text: "Publish",
      cls: "modal-button mod-cta"
    });
    publishButton.addEventListener("click", () => {
      this.onSubmit(this.currentOptions);
      this.close();
    });
  }
  formatDateForInput(date) {
    const inputDate = date || new Date();
    const year = inputDate.getFullYear();
    const month = String(inputDate.getMonth() + 1).padStart(2, "0");
    const day = String(inputDate.getDate()).padStart(2, "0");
    const hours = String(inputDate.getHours()).padStart(2, "0");
    const minutes = String(inputDate.getMinutes()).padStart(2, "0");
    return `${year}-${month}-${day}T${hours}:${minutes}`;
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
    this.previewComponent.unload();
  }
};

// main.ts
var DEFAULT_SETTINGS = {
  ghostUrl: "",
  apiKey: "",
  imagesDirectory: "assets/files",
  openEditorAfterPublish: false,
  recentPostsFile: "Recent Ghost Posts.md",
  enableRecentPosts: false
};
var GhostyPostyPlugin = class extends import_obsidian2.Plugin {
  async onload() {
    await this.loadSettings();
    this.addSettingTab(new GhostyPostySettingTab(this.app, this));
    this.addCommand({
      id: "publish-note-as-draft",
      name: "Publish current note as a draft or post",
      checkCallback: (checking) => {
        const activeView = this.app.workspace.getActiveViewOfType(import_obsidian2.MarkdownView);
        if (!activeView) {
          return false;
        }
        if (checking) {
          return !!this.settings.ghostUrl && !!this.settings.apiKey;
        }
        this.publishCurrentNote(activeView);
        return true;
      }
    });
    this.addCommand({
      id: "refresh-recent-posts",
      name: "Refresh recent Ghost posts",
      checkCallback: (checking) => {
        if (checking) {
          return this.settings.enableRecentPosts && !!this.settings.ghostUrl && !!this.settings.apiKey;
        }
        this.updateRecentPosts();
        return true;
      }
    });
    if (this.settings.enableRecentPosts) {
      this.updateRecentPosts();
    }
  }
  parseFrontMatter(content) {
    const frontMatter = {
      status: "draft",
      tags: [],
      featured: false,
      visibility: "public"
    };
    if (!content.startsWith("---")) {
      return { frontMatter, markdownContent: content };
    }
    const secondDivider = content.indexOf("---", 3);
    if (secondDivider === -1) {
      return { frontMatter, markdownContent: content };
    }
    const frontMatterText = content.substring(3, secondDivider).trim();
    const markdownContent = content.substring(secondDivider + 3).trim();
    const lines = frontMatterText.split("\n");
    for (let i = 0; i < lines.length; i++) {
      const line = lines[i].trim();
      if (!line)
        continue;
      if (line.includes(":")) {
        const [key, value] = line.split(":", 2).map((s) => s.trim());
        switch (key.toLowerCase()) {
          case "title":
            frontMatter.title = value;
            break;
          case "status":
            frontMatter.status = value === "post" || value === "published" ? "published" : "draft";
            break;
          case "time":
            frontMatter.time = value;
            break;
          case "featured":
            frontMatter.featured = value.toLowerCase() === "true";
            break;
          case "visibility":
            const visibilityValue = value.toLowerCase();
            if (["public", "members", "paid"].includes(visibilityValue)) {
              frontMatter.visibility = visibilityValue;
            }
            break;
          case "tags":
            const tagList = [];
            if (value) {
              value.split(",").forEach((tag) => {
                const trimmedTag = tag.trim();
                if (trimmedTag)
                  tagList.push(trimmedTag);
              });
            } else {
              let j = i + 1;
              while (j < lines.length && lines[j].trim().startsWith("-")) {
                const tag = lines[j].trim().substring(1).trim();
                if (tag)
                  tagList.push(tag);
                j++;
              }
            }
            frontMatter.tags = tagList;
            break;
        }
      }
    }
    return { frontMatter, markdownContent };
  }
  convertObsidianImageLinks(content) {
    return content.replace(/!\[\[(.*?)\]\]/g, "![]($1)");
  }
  formatInlineCode(content) {
    return content.replace(/(?<!`)`([^`]+)`(?!`)/g, (match, code) => {
      return match;
    });
  }
  async processImageLinks(content, view) {
    const imageRegex = /!\[\[(.*?)\]\]/g;
    const imagePaths = [];
    let match;
    while ((match = imageRegex.exec(content)) !== null) {
      imagePaths.push(match[1]);
    }
    if (imagePaths.length === 0) {
      return content;
    }
    const imageMap = /* @__PURE__ */ new Map();
    for (const imagePath of imagePaths) {
      try {
        const ghostUrl = await this.uploadImageToGhost(imagePath, view);
        if (ghostUrl) {
          imageMap.set(imagePath, ghostUrl);
        }
      } catch (error) {
        new import_obsidian2.Notice(`Failed to upload image ${imagePath}: ${error}`);
      }
    }
    let processedContent = content;
    for (const [imagePath, ghostUrl] of imageMap.entries()) {
      const regex = new RegExp(`!\\[\\[${this.escapeRegExp(imagePath)}\\]\\]`, "g");
      processedContent = processedContent.replace(regex, `![](${ghostUrl})`);
    }
    processedContent = this.formatInlineCode(processedContent);
    return processedContent;
  }
  escapeRegExp(string) {
    return string.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
  }
  async uploadImageToGhost(imagePath, view) {
    try {
      const file = this.app.vault.getAbstractFileByPath(this.resolveImagePath(imagePath, view));
      if (!file || !(file instanceof import_obsidian2.TFile)) {
        new import_obsidian2.Notice(`Image not found: ${imagePath}`);
        return null;
      }
      const fileData = await this.app.vault.readBinary(file);
      const uploadUrl = await this.uploadFileToGhost(file.name, fileData);
      if (uploadUrl) {
        return uploadUrl;
      } else {
        new import_obsidian2.Notice("Failed to upload image");
        return null;
      }
    } catch (error) {
      new import_obsidian2.Notice(`Error uploading image ${imagePath}: ${error}`);
      return null;
    }
  }
  resolveImagePath(imagePath, view) {
    var _a, _b;
    if (imagePath.startsWith("/")) {
      return imagePath;
    }
    const currentNotePath = ((_b = (_a = view.file) == null ? void 0 : _a.parent) == null ? void 0 : _b.path) || "";
    const relativeToNote = `${currentNotePath}/${imagePath}`;
    if (this.app.vault.getAbstractFileByPath(relativeToNote)) {
      return relativeToNote;
    }
    return `${this.settings.imagesDirectory}/${imagePath}`;
  }
  async uploadFileToGhost(fileName, fileData) {
    var _a, _b, _c;
    try {
      const { ghostUrl, apiKey } = this.settings;
      if (!ghostUrl || !apiKey) {
        new import_obsidian2.Notice("Ghost URL and API Key are required");
        return null;
      }
      const baseUrl = ghostUrl.trim().replace(/\/$/, "");
      const [id, secret] = apiKey.split(":");
      if (!id || !secret) {
        new import_obsidian2.Notice("Invalid API key format");
        return null;
      }
      const apiUrl = `${baseUrl}/ghost/api/admin/images/upload/`;
      const boundary = "----WebKitFormBoundary" + Math.random().toString(16).substring(2);
      const fileHeader = `--${boundary}\r
Content-Disposition: form-data; name="file"; filename="${fileName}"\r
Content-Type: ${this.getMimeType(fileName)}\r
\r
`;
      const fileFooter = `\r
--${boundary}--\r
`;
      const headerBuffer = new TextEncoder().encode(fileHeader);
      const footerBuffer = new TextEncoder().encode(fileFooter);
      const combinedBuffer = new Uint8Array(headerBuffer.byteLength + fileData.byteLength + footerBuffer.byteLength);
      combinedBuffer.set(new Uint8Array(headerBuffer), 0);
      combinedBuffer.set(new Uint8Array(fileData), headerBuffer.byteLength);
      combinedBuffer.set(new Uint8Array(footerBuffer), headerBuffer.byteLength + fileData.byteLength);
      const authToken = this.generateGhostAdminToken(id, secret);
      try {
        const response = await (0, import_obsidian2.requestUrl)({
          url: apiUrl,
          method: "POST",
          headers: {
            "Content-Type": `multipart/form-data; boundary=${boundary}`,
            "Authorization": authToken
          },
          body: combinedBuffer,
          throw: true
        });
        if (response.status >= 200 && response.status < 300) {
          return ((_c = (_b = (_a = response.json) == null ? void 0 : _a.images) == null ? void 0 : _b[0]) == null ? void 0 : _c.url) || null;
        } else {
          return null;
        }
      } catch (error) {
        return await this.uploadFileWithNode(apiUrl, id, secret, fileName, fileData);
      }
    } catch (error) {
      new import_obsidian2.Notice(`Error uploading image ${fileName}: ${error}`);
      return null;
    }
  }
  async uploadFileWithNode(url, id, secret, fileName, fileData) {
    return new Promise((resolve) => {
      try {
        const nodeRequire = window.require;
        if (!nodeRequire) {
          resolve(null);
          return;
        }
        const https = nodeRequire("https");
        const crypto = nodeRequire("crypto");
        const urlObj = new URL(url);
        const boundary = "----NodeJSFormBoundary" + Math.random().toString(16).substring(2);
        const now = Math.floor(Date.now() / 1e3);
        const fiveMinutesFromNow = now + 5 * 60;
        const header = {
          alg: "HS256",
          typ: "JWT",
          kid: id
        };
        const payload = {
          iat: now,
          exp: fiveMinutesFromNow,
          aud: "/v5/admin/"
        };
        const encodeBase64 = (obj) => {
          const str = JSON.stringify(obj);
          return crypto.createHash("sha256").update(str).digest("base64").replace(/\+/g, "-").replace(/\//g, "_").replace(/=+$/g, "");
        };
        const headerBase64 = Buffer.from(JSON.stringify(header)).toString("base64").replace(/\+/g, "-").replace(/\//g, "_").replace(/=+$/g, "");
        const payloadBase64 = Buffer.from(JSON.stringify(payload)).toString("base64").replace(/\+/g, "-").replace(/\//g, "_").replace(/=+$/g, "");
        const signatureInput = `${headerBase64}.${payloadBase64}`;
        const signature = crypto.createHmac("sha256", Buffer.from(secret, "hex")).update(signatureInput).digest("base64").replace(/\+/g, "-").replace(/\//g, "_").replace(/=+$/g, "");
        const token = `${headerBase64}.${payloadBase64}.${signature}`;
        const fileHeader = `--${boundary}\r
Content-Disposition: form-data; name="file"; filename="${fileName}"\r
Content-Type: ${this.getMimeType(fileName)}\r
\r
`;
        const fileFooter = `\r
--${boundary}--\r
`;
        const headerBuffer = Buffer.from(fileHeader);
        const footerBuffer = Buffer.from(fileFooter);
        const fileBuffer = Buffer.from(fileData);
        const dataBuffer = Buffer.concat([
          headerBuffer,
          fileBuffer,
          footerBuffer
        ]);
        const options = {
          hostname: urlObj.hostname,
          path: urlObj.pathname + urlObj.search,
          method: "POST",
          headers: {
            "Content-Type": `multipart/form-data; boundary=${boundary}`,
            "Content-Length": dataBuffer.length,
            "Authorization": `Ghost ${token}`
          }
        };
        const req = https.request(options, (res) => {
          let data = "";
          res.on("data", (chunk) => {
            data += chunk;
          });
          res.on("end", () => {
            var _a, _b;
            if (res.statusCode >= 200 && res.statusCode < 300) {
              try {
                const jsonData = JSON.parse(data);
                resolve(((_b = (_a = jsonData == null ? void 0 : jsonData.images) == null ? void 0 : _a[0]) == null ? void 0 : _b.url) || null);
              } catch (e) {
                resolve(null);
              }
            } else {
              resolve(null);
            }
          });
        });
        req.on("error", (error) => {
          resolve(null);
        });
        req.write(dataBuffer);
        req.end();
      } catch (error) {
        resolve(null);
      }
    });
  }
  getMimeType(fileName) {
    var _a;
    const extension = (_a = fileName.split(".").pop()) == null ? void 0 : _a.toLowerCase();
    const mimeTypes = {
      "jpg": "image/jpeg",
      "jpeg": "image/jpeg",
      "png": "image/png",
      "gif": "image/gif",
      "webp": "image/webp",
      "svg": "image/svg+xml",
      "tiff": "image/tiff",
      "tif": "image/tiff",
      "bmp": "image/bmp"
    };
    return mimeTypes[extension || ""] || "application/octet-stream";
  }
  async publishCurrentNote(view) {
    var _a;
    try {
      const editor = view.editor;
      const content = editor.getValue();
      const fileName = ((_a = view.file) == null ? void 0 : _a.basename) || "Untitled Note";
      const { frontMatter, markdownContent } = this.parseFrontMatter(content);
      const processedContent = await this.processImageLinks(markdownContent, view);
      const title = frontMatter.title || fileName;
      const initialOptions = {
        status: frontMatter.status || "draft",
        tags: frontMatter.tags || [],
        featured: frontMatter.featured || false,
        visibility: frontMatter.visibility || "public",
        scheduledTime: frontMatter.time ? new Date(frontMatter.time) : new Date()
      };
      new PublishPreviewModal(this.app, title, processedContent, initialOptions, async (options) => {
        const result = await this.publishToGhost(title, processedContent, {
          ...frontMatter,
          status: options.status,
          tags: options.tags,
          featured: options.featured,
          visibility: options.visibility,
          time: options.scheduledTime ? options.scheduledTime.toISOString() : void 0
        });
        if (result.success) {
          new import_obsidian2.Notice(`Successfully published "${title}" as ${options.status}`);
        } else {
          new import_obsidian2.Notice(`Failed to publish: ${result.error}`);
        }
      }).open();
    } catch (error) {
      new import_obsidian2.Notice(`Error publishing note: ${error}`);
    }
  }
  generateGhostAdminToken(id, secret) {
    try {
      const crypto = window.require ? window.require("crypto") : null;
      if (!crypto) {
        return `Ghost ${id}:${secret}`;
      }
      const now = Math.floor(Date.now() / 1e3);
      const fiveMinutesFromNow = now + 5 * 60;
      const header = {
        alg: "HS256",
        typ: "JWT",
        kid: id
      };
      const payload = {
        iat: now,
        exp: fiveMinutesFromNow,
        aud: "/v5/admin/"
      };
      const encodeBase64 = (obj) => {
        const str = JSON.stringify(obj);
        return crypto.createHash("sha256").update(str).digest("base64").replace(/\+/g, "-").replace(/\//g, "_").replace(/=+$/g, "");
      };
      const headerBase64 = Buffer.from(JSON.stringify(header)).toString("base64").replace(/\+/g, "-").replace(/\//g, "_").replace(/=+$/g, "");
      const payloadBase64 = Buffer.from(JSON.stringify(payload)).toString("base64").replace(/\+/g, "-").replace(/\//g, "_").replace(/=+$/g, "");
      const signatureInput = `${headerBase64}.${payloadBase64}`;
      const signature = crypto.createHmac("sha256", Buffer.from(secret, "hex")).update(signatureInput).digest("base64").replace(/\+/g, "-").replace(/\//g, "_").replace(/=+$/g, "");
      const token = `${headerBase64}.${payloadBase64}.${signature}`;
      return `Ghost ${token}`;
    } catch (error) {
      return `Ghost ${id}:${secret}`;
    }
  }
  parseMarkdownToMobiledoc(content) {
    const createTextNode = (text, format = 0) => ({
      type: "text",
      text,
      detail: 0,
      format,
      mode: "normal",
      style: "",
      version: 1
    });
    const createParagraphNode = (children) => ({
      type: "paragraph",
      children,
      direction: "ltr",
      format: 0,
      indent: 0,
      version: 1
    });
    const createListNode = (listItems, listType) => ({
      type: "list",
      listType,
      start: 1,
      children: listItems,
      direction: "ltr",
      format: 0,
      indent: 0,
      version: 1
    });
    const createListItemNode = (children) => ({
      type: "listitem",
      children,
      direction: "ltr",
      format: 0,
      indent: 0,
      value: 1,
      version: 1
    });
    const processTextWithMarkup = (text) => {
      const nodes = [];
      let currentIndex = 0;
      const markupRegex = /(?:```[\s\S]*?```)|(?:`[^`]+`)|(?:\[([^\]]+)\]\(([^)]+)\))|(?:\*\*[^*]+\*\*)|(?:__[^_]+__)|(?:\*[^*]+\*)/g;
      let match;
      while ((match = markupRegex.exec(text)) !== null) {
        if (match.index > currentIndex) {
          nodes.push(createTextNode(text.slice(currentIndex, match.index)));
        }
        const matchedText = match[0];
        if (matchedText.startsWith("```")) {
          nodes.push(createTextNode(matchedText));
        } else if (matchedText.startsWith("`")) {
          const code = matchedText.slice(1, -1);
          nodes.push(createTextNode(code, 16));
        } else if (matchedText.startsWith("[")) {
          const linkMatch = /\[([^\]]+)\]\(([^)]+)\)/.exec(matchedText);
          if (linkMatch) {
            nodes.push({
              type: "link",
              url: linkMatch[2],
              children: [createTextNode(linkMatch[1])],
              direction: "ltr",
              format: 0,
              indent: 0,
              version: 1
            });
          }
        } else if (matchedText.startsWith("**") || matchedText.startsWith("__")) {
          const boldText = matchedText.slice(2, -2);
          nodes.push(createTextNode(boldText, 1));
        } else if (matchedText.startsWith("*")) {
          const italicText = matchedText.slice(1, -1);
          nodes.push(createTextNode(italicText, 2));
        }
        currentIndex = match.index + matchedText.length;
      }
      if (currentIndex < text.length) {
        nodes.push(createTextNode(text.slice(currentIndex)));
      }
      return nodes;
    };
    const rootChildren = [];
    let currentListItems = null;
    let currentListType = null;
    const paragraphBlocks = content.split("\n\n").filter((p) => p.trim());
    paragraphBlocks.forEach((block) => {
      const lines = block.split("\n").filter((line) => line.trim());
      lines.forEach((line) => {
        const trimmedLine = line.trim();
        const bulletListMatch = trimmedLine.match(/^[-*]\s+(.+)$/);
        const numberListMatch = trimmedLine.match(/^(\d+)\.\s+(.+)$/);
        if (bulletListMatch || numberListMatch) {
          const listText = bulletListMatch ? bulletListMatch[1] : numberListMatch[2];
          const listType = bulletListMatch ? "bullet" : "number";
          if (!currentListItems || currentListType !== listType) {
            if (currentListItems) {
              rootChildren.push(createListNode(currentListItems, currentListType));
            }
            currentListItems = [];
            currentListType = listType;
          }
          currentListItems.push(createListItemNode([
            createParagraphNode(processTextWithMarkup(listText))
          ]));
          return;
        }
        if (currentListItems) {
          rootChildren.push(createListNode(currentListItems, currentListType));
          currentListItems = null;
          currentListType = null;
        }
        if (trimmedLine.match(/^-{3,}$/)) {
          rootChildren.push({
            type: "horizontalrule",
            version: 1
          });
          return;
        }
        const headingMatch = trimmedLine.match(/^(#{1,6})\s+(.+)$/m);
        if (headingMatch) {
          const level = headingMatch[1].length;
          const text = headingMatch[2].trim();
          rootChildren.push({
            type: "heading",
            tag: `h${level}`,
            children: processTextWithMarkup(text),
            direction: "ltr",
            format: 0,
            indent: 0,
            version: 1
          });
          return;
        }
        if (trimmedLine.startsWith(">")) {
          const quoteText = trimmedLine.substring(1).trim();
          rootChildren.push({
            type: "quote",
            children: [createParagraphNode(processTextWithMarkup(quoteText))],
            direction: "ltr",
            format: 0,
            indent: 0,
            version: 1
          });
          return;
        }
        const imageMatch = trimmedLine.match(/^!\[(.*?)\]\((.*?)\)$/);
        if (imageMatch) {
          const [_, alt, src] = imageMatch;
          rootChildren.push({
            type: "image",
            src,
            altText: alt,
            width: void 0,
            height: void 0,
            maxWidth: "100%",
            showCaption: false,
            caption: void 0,
            direction: "ltr",
            format: 0,
            indent: 0,
            version: 1
          });
          return;
        }
        rootChildren.push(createParagraphNode(processTextWithMarkup(trimmedLine)));
      });
    });
    if (currentListItems) {
      rootChildren.push(createListNode(currentListItems, currentListType));
    }
    const root = {
      type: "root",
      children: rootChildren,
      direction: "ltr",
      format: 0,
      indent: 0,
      version: 1
    };
    return JSON.stringify({ root });
  }
  async publishToGhost(title, markdownContent, frontMatter) {
    var _a, _b, _c, _d;
    try {
      const { ghostUrl, apiKey } = this.settings;
      if (!ghostUrl || !apiKey) {
        return {
          success: false,
          error: "Ghost URL and API Key are required"
        };
      }
      const baseUrl = ghostUrl.trim().replace(/\/$/, "");
      const [id, secret] = apiKey.split(":");
      if (!id || !secret) {
        return {
          success: false,
          error: "Invalid API key format"
        };
      }
      const cleanMarkdown = markdownContent.trim();
      console.log("Original Markdown content:", cleanMarkdown);
      const lines = cleanMarkdown.split("\n");
      let featuredImage;
      let contentWithoutFirstImage = cleanMarkdown;
      if (lines.length > 0) {
        const firstLine = lines[0].trim();
        const imageMatch = firstLine.match(/^!\[.*?\]\((.*?)\)$/);
        if (imageMatch) {
          featuredImage = imageMatch[1];
          contentWithoutFirstImage = lines.slice(1).join("\n").trim();
        }
      }
      const lexical = this.parseMarkdownToMobiledoc(contentWithoutFirstImage);
      console.log("Lexical format:", lexical);
      const postData = {
        posts: [{
          title,
          lexical,
          status: frontMatter.status || "draft",
          featured: frontMatter.featured || false,
          visibility: frontMatter.visibility || "public",
          published_at: null
        }]
      };
      console.log("Final post data:", JSON.stringify(postData, null, 2));
      if (featuredImage) {
        postData.posts[0].feature_image = featuredImage;
      }
      if (frontMatter.tags && frontMatter.tags.length > 0) {
        postData.posts[0].tags = frontMatter.tags.map((tag) => ({ name: tag }));
      }
      if (frontMatter.status === "scheduled" && frontMatter.time) {
        postData.posts[0].published_at = frontMatter.time;
      } else if (frontMatter.status === "published") {
        postData.posts[0].published_at = new Date().toISOString();
      }
      try {
        const authToken = this.generateGhostAdminToken(id, secret);
        const response = await (0, import_obsidian2.requestUrl)({
          url: `${baseUrl}/ghost/api/admin/posts/`,
          method: "POST",
          headers: {
            "Content-Type": "application/json",
            "Authorization": authToken
          },
          body: JSON.stringify(postData),
          throw: false
        });
        if (response.status >= 200 && response.status < 300) {
          const jsonData = response.json;
          let postUrl = "";
          try {
            postUrl = ((_b = (_a = jsonData == null ? void 0 : jsonData.posts) == null ? void 0 : _a[0]) == null ? void 0 : _b.url) || "";
          } catch (e) {
            console.log("Could not extract post URL from response");
          }
          if (this.settings.openEditorAfterPublish && ((_d = (_c = jsonData == null ? void 0 : jsonData.posts) == null ? void 0 : _c[0]) == null ? void 0 : _d.id)) {
            const editorUrl = `${this.settings.ghostUrl}/ghost/#/editor/post/${jsonData.posts[0].id}`;
            window.open(editorUrl, "_blank");
          }
          return {
            success: true,
            postUrl
          };
        } else {
          const errorResponse = response.text;
          console.error("API Error when publishing:", response.status);
          console.error("Error response body:", errorResponse);
          if (errorResponse.includes("INVALID_JWT") || errorResponse.includes("Invalid token")) {
            console.log("Token error detected, trying Node.js method with proper JWT...");
            return await this.publishWithNode(baseUrl, id, secret, postData);
          }
          return {
            success: false,
            error: `API Error (${response.status}): ${errorResponse}`
          };
        }
      } catch (error) {
        console.error("Obsidian request failed when publishing, trying Node.js:", error);
        return await this.publishWithNode(baseUrl, id, secret, postData);
      }
    } catch (error) {
      console.error("Publish error:", error);
      return {
        success: false,
        error: `Error during publishing: ${error}`
      };
    }
  }
  async publishWithNode(url, id, secret, postData) {
    return new Promise((resolve) => {
      try {
        const nodeRequire = window.require;
        if (!nodeRequire) {
          resolve({
            success: false,
            error: "Could not access Node.js modules for publishing"
          });
          return;
        }
        const https = nodeRequire("https");
        const crypto = nodeRequire("crypto");
        const urlObj = new URL(url);
        const now = Math.floor(Date.now() / 1e3);
        const fiveMinutesFromNow = now + 5 * 60;
        const header = {
          alg: "HS256",
          typ: "JWT",
          kid: id
        };
        const payload = {
          iat: now,
          exp: fiveMinutesFromNow,
          aud: "/v5/admin/"
        };
        const headerBase64 = Buffer.from(JSON.stringify(header)).toString("base64").replace(/\+/g, "-").replace(/\//g, "_").replace(/=+$/g, "");
        const payloadBase64 = Buffer.from(JSON.stringify(payload)).toString("base64").replace(/\+/g, "-").replace(/\//g, "_").replace(/=+$/g, "");
        const signatureInput = `${headerBase64}.${payloadBase64}`;
        const signature = crypto.createHmac("sha256", Buffer.from(secret, "hex")).update(signatureInput).digest("base64").replace(/\+/g, "-").replace(/\//g, "_").replace(/=+$/g, "");
        const token = `${headerBase64}.${payloadBase64}.${signature}`;
        const authToken = `Ghost ${token}`;
        const postContent = JSON.stringify(postData);
        const options = {
          hostname: urlObj.hostname,
          path: urlObj.pathname + urlObj.search,
          method: "POST",
          headers: {
            "Content-Type": "application/json",
            "Content-Length": postContent.length,
            "Authorization": authToken
          }
        };
        const req = https.request(options, (res) => {
          let data = "";
          res.on("data", (chunk) => {
            data += chunk;
          });
          res.on("end", () => {
            var _a, _b, _c, _d;
            if (res.statusCode >= 200 && res.statusCode < 300) {
              try {
                const jsonData = JSON.parse(data);
                let postUrl = "";
                try {
                  postUrl = ((_b = (_a = jsonData == null ? void 0 : jsonData.posts) == null ? void 0 : _a[0]) == null ? void 0 : _b.url) || "";
                } catch (e) {
                  console.log("Could not extract post URL from response");
                }
                if (this.settings.openEditorAfterPublish && ((_d = (_c = jsonData == null ? void 0 : jsonData.posts) == null ? void 0 : _c[0]) == null ? void 0 : _d.id)) {
                  const editorUrl = `${this.settings.ghostUrl}/ghost/#/editor/post/${jsonData.posts[0].id}`;
                  window.open(editorUrl, "_blank");
                }
                resolve({
                  success: true,
                  postUrl
                });
              } catch (e) {
                console.error("Error parsing JSON from publish response:", e);
                resolve({
                  success: true,
                  error: `Could not parse response data: ${e}`
                });
              }
            } else {
              console.error("API Error from Node.js publish:", res.statusCode);
              console.error("Error response body:", data);
              resolve({
                success: false,
                error: `API Error (${res.statusCode}): ${data}`
              });
            }
          });
        });
        req.on("error", (error) => {
          console.error("Node.js publish error:", error);
          resolve({
            success: false,
            error: `Network error during publishing: ${error.message}`
          });
        });
        req.write(postContent);
        req.end();
      } catch (error) {
        console.error("Error in Node.js publishing:", error);
        resolve({
          success: false,
          error: `Error during publishing: ${error}`
        });
      }
    });
  }
  onunload() {
    console.log("Unloaded Ghosty Posty plugin");
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  async fetchRecentPosts() {
    try {
      const { ghostUrl, apiKey } = this.settings;
      if (!ghostUrl || !apiKey) {
        throw new Error("Ghost URL and API Key are required");
      }
      const baseUrl = ghostUrl.trim().replace(/\/$/, "");
      const [id, secret] = apiKey.split(":");
      if (!id || !secret) {
        throw new Error("Invalid API key format");
      }
      const authToken = this.generateGhostAdminToken(id, secret);
      const response = await (0, import_obsidian2.requestUrl)({
        url: `${baseUrl}/ghost/api/admin/posts/?limit=20&order=published_at%20desc&formats=mobiledoc,html,plaintext&include=tags`,
        method: "GET",
        headers: {
          "Authorization": authToken
        }
      });
      if (response.status !== 200) {
        throw new Error(`API Error: ${response.status}`);
      }
      const posts = response.json.posts;
      return posts.map((post) => ({
        title: post.title,
        url: post.url,
        published_at: post.published_at,
        tags: (post.tags || []).map((tag) => tag.name)
      }));
    } catch (error) {
      console.error("Error fetching recent posts:", error);
      throw error;
    }
  }
  async updateRecentPosts() {
    try {
      if (!this.settings.enableRecentPosts) {
        return;
      }
      const posts = await this.fetchRecentPosts();
      const formatDate = (dateStr) => {
        const date = new Date(dateStr);
        return date.toLocaleDateString("en-US", {
          year: "numeric",
          month: "long",
          day: "numeric"
        });
      };
      const content = [
        "# Recent Ghost Posts",
        "",
        "Last updated: " + new Date().toLocaleDateString("en-US", {
          year: "numeric",
          month: "long",
          day: "numeric"
        }),
        "",
        "| Title | Date | Tags |",
        "|-------|------|------|",
        ...posts.map((post) => {
          const date = formatDate(post.published_at);
          const title = `[${post.title}](${post.url})`;
          const tags = post.tags.length > 0 ? post.tags.join(", ") : "-";
          const escapedTitle = title.replace(/\|/g, "\\|");
          const escapedTags = tags.replace(/\|/g, "\\|");
          return `| ${escapedTitle} | ${date} | ${escapedTags} |`;
        })
      ].join("\n");
      const filePath = this.settings.recentPostsFile;
      let file = this.app.vault.getAbstractFileByPath(filePath);
      if (!file) {
        file = await this.app.vault.create(filePath, content);
        new import_obsidian2.Notice(`Created recent posts file: ${filePath}`);
      } else if (file instanceof import_obsidian2.TFile) {
        await this.app.vault.modify(file, content);
        new import_obsidian2.Notice("Updated recent posts");
      }
    } catch (error) {
      new import_obsidian2.Notice(`Error updating recent posts: ${error}`);
    }
  }
};
var GhostyPostySettingTab = class extends import_obsidian2.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Ghosty Posty Settings" });
    new import_obsidian2.Setting(containerEl).setName("Ghost Blog URL").setDesc("URL of your Ghost blog (ex: https://yourblog.com)").addText((text) => text.setPlaceholder("https://yourblog.com").setValue(this.plugin.settings.ghostUrl).onChange(async (value) => {
      this.plugin.settings.ghostUrl = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian2.Setting(containerEl).setName("Admin API Key").setDesc("Your Ghost Admin API key").addText((text) => text.setPlaceholder("00000000000000000000:00000000000000000000000000000000000000000000").setValue(this.plugin.settings.apiKey).onChange(async (value) => {
      this.plugin.settings.apiKey = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian2.Setting(containerEl).setName("Images Directory").setDesc("Default directory in your vault where images are stored (e.g., assets/files)").addText((text) => text.setPlaceholder("assets/files").setValue(this.plugin.settings.imagesDirectory).onChange(async (value) => {
      this.plugin.settings.imagesDirectory = value.replace(/^\/+|\/+$/g, "");
      await this.plugin.saveSettings();
    }));
    new import_obsidian2.Setting(containerEl).setName("Open Editor After Publish").setDesc("Whether to open the editor after publishing a post").addToggle((toggle) => toggle.setValue(this.plugin.settings.openEditorAfterPublish).onChange(async (value) => {
      this.plugin.settings.openEditorAfterPublish = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian2.Setting(containerEl).setName("Recent Posts File").setDesc("The file name for the recent posts file").addText((text) => text.setPlaceholder("Recent Ghost Posts.md").setValue(this.plugin.settings.recentPostsFile).onChange(async (value) => {
      this.plugin.settings.recentPostsFile = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian2.Setting(containerEl).setName("Enable Recent Posts").setDesc("Whether to enable the recent posts feature").addToggle((toggle) => toggle.setValue(this.plugin.settings.enableRecentPosts).onChange(async (value) => {
      this.plugin.settings.enableRecentPosts = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian2.Setting(containerEl).setName("Test Connection").setDesc("Verify your Ghost credentials").addButton((button) => button.setButtonText("Test Connection").setCta().onClick(async () => {
      button.setDisabled(true);
      button.setButtonText("Testing...");
      try {
        const result = await this.testGhostConnection();
        if (result.success) {
          new import_obsidian2.Notice("Connection successful!");
        } else {
          new import_obsidian2.Notice(`Connection failed: ${result.error}`);
        }
      } finally {
        button.setDisabled(false);
        button.setButtonText("Test Connection");
      }
    }));
  }
  async testGhostConnection() {
    try {
      const { ghostUrl, apiKey } = this.plugin.settings;
      if (!ghostUrl || !apiKey) {
        return {
          success: false,
          error: "Please enter both Ghost URL and API Key"
        };
      }
      const baseUrl = ghostUrl.trim().replace(/\/$/, "");
      try {
        new URL(baseUrl);
      } catch (e) {
        return {
          success: false,
          error: "Invalid URL format"
        };
      }
      const [id, secret] = apiKey.split(":");
      if (!id || !secret) {
        return {
          success: false,
          error: "Invalid API key format. Should be ID:SECRET"
        };
      }
      const possibleEndpoints = [
        `/ghost/api/admin/posts/`,
        `/ghost/api/admin/settings/`,
        `/ghost/api/admin/users/me/`,
        `/ghost/api/admin/site/`
      ];
      for (const endpoint of possibleEndpoints) {
        try {
          const testUrl = `${baseUrl}${endpoint}`;
          const response = await (0, import_obsidian2.requestUrl)({
            url: testUrl,
            method: "GET",
            headers: {
              "Authorization": `Ghost ${id}:${secret}`
            },
            throw: false
          });
          if (response.status >= 200 && response.status < 300) {
            return { success: true };
          }
        } catch (e) {
          continue;
        }
      }
      return {
        success: false,
        error: "Connection failed. Please check your Ghost URL and API Key"
      };
    } catch (error) {
      return {
        success: false,
        error: `Error during connection test: ${error}`
      };
    }
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibWFpbi50cyIsICJzcmMvUHVibGlzaFByZXZpZXdNb2RhbC50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiaW1wb3J0IHsgQXBwLCBFZGl0b3IsIE1hcmtkb3duVmlldywgTm90aWNlLCBQbHVnaW4sIFBsdWdpblNldHRpbmdUYWIsIFNldHRpbmcsIHJlcXVlc3RVcmwsIFRGaWxlIH0gZnJvbSAnb2JzaWRpYW4nO1xuaW1wb3J0IHsgUHVibGlzaFByZXZpZXdNb2RhbCwgUHVibGlzaE9wdGlvbnMgfSBmcm9tICcuL3NyYy9QdWJsaXNoUHJldmlld01vZGFsJztcblxuaW50ZXJmYWNlIEdob3N0eVBvc3R5U2V0dGluZ3Mge1xuICAgIGdob3N0VXJsOiBzdHJpbmc7XG4gICAgYXBpS2V5OiBzdHJpbmc7XG4gICAgaW1hZ2VzRGlyZWN0b3J5OiBzdHJpbmc7XG4gICAgb3BlbkVkaXRvckFmdGVyUHVibGlzaDogYm9vbGVhbjtcbiAgICByZWNlbnRQb3N0c0ZpbGU6IHN0cmluZztcbiAgICBlbmFibGVSZWNlbnRQb3N0czogYm9vbGVhbjtcbn1cblxuaW50ZXJmYWNlIEZyb250TWF0dGVyRGF0YSB7XG4gICAgdGFncz86IHN0cmluZ1tdO1xuICAgIHN0YXR1cz86ICdkcmFmdCcgfCAncHVibGlzaGVkJyB8ICdzY2hlZHVsZWQnO1xuICAgIHRpbWU/OiBzdHJpbmc7XG4gICAgdGl0bGU/OiBzdHJpbmc7XG4gICAgZmVhdHVyZWQ/OiBib29sZWFuO1xuICAgIHZpc2liaWxpdHk/OiAncHVibGljJyB8ICdtZW1iZXJzJyB8ICdwYWlkJztcbn1cblxuY29uc3QgREVGQVVMVF9TRVRUSU5HUzogR2hvc3R5UG9zdHlTZXR0aW5ncyA9IHtcbiAgICBnaG9zdFVybDogJycsXG4gICAgYXBpS2V5OiAnJyxcbiAgICBpbWFnZXNEaXJlY3Rvcnk6ICdhc3NldHMvZmlsZXMnLFxuICAgIG9wZW5FZGl0b3JBZnRlclB1Ymxpc2g6IGZhbHNlLFxuICAgIHJlY2VudFBvc3RzRmlsZTogJ1JlY2VudCBHaG9zdCBQb3N0cy5tZCcsXG4gICAgZW5hYmxlUmVjZW50UG9zdHM6IGZhbHNlXG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEdob3N0eVBvc3R5UGx1Z2luIGV4dGVuZHMgUGx1Z2luIHtcbiAgICBzZXR0aW5nczogR2hvc3R5UG9zdHlTZXR0aW5ncztcblxuICAgIGFzeW5jIG9ubG9hZCgpIHtcbiAgICAgICAgYXdhaXQgdGhpcy5sb2FkU2V0dGluZ3MoKTtcblxuICAgICAgICB0aGlzLmFkZFNldHRpbmdUYWIobmV3IEdob3N0eVBvc3R5U2V0dGluZ1RhYih0aGlzLmFwcCwgdGhpcykpO1xuXG4gICAgICAgIC8vIEFkZCBhIGNvbW1hbmQgdG8gcHVibGlzaCB0aGUgY3VycmVudCBub3RlIGFzIGEgZHJhZnRcbiAgICAgICAgdGhpcy5hZGRDb21tYW5kKHtcbiAgICAgICAgICAgIGlkOiAncHVibGlzaC1ub3RlLWFzLWRyYWZ0JyxcbiAgICAgICAgICAgIG5hbWU6ICdQdWJsaXNoIGN1cnJlbnQgbm90ZSBhcyBhIGRyYWZ0IG9yIHBvc3QnLFxuICAgICAgICAgICAgY2hlY2tDYWxsYmFjazogKGNoZWNraW5nOiBib29sZWFuKSA9PiB7XG4gICAgICAgICAgICAgICAgLy8gQ2hlY2sgaWYgd2UncmUgaW4gYSBtYXJrZG93biBmaWxlXG4gICAgICAgICAgICAgICAgY29uc3QgYWN0aXZlVmlldyA9IHRoaXMuYXBwLndvcmtzcGFjZS5nZXRBY3RpdmVWaWV3T2ZUeXBlKE1hcmtkb3duVmlldyk7XG4gICAgICAgICAgICAgICAgaWYgKCFhY3RpdmVWaWV3KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgLy8gSWYgd2UncmUgY2hlY2tpbmcsIGp1c3QgcmV0dXJuIHRydWUgaWYgc2V0dGluZ3MgYXJlIGNvbmZpZ3VyZWRcbiAgICAgICAgICAgICAgICBpZiAoY2hlY2tpbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICEhdGhpcy5zZXR0aW5ncy5naG9zdFVybCAmJiAhIXRoaXMuc2V0dGluZ3MuYXBpS2V5O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAvLyBFeGVjdXRlIHRoZSBjb21tYW5kIC0gcHVibGlzaCB0aGUgY3VycmVudCBub3RlXG4gICAgICAgICAgICAgICAgdGhpcy5wdWJsaXNoQ3VycmVudE5vdGUoYWN0aXZlVmlldyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIEFkZCBhIGNvbW1hbmQgdG8gbWFudWFsbHkgcmVmcmVzaCByZWNlbnQgcG9zdHNcbiAgICAgICAgdGhpcy5hZGRDb21tYW5kKHtcbiAgICAgICAgICAgIGlkOiAncmVmcmVzaC1yZWNlbnQtcG9zdHMnLFxuICAgICAgICAgICAgbmFtZTogJ1JlZnJlc2ggcmVjZW50IEdob3N0IHBvc3RzJyxcbiAgICAgICAgICAgIGNoZWNrQ2FsbGJhY2s6IChjaGVja2luZzogYm9vbGVhbikgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChjaGVja2luZykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5zZXR0aW5ncy5lbmFibGVSZWNlbnRQb3N0cyAmJiBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICEhdGhpcy5zZXR0aW5ncy5naG9zdFVybCAmJiBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICEhdGhpcy5zZXR0aW5ncy5hcGlLZXk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlUmVjZW50UG9zdHMoKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gVXBkYXRlIHJlY2VudCBwb3N0cyBvbiBsb2FkIGlmIGVuYWJsZWRcbiAgICAgICAgaWYgKHRoaXMuc2V0dGluZ3MuZW5hYmxlUmVjZW50UG9zdHMpIHtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlUmVjZW50UG9zdHMoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBcbiAgICBwYXJzZUZyb250TWF0dGVyKGNvbnRlbnQ6IHN0cmluZyk6IHsgZnJvbnRNYXR0ZXI6IEZyb250TWF0dGVyRGF0YSwgbWFya2Rvd25Db250ZW50OiBzdHJpbmcgfSB7XG4gICAgICAgIC8vIERlZmF1bHQgdmFsdWVzXG4gICAgICAgIGNvbnN0IGZyb250TWF0dGVyOiBGcm9udE1hdHRlckRhdGEgPSB7XG4gICAgICAgICAgICBzdGF0dXM6ICdkcmFmdCcsXG4gICAgICAgICAgICB0YWdzOiBbXSxcbiAgICAgICAgICAgIGZlYXR1cmVkOiBmYWxzZSxcbiAgICAgICAgICAgIHZpc2liaWxpdHk6ICdwdWJsaWMnXG4gICAgICAgIH07XG4gICAgICAgIFxuICAgICAgICAvLyBDaGVjayBpZiB0aGUgY29udGVudCBoYXMgZnJvbnRtYXR0ZXIgKHN0YXJ0cyB3aXRoIC0tLSlcbiAgICAgICAgaWYgKCFjb250ZW50LnN0YXJ0c1dpdGgoJy0tLScpKSB7XG4gICAgICAgICAgICByZXR1cm4geyBmcm9udE1hdHRlciwgbWFya2Rvd25Db250ZW50OiBjb250ZW50IH07XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIC8vIEZpbmQgdGhlIGVuZCBvZiB0aGUgZnJvbnRtYXR0ZXJcbiAgICAgICAgY29uc3Qgc2Vjb25kRGl2aWRlciA9IGNvbnRlbnQuaW5kZXhPZignLS0tJywgMyk7XG4gICAgICAgIGlmIChzZWNvbmREaXZpZGVyID09PSAtMSkge1xuICAgICAgICAgICAgcmV0dXJuIHsgZnJvbnRNYXR0ZXIsIG1hcmtkb3duQ29udGVudDogY29udGVudCB9O1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAvLyBFeHRyYWN0IHRoZSBmcm9udG1hdHRlciBhbmQgdGhlIHJlbWFpbmluZyBjb250ZW50XG4gICAgICAgIGNvbnN0IGZyb250TWF0dGVyVGV4dCA9IGNvbnRlbnQuc3Vic3RyaW5nKDMsIHNlY29uZERpdmlkZXIpLnRyaW0oKTtcbiAgICAgICAgY29uc3QgbWFya2Rvd25Db250ZW50ID0gY29udGVudC5zdWJzdHJpbmcoc2Vjb25kRGl2aWRlciArIDMpLnRyaW0oKTtcbiAgICAgICAgXG4gICAgICAgIC8vIFBhcnNlIGZyb250bWF0dGVyIGNvbnRlbnRcbiAgICAgICAgY29uc3QgbGluZXMgPSBmcm9udE1hdHRlclRleHQuc3BsaXQoJ1xcbicpO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxpbmVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBsaW5lID0gbGluZXNbaV0udHJpbSgpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBTa2lwIGVtcHR5IGxpbmVzXG4gICAgICAgICAgICBpZiAoIWxpbmUpIGNvbnRpbnVlO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBQYXJzZSBrZXktdmFsdWUgcGFpcnNcbiAgICAgICAgICAgIGlmIChsaW5lLmluY2x1ZGVzKCc6JykpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBba2V5LCB2YWx1ZV0gPSBsaW5lLnNwbGl0KCc6JywgMikubWFwKHMgPT4gcy50cmltKCkpO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIHN3aXRjaCAoa2V5LnRvTG93ZXJDYXNlKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAndGl0bGUnOlxuICAgICAgICAgICAgICAgICAgICAgICAgZnJvbnRNYXR0ZXIudGl0bGUgPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdzdGF0dXMnOlxuICAgICAgICAgICAgICAgICAgICAgICAgZnJvbnRNYXR0ZXIuc3RhdHVzID0gdmFsdWUgPT09ICdwb3N0JyB8fCB2YWx1ZSA9PT0gJ3B1Ymxpc2hlZCcgPyAncHVibGlzaGVkJyA6ICdkcmFmdCc7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAndGltZSc6XG4gICAgICAgICAgICAgICAgICAgICAgICBmcm9udE1hdHRlci50aW1lID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnZmVhdHVyZWQnOlxuICAgICAgICAgICAgICAgICAgICAgICAgZnJvbnRNYXR0ZXIuZmVhdHVyZWQgPSB2YWx1ZS50b0xvd2VyQ2FzZSgpID09PSAndHJ1ZSc7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAndmlzaWJpbGl0eSc6XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB2aXNpYmlsaXR5VmFsdWUgPSB2YWx1ZS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKFsncHVibGljJywgJ21lbWJlcnMnLCAncGFpZCddLmluY2x1ZGVzKHZpc2liaWxpdHlWYWx1ZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmcm9udE1hdHRlci52aXNpYmlsaXR5ID0gdmlzaWJpbGl0eVZhbHVlIGFzICdwdWJsaWMnIHwgJ21lbWJlcnMnIHwgJ3BhaWQnO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ3RhZ3MnOlxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gRm9yIHRhZ3MsIHdlIG5lZWQgdG8gaGFuZGxlIHRoZSBsaXN0IGZvcm1hdFxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdGFnTGlzdDogc3RyaW5nW10gPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gSWYgaW5saW5lIGZvcm1hdDogdGFnczogdGFnMSwgdGFnMlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUuc3BsaXQoJywnKS5mb3JFYWNoKHRhZyA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHRyaW1tZWRUYWcgPSB0YWcudHJpbSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHJpbW1lZFRhZykgdGFnTGlzdC5wdXNoKHRyaW1tZWRUYWcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIElmIGl0J3MgYSBsaXN0IGZvcm1hdDogbG9vayBmb3IgaW5kZW50ZWQgbGluZXMgd2l0aCBcIi0gXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBqID0gaSArIDE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKGogPCBsaW5lcy5sZW5ndGggJiYgbGluZXNbal0udHJpbSgpLnN0YXJ0c1dpdGgoJy0nKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0YWcgPSBsaW5lc1tqXS50cmltKCkuc3Vic3RyaW5nKDEpLnRyaW0oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRhZykgdGFnTGlzdC5wdXNoKHRhZyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGorKztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIGZyb250TWF0dGVyLnRhZ3MgPSB0YWdMaXN0O1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICByZXR1cm4geyBmcm9udE1hdHRlciwgbWFya2Rvd25Db250ZW50IH07XG4gICAgfVxuICAgIFxuICAgIGNvbnZlcnRPYnNpZGlhbkltYWdlTGlua3MoY29udGVudDogc3RyaW5nKTogc3RyaW5nIHtcbiAgICAgICAgLy8gUmVwbGFjZSBPYnNpZGlhbiBpbWFnZSBsaW5rcyAhW1tpbWFnZS5wbmddXSB3aXRoIHN0YW5kYXJkIG1hcmtkb3duICFbXShpbWFnZS5wbmcpXG4gICAgICAgIHJldHVybiBjb250ZW50LnJlcGxhY2UoLyFcXFtcXFsoLio/KVxcXVxcXS9nLCAnIVtdKCQxKScpO1xuICAgIH1cblxuICAgIGZvcm1hdElubGluZUNvZGUoY29udGVudDogc3RyaW5nKTogc3RyaW5nIHtcbiAgICAgICAgLy8gUHJlc2VydmUgaW5saW5lIGNvZGUgZm9ybWF0dGluZyB1c2luZyBiYWNrdGlja3NcbiAgICAgICAgLy8gVGhpcyBtYXRjaGVzIHNpbmdsZSBiYWNrdGljayBwYWlycyB0aGF0IGFyZW4ndCBwYXJ0IG9mIHRyaXBsZSBiYWNrdGljayBibG9ja3NcbiAgICAgICAgLy8gVGhlIG5lZ2F0aXZlIGxvb2tiZWhpbmQvbG9va2FoZWFkIGVuc3VyZXMgd2UgZG9uJ3QgbWF0Y2ggaW5zaWRlIGNvZGUgYmxvY2tzXG4gICAgICAgIHJldHVybiBjb250ZW50LnJlcGxhY2UoLyg/PCFgKWAoW15gXSspYCg/IWApL2csIChtYXRjaCwgY29kZSkgPT4ge1xuICAgICAgICAgICAgLy8gUmV0dXJuIHRoZSBjb2RlIHdpdGggYmFja3RpY2tzIHByZXNlcnZlZCAtIEdob3N0J3MgbGV4aWNhbCBmb3JtYXQgd2lsbCBoYW5kbGUgdGhpcyBjb3JyZWN0bHlcbiAgICAgICAgICAgIHJldHVybiBtYXRjaDtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIFxuICAgIGFzeW5jIHByb2Nlc3NJbWFnZUxpbmtzKGNvbnRlbnQ6IHN0cmluZywgdmlldzogTWFya2Rvd25WaWV3KTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICAgICAgY29uc3QgaW1hZ2VSZWdleCA9IC8hXFxbXFxbKC4qPylcXF1cXF0vZztcbiAgICAgICAgY29uc3QgaW1hZ2VQYXRoczogc3RyaW5nW10gPSBbXTtcbiAgICAgICAgbGV0IG1hdGNoO1xuICAgICAgICBcbiAgICAgICAgLy8gRmluZCBhbGwgaW1hZ2UgbGlua3MgaW4gdGhlIGNvbnRlbnRcbiAgICAgICAgd2hpbGUgKChtYXRjaCA9IGltYWdlUmVnZXguZXhlYyhjb250ZW50KSkgIT09IG51bGwpIHtcbiAgICAgICAgICAgIGltYWdlUGF0aHMucHVzaChtYXRjaFsxXSk7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGlmIChpbWFnZVBhdGhzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgLy8gTm8gaW1hZ2VzIHRvIHByb2Nlc3MsIHJldHVybiBvcmlnaW5hbCBjb250ZW50XG4gICAgICAgICAgICByZXR1cm4gY29udGVudDtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgLy8gUHJvY2VzcyBlYWNoIGltYWdlIGFuZCBnZXQgR2hvc3QgVVJMc1xuICAgICAgICBjb25zdCBpbWFnZU1hcCA9IG5ldyBNYXA8c3RyaW5nLCBzdHJpbmc+KCk7XG4gICAgICAgIFxuICAgICAgICBmb3IgKGNvbnN0IGltYWdlUGF0aCBvZiBpbWFnZVBhdGhzKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGdob3N0VXJsID0gYXdhaXQgdGhpcy51cGxvYWRJbWFnZVRvR2hvc3QoaW1hZ2VQYXRoLCB2aWV3KTtcbiAgICAgICAgICAgICAgICBpZiAoZ2hvc3RVcmwpIHtcbiAgICAgICAgICAgICAgICAgICAgaW1hZ2VNYXAuc2V0KGltYWdlUGF0aCwgZ2hvc3RVcmwpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgbmV3IE5vdGljZShgRmFpbGVkIHRvIHVwbG9hZCBpbWFnZSAke2ltYWdlUGF0aH06ICR7ZXJyb3J9YCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIC8vIFJlcGxhY2UgaW1hZ2UgbGlua3Mgd2l0aCBHaG9zdCBVUkxzXG4gICAgICAgIGxldCBwcm9jZXNzZWRDb250ZW50ID0gY29udGVudDtcbiAgICAgICAgZm9yIChjb25zdCBbaW1hZ2VQYXRoLCBnaG9zdFVybF0gb2YgaW1hZ2VNYXAuZW50cmllcygpKSB7XG4gICAgICAgICAgICBjb25zdCByZWdleCA9IG5ldyBSZWdFeHAoYCFcXFxcW1xcXFxbJHt0aGlzLmVzY2FwZVJlZ0V4cChpbWFnZVBhdGgpfVxcXFxdXFxcXF1gLCAnZycpO1xuICAgICAgICAgICAgcHJvY2Vzc2VkQ29udGVudCA9IHByb2Nlc3NlZENvbnRlbnQucmVwbGFjZShyZWdleCwgYCFbXSgke2dob3N0VXJsfSlgKTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgLy8gRm9ybWF0IGlubGluZSBjb2RlXG4gICAgICAgIHByb2Nlc3NlZENvbnRlbnQgPSB0aGlzLmZvcm1hdElubGluZUNvZGUocHJvY2Vzc2VkQ29udGVudCk7XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gcHJvY2Vzc2VkQ29udGVudDtcbiAgICB9XG4gICAgXG4gICAgZXNjYXBlUmVnRXhwKHN0cmluZzogc3RyaW5nKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKC9bLiorP14ke30oKXxbXFxdXFxcXF0vZywgJ1xcXFwkJicpO1xuICAgIH1cbiAgICBcbiAgICBhc3luYyB1cGxvYWRJbWFnZVRvR2hvc3QoaW1hZ2VQYXRoOiBzdHJpbmcsIHZpZXc6IE1hcmtkb3duVmlldyk6IFByb21pc2U8c3RyaW5nIHwgbnVsbD4ge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gR2V0IHRoZSBmaWxlIGZyb20gdGhlIHZhdWx0XG4gICAgICAgICAgICBjb25zdCBmaWxlID0gdGhpcy5hcHAudmF1bHQuZ2V0QWJzdHJhY3RGaWxlQnlQYXRoKFxuICAgICAgICAgICAgICAgIC8vIElmIHBhdGggaXMgcmVsYXRpdmUsIHJlc29sdmUgaXQgcmVsYXRpdmUgdG8gdGhlIGN1cnJlbnQgbm90ZVxuICAgICAgICAgICAgICAgIHRoaXMucmVzb2x2ZUltYWdlUGF0aChpbWFnZVBhdGgsIHZpZXcpXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAoIWZpbGUgfHwgIShmaWxlIGluc3RhbmNlb2YgVEZpbGUpKSB7XG4gICAgICAgICAgICAgICAgbmV3IE5vdGljZShgSW1hZ2Ugbm90IGZvdW5kOiAke2ltYWdlUGF0aH1gKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gUmVhZCB0aGUgZmlsZSBhcyBBcnJheUJ1ZmZlclxuICAgICAgICAgICAgY29uc3QgZmlsZURhdGEgPSBhd2FpdCB0aGlzLmFwcC52YXVsdC5yZWFkQmluYXJ5KGZpbGUpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBVcGxvYWQgdG8gR2hvc3RcbiAgICAgICAgICAgIGNvbnN0IHVwbG9hZFVybCA9IGF3YWl0IHRoaXMudXBsb2FkRmlsZVRvR2hvc3QoZmlsZS5uYW1lLCBmaWxlRGF0YSk7XG4gICAgICAgICAgICBpZiAodXBsb2FkVXJsKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHVwbG9hZFVybDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgbmV3IE5vdGljZSgnRmFpbGVkIHRvIHVwbG9hZCBpbWFnZScpO1xuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgbmV3IE5vdGljZShgRXJyb3IgdXBsb2FkaW5nIGltYWdlICR7aW1hZ2VQYXRofTogJHtlcnJvcn1gKTtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgfVxuICAgIFxuICAgIHJlc29sdmVJbWFnZVBhdGgoaW1hZ2VQYXRoOiBzdHJpbmcsIHZpZXc6IE1hcmtkb3duVmlldyk6IHN0cmluZyB7XG4gICAgICAgIC8vIEZpcnN0IHRyeSBhYnNvbHV0ZSBwYXRoXG4gICAgICAgIGlmIChpbWFnZVBhdGguc3RhcnRzV2l0aChcIi9cIikpIHtcbiAgICAgICAgICAgIHJldHVybiBpbWFnZVBhdGg7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIC8vIFRyeSByZWxhdGl2ZSB0byBjdXJyZW50IG5vdGVcbiAgICAgICAgY29uc3QgY3VycmVudE5vdGVQYXRoID0gdmlldy5maWxlPy5wYXJlbnQ/LnBhdGggfHwgXCJcIjtcbiAgICAgICAgY29uc3QgcmVsYXRpdmVUb05vdGUgPSBgJHtjdXJyZW50Tm90ZVBhdGh9LyR7aW1hZ2VQYXRofWA7XG4gICAgICAgIFxuICAgICAgICAvLyBDaGVjayBpZiBmaWxlIGV4aXN0cyByZWxhdGl2ZSB0byBub3RlXG4gICAgICAgIGlmICh0aGlzLmFwcC52YXVsdC5nZXRBYnN0cmFjdEZpbGVCeVBhdGgocmVsYXRpdmVUb05vdGUpKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVsYXRpdmVUb05vdGU7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIC8vIElmIG5vdCBmb3VuZCwgdHJ5IHRoZSBjb25maWd1cmVkIGltYWdlcyBkaXJlY3RvcnlcbiAgICAgICAgcmV0dXJuIGAke3RoaXMuc2V0dGluZ3MuaW1hZ2VzRGlyZWN0b3J5fS8ke2ltYWdlUGF0aH1gO1xuICAgIH1cbiAgICBcbiAgICBhc3luYyB1cGxvYWRGaWxlVG9HaG9zdChmaWxlTmFtZTogc3RyaW5nLCBmaWxlRGF0YTogQXJyYXlCdWZmZXIpOiBQcm9taXNlPHN0cmluZyB8IG51bGw+IHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IHsgZ2hvc3RVcmwsIGFwaUtleSB9ID0gdGhpcy5zZXR0aW5ncztcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYgKCFnaG9zdFVybCB8fCAhYXBpS2V5KSB7XG4gICAgICAgICAgICAgICAgbmV3IE5vdGljZSgnR2hvc3QgVVJMIGFuZCBBUEkgS2V5IGFyZSByZXF1aXJlZCcpO1xuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBDbGVhbiB1cCB0aGUgVVJMXG4gICAgICAgICAgICBjb25zdCBiYXNlVXJsID0gZ2hvc3RVcmwudHJpbSgpLnJlcGxhY2UoL1xcLyQvLCAnJyk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIEV4dHJhY3QgQVBJIGNyZWRlbnRpYWxzXG4gICAgICAgICAgICBjb25zdCBbaWQsIHNlY3JldF0gPSBhcGlLZXkuc3BsaXQoJzonKTtcbiAgICAgICAgICAgIGlmICghaWQgfHwgIXNlY3JldCkge1xuICAgICAgICAgICAgICAgIG5ldyBOb3RpY2UoJ0ludmFsaWQgQVBJIGtleSBmb3JtYXQnKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gQ29uc3RydWN0IHRoZSBBUEkgVVJMIGZvciB1cGxvYWRpbmcgaW1hZ2VzXG4gICAgICAgICAgICBjb25zdCBhcGlVcmwgPSBgJHtiYXNlVXJsfS9naG9zdC9hcGkvYWRtaW4vaW1hZ2VzL3VwbG9hZC9gO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBDcmVhdGUgRm9ybURhdGEgd2l0aCB0aGUgZmlsZVxuICAgICAgICAgICAgLy8gQ2FuJ3QgdXNlIHJlZ3VsYXIgRm9ybURhdGEgaW4gT2JzaWRpYW4sIHNvIHdlIG5lZWQgdG8gdXNlIGEgY3VzdG9tIGJvdW5kYXJ5XG4gICAgICAgICAgICBjb25zdCBib3VuZGFyeSA9ICctLS0tV2ViS2l0Rm9ybUJvdW5kYXJ5JyArIE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMTYpLnN1YnN0cmluZygyKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgY29uc3QgZmlsZUhlYWRlciA9IFxuICAgICAgICAgICAgICAgIGAtLSR7Ym91bmRhcnl9XFxyXFxuYCArXG4gICAgICAgICAgICAgICAgYENvbnRlbnQtRGlzcG9zaXRpb246IGZvcm0tZGF0YTsgbmFtZT1cImZpbGVcIjsgZmlsZW5hbWU9XCIke2ZpbGVOYW1lfVwiXFxyXFxuYCArXG4gICAgICAgICAgICAgICAgYENvbnRlbnQtVHlwZTogJHt0aGlzLmdldE1pbWVUeXBlKGZpbGVOYW1lKX1cXHJcXG5cXHJcXG5gO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBjb25zdCBmaWxlRm9vdGVyID0gYFxcclxcbi0tJHtib3VuZGFyeX0tLVxcclxcbmA7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIENyZWF0ZSBidWZmZXIgd2l0aCBmaWxlIGRhdGFcbiAgICAgICAgICAgIGNvbnN0IGhlYWRlckJ1ZmZlciA9IG5ldyBUZXh0RW5jb2RlcigpLmVuY29kZShmaWxlSGVhZGVyKTtcbiAgICAgICAgICAgIGNvbnN0IGZvb3RlckJ1ZmZlciA9IG5ldyBUZXh0RW5jb2RlcigpLmVuY29kZShmaWxlRm9vdGVyKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gQ29tYmluZSBidWZmZXJzXG4gICAgICAgICAgICBjb25zdCBjb21iaW5lZEJ1ZmZlciA9IG5ldyBVaW50OEFycmF5KFxuICAgICAgICAgICAgICAgIGhlYWRlckJ1ZmZlci5ieXRlTGVuZ3RoICsgZmlsZURhdGEuYnl0ZUxlbmd0aCArIGZvb3RlckJ1ZmZlci5ieXRlTGVuZ3RoXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgY29tYmluZWRCdWZmZXIuc2V0KG5ldyBVaW50OEFycmF5KGhlYWRlckJ1ZmZlciksIDApO1xuICAgICAgICAgICAgY29tYmluZWRCdWZmZXIuc2V0KG5ldyBVaW50OEFycmF5KGZpbGVEYXRhKSwgaGVhZGVyQnVmZmVyLmJ5dGVMZW5ndGgpO1xuICAgICAgICAgICAgY29tYmluZWRCdWZmZXIuc2V0KG5ldyBVaW50OEFycmF5KGZvb3RlckJ1ZmZlciksIGhlYWRlckJ1ZmZlci5ieXRlTGVuZ3RoICsgZmlsZURhdGEuYnl0ZUxlbmd0aCk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIEdlbmVyYXRlIEpXVCB0b2tlbiBmb3IgR2hvc3QgQWRtaW4gQVBJXG4gICAgICAgICAgICBjb25zdCBhdXRoVG9rZW4gPSB0aGlzLmdlbmVyYXRlR2hvc3RBZG1pblRva2VuKGlkLCBzZWNyZXQpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIC8vIFVzaW5nIE9ic2lkaWFuJ3MgcmVxdWVzdFVybCBmb3IgdXBsb2FkXG4gICAgICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCByZXF1ZXN0VXJsKHtcbiAgICAgICAgICAgICAgICAgICAgdXJsOiBhcGlVcmwsXG4gICAgICAgICAgICAgICAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgICAgICAgICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAnQ29udGVudC1UeXBlJzogYG11bHRpcGFydC9mb3JtLWRhdGE7IGJvdW5kYXJ5PSR7Ym91bmRhcnl9YCxcbiAgICAgICAgICAgICAgICAgICAgICAgICdBdXRob3JpemF0aW9uJzogYXV0aFRva2VuXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGJvZHk6IGNvbWJpbmVkQnVmZmVyLFxuICAgICAgICAgICAgICAgICAgICB0aHJvdzogdHJ1ZVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZS5zdGF0dXMgPj0gMjAwICYmIHJlc3BvbnNlLnN0YXR1cyA8IDMwMCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzcG9uc2UuanNvbj8uaW1hZ2VzPy5bMF0/LnVybCB8fCBudWxsO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgLy8gVHJ5IHdpdGggTm9kZS5qcyBhcyBmYWxsYmFja1xuICAgICAgICAgICAgICAgIHJldHVybiBhd2FpdCB0aGlzLnVwbG9hZEZpbGVXaXRoTm9kZShhcGlVcmwsIGlkLCBzZWNyZXQsIGZpbGVOYW1lLCBmaWxlRGF0YSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBuZXcgTm90aWNlKGBFcnJvciB1cGxvYWRpbmcgaW1hZ2UgJHtmaWxlTmFtZX06ICR7ZXJyb3J9YCk7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgIH1cbiAgICBcbiAgICBhc3luYyB1cGxvYWRGaWxlV2l0aE5vZGUodXJsOiBzdHJpbmcsIGlkOiBzdHJpbmcsIHNlY3JldDogc3RyaW5nLCBmaWxlTmFtZTogc3RyaW5nLCBmaWxlRGF0YTogQXJyYXlCdWZmZXIpOiBQcm9taXNlPHN0cmluZyB8IG51bGw+IHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIC8vIFRyeSB0byBhY2Nlc3MgTm9kZS5qcyBtb2R1bGVzIGluIEVsZWN0cm9uIGNvbnRleHRcbiAgICAgICAgICAgICAgICAvLyBAdHMtaWdub3JlIC0gQWNjZXNzaW5nIGdsb2JhbCB3aW5kb3cgb2JqZWN0XG4gICAgICAgICAgICAgICAgY29uc3Qgbm9kZVJlcXVpcmUgPSB3aW5kb3cucmVxdWlyZTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBpZiAoIW5vZGVSZXF1aXJlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUobnVsbCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgY29uc3QgaHR0cHMgPSBub2RlUmVxdWlyZSgnaHR0cHMnKTtcbiAgICAgICAgICAgICAgICBjb25zdCBjcnlwdG8gPSBub2RlUmVxdWlyZSgnY3J5cHRvJyk7XG4gICAgICAgICAgICAgICAgY29uc3QgdXJsT2JqID0gbmV3IFVSTCh1cmwpO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIC8vIENyZWF0ZSBib3VuZGFyeSBmb3IgbXVsdGlwYXJ0L2Zvcm0tZGF0YVxuICAgICAgICAgICAgICAgIGNvbnN0IGJvdW5kYXJ5ID0gJy0tLS1Ob2RlSlNGb3JtQm91bmRhcnknICsgTWF0aC5yYW5kb20oKS50b1N0cmluZygxNikuc3Vic3RyaW5nKDIpO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIC8vIENyZWF0ZSBKV1QgdG9rZW4gdXNpbmcgTm9kZS5qcyBjcnlwdG9cbiAgICAgICAgICAgICAgICBjb25zdCBub3cgPSBNYXRoLmZsb29yKERhdGUubm93KCkgLyAxMDAwKTtcbiAgICAgICAgICAgICAgICBjb25zdCBmaXZlTWludXRlc0Zyb21Ob3cgPSBub3cgKyA1ICogNjA7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgLy8gQ3JlYXRlIEpXVCBoZWFkZXIgYW5kIHBheWxvYWRcbiAgICAgICAgICAgICAgICBjb25zdCBoZWFkZXIgPSB7XG4gICAgICAgICAgICAgICAgICAgIGFsZzogJ0hTMjU2JyxcbiAgICAgICAgICAgICAgICAgICAgdHlwOiAnSldUJyxcbiAgICAgICAgICAgICAgICAgICAga2lkOiBpZCAvLyBLZXkgSURcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGNvbnN0IHBheWxvYWQgPSB7XG4gICAgICAgICAgICAgICAgICAgIGlhdDogbm93LCAgICAgICAgICAgICAgICAgIC8vIElzc3VlZCBhdCB0aW1lXG4gICAgICAgICAgICAgICAgICAgIGV4cDogZml2ZU1pbnV0ZXNGcm9tTm93LCAgIC8vIEV4cGlyYXRpb24gdGltZVxuICAgICAgICAgICAgICAgICAgICBhdWQ6ICcvdjUvYWRtaW4vJyAgICAgICAgICAvLyBBdWRpZW5jZVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgLy8gQmFzZTY0IGVuY29kZSB0aGUgaGVhZGVyIGFuZCBwYXlsb2FkXG4gICAgICAgICAgICAgICAgY29uc3QgZW5jb2RlQmFzZTY0ID0gKG9iajogYW55KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHN0ciA9IEpTT04uc3RyaW5naWZ5KG9iaik7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjcnlwdG8uY3JlYXRlSGFzaCgnc2hhMjU2JylcbiAgICAgICAgICAgICAgICAgICAgICAgIC51cGRhdGUoc3RyKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmRpZ2VzdCgnYmFzZTY0JylcbiAgICAgICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9cXCsvZywgJy0nKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoL1xcLy9nLCAnXycpXG4gICAgICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgvPSskL2csICcnKTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGNvbnN0IGhlYWRlckJhc2U2NCA9IEJ1ZmZlci5mcm9tKEpTT04uc3RyaW5naWZ5KGhlYWRlcikpLnRvU3RyaW5nKCdiYXNlNjQnKVxuICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgvXFwrL2csICctJylcbiAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoL1xcLy9nLCAnXycpXG4gICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKC89KyQvZywgJycpO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGNvbnN0IHBheWxvYWRCYXNlNjQgPSBCdWZmZXIuZnJvbShKU09OLnN0cmluZ2lmeShwYXlsb2FkKSkudG9TdHJpbmcoJ2Jhc2U2NCcpXG4gICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9cXCsvZywgJy0nKVxuICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgvXFwvL2csICdfJylcbiAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoLz0rJC9nLCAnJyk7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgLy8gQ3JlYXRlIHRoZSBzaWduYXR1cmVcbiAgICAgICAgICAgICAgICBjb25zdCBzaWduYXR1cmVJbnB1dCA9IGAke2hlYWRlckJhc2U2NH0uJHtwYXlsb2FkQmFzZTY0fWA7XG4gICAgICAgICAgICAgICAgY29uc3Qgc2lnbmF0dXJlID0gY3J5cHRvLmNyZWF0ZUhtYWMoJ3NoYTI1NicsIEJ1ZmZlci5mcm9tKHNlY3JldCwgJ2hleCcpKVxuICAgICAgICAgICAgICAgICAgICAudXBkYXRlKHNpZ25hdHVyZUlucHV0KVxuICAgICAgICAgICAgICAgICAgICAuZGlnZXN0KCdiYXNlNjQnKVxuICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgvXFwrL2csICctJylcbiAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoL1xcLy9nLCAnXycpXG4gICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKC89KyQvZywgJycpO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIC8vIENyZWF0ZSB0aGUgY29tcGxldGUgSldUIHRva2VuXG4gICAgICAgICAgICAgICAgY29uc3QgdG9rZW4gPSBgJHtoZWFkZXJCYXNlNjR9LiR7cGF5bG9hZEJhc2U2NH0uJHtzaWduYXR1cmV9YDtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAvLyBDcmVhdGUgbXVsdGlwYXJ0IGZvcm0tZGF0YVxuICAgICAgICAgICAgICAgIGNvbnN0IGZpbGVIZWFkZXIgPSBcbiAgICAgICAgICAgICAgICAgICAgYC0tJHtib3VuZGFyeX1cXHJcXG5gICtcbiAgICAgICAgICAgICAgICAgICAgYENvbnRlbnQtRGlzcG9zaXRpb246IGZvcm0tZGF0YTsgbmFtZT1cImZpbGVcIjsgZmlsZW5hbWU9XCIke2ZpbGVOYW1lfVwiXFxyXFxuYCArXG4gICAgICAgICAgICAgICAgICAgIGBDb250ZW50LVR5cGU6ICR7dGhpcy5nZXRNaW1lVHlwZShmaWxlTmFtZSl9XFxyXFxuXFxyXFxuYDtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBjb25zdCBmaWxlRm9vdGVyID0gYFxcclxcbi0tJHtib3VuZGFyeX0tLVxcclxcbmA7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgLy8gQ3JlYXRlIGJ1ZmZlciB3aXRoIGZpbGUgZGF0YVxuICAgICAgICAgICAgICAgIGNvbnN0IGhlYWRlckJ1ZmZlciA9IEJ1ZmZlci5mcm9tKGZpbGVIZWFkZXIpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGZvb3RlckJ1ZmZlciA9IEJ1ZmZlci5mcm9tKGZpbGVGb290ZXIpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGZpbGVCdWZmZXIgPSBCdWZmZXIuZnJvbShmaWxlRGF0YSk7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgLy8gQ29tYmluZSBidWZmZXJzXG4gICAgICAgICAgICAgICAgY29uc3QgZGF0YUJ1ZmZlciA9IEJ1ZmZlci5jb25jYXQoW1xuICAgICAgICAgICAgICAgICAgICBoZWFkZXJCdWZmZXIsXG4gICAgICAgICAgICAgICAgICAgIGZpbGVCdWZmZXIsXG4gICAgICAgICAgICAgICAgICAgIGZvb3RlckJ1ZmZlclxuICAgICAgICAgICAgICAgIF0pO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgICAgICAgICAgICAgICAgIGhvc3RuYW1lOiB1cmxPYmouaG9zdG5hbWUsXG4gICAgICAgICAgICAgICAgICAgIHBhdGg6IHVybE9iai5wYXRobmFtZSArIHVybE9iai5zZWFyY2gsXG4gICAgICAgICAgICAgICAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgICAgICAgICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAnQ29udGVudC1UeXBlJzogYG11bHRpcGFydC9mb3JtLWRhdGE7IGJvdW5kYXJ5PSR7Ym91bmRhcnl9YCxcbiAgICAgICAgICAgICAgICAgICAgICAgICdDb250ZW50LUxlbmd0aCc6IGRhdGFCdWZmZXIubGVuZ3RoLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ0F1dGhvcml6YXRpb24nOiBgR2hvc3QgJHt0b2tlbn1gXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGNvbnN0IHJlcSA9IGh0dHBzLnJlcXVlc3Qob3B0aW9ucywgKHJlczogYW55KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBkYXRhID0gJyc7XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICByZXMub24oJ2RhdGEnLCAoY2h1bms6IHN0cmluZykgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YSArPSBjaHVuaztcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICByZXMub24oJ2VuZCcsICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXMuc3RhdHVzQ29kZSA+PSAyMDAgJiYgcmVzLnN0YXR1c0NvZGUgPCAzMDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBqc29uRGF0YSA9IEpTT04ucGFyc2UoZGF0YSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoanNvbkRhdGE/LmltYWdlcz8uWzBdPy51cmwgfHwgbnVsbCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKG51bGwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShudWxsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgcmVxLm9uKCdlcnJvcicsIChlcnJvcjogRXJyb3IpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShudWxsKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAvLyBXcml0ZSBkYXRhIGFuZCBlbmQgcmVxdWVzdFxuICAgICAgICAgICAgICAgIHJlcS53cml0ZShkYXRhQnVmZmVyKTtcbiAgICAgICAgICAgICAgICByZXEuZW5kKCk7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgIHJlc29sdmUobnVsbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBcbiAgICBnZXRNaW1lVHlwZShmaWxlTmFtZTogc3RyaW5nKTogc3RyaW5nIHtcbiAgICAgICAgY29uc3QgZXh0ZW5zaW9uID0gZmlsZU5hbWUuc3BsaXQoJy4nKS5wb3AoKT8udG9Mb3dlckNhc2UoKTtcbiAgICAgICAgY29uc3QgbWltZVR5cGVzOiB7W2tleTogc3RyaW5nXTogc3RyaW5nfSA9IHtcbiAgICAgICAgICAgICdqcGcnOiAnaW1hZ2UvanBlZycsXG4gICAgICAgICAgICAnanBlZyc6ICdpbWFnZS9qcGVnJyxcbiAgICAgICAgICAgICdwbmcnOiAnaW1hZ2UvcG5nJyxcbiAgICAgICAgICAgICdnaWYnOiAnaW1hZ2UvZ2lmJyxcbiAgICAgICAgICAgICd3ZWJwJzogJ2ltYWdlL3dlYnAnLFxuICAgICAgICAgICAgJ3N2Zyc6ICdpbWFnZS9zdmcreG1sJyxcbiAgICAgICAgICAgICd0aWZmJzogJ2ltYWdlL3RpZmYnLFxuICAgICAgICAgICAgJ3RpZic6ICdpbWFnZS90aWZmJyxcbiAgICAgICAgICAgICdibXAnOiAnaW1hZ2UvYm1wJ1xuICAgICAgICB9O1xuICAgICAgICBcbiAgICAgICAgcmV0dXJuIG1pbWVUeXBlc1tleHRlbnNpb24gfHwgJyddIHx8ICdhcHBsaWNhdGlvbi9vY3RldC1zdHJlYW0nO1xuICAgIH1cbiAgICBcbiAgICBhc3luYyBwdWJsaXNoQ3VycmVudE5vdGUodmlldzogTWFya2Rvd25WaWV3KSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBHZXQgdGhlIGN1cnJlbnQgbm90ZSBjb250ZW50IGFuZCBtZXRhZGF0YVxuICAgICAgICAgICAgY29uc3QgZWRpdG9yID0gdmlldy5lZGl0b3I7XG4gICAgICAgICAgICBjb25zdCBjb250ZW50ID0gZWRpdG9yLmdldFZhbHVlKCk7XG4gICAgICAgICAgICBjb25zdCBmaWxlTmFtZSA9IHZpZXcuZmlsZT8uYmFzZW5hbWUgfHwgJ1VudGl0bGVkIE5vdGUnO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBQYXJzZSBmcm9udG1hdHRlclxuICAgICAgICAgICAgY29uc3QgeyBmcm9udE1hdHRlciwgbWFya2Rvd25Db250ZW50IH0gPSB0aGlzLnBhcnNlRnJvbnRNYXR0ZXIoY29udGVudCk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIFByb2Nlc3MgYW5kIHVwbG9hZCBpbWFnZXNcbiAgICAgICAgICAgIGNvbnN0IHByb2Nlc3NlZENvbnRlbnQgPSBhd2FpdCB0aGlzLnByb2Nlc3NJbWFnZUxpbmtzKG1hcmtkb3duQ29udGVudCwgdmlldyk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIFVzZSBmcm9udG1hdHRlciB0aXRsZSBpZiBhdmFpbGFibGUsIG90aGVyd2lzZSB1c2UgZmlsZW5hbWVcbiAgICAgICAgICAgIGNvbnN0IHRpdGxlID0gZnJvbnRNYXR0ZXIudGl0bGUgfHwgZmlsZU5hbWU7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIENyZWF0ZSBpbml0aWFsIG9wdGlvbnMgZnJvbSBmcm9udG1hdHRlciBvciBkZWZhdWx0c1xuICAgICAgICAgICAgY29uc3QgaW5pdGlhbE9wdGlvbnM6IFB1Ymxpc2hPcHRpb25zID0ge1xuICAgICAgICAgICAgICAgIHN0YXR1czogZnJvbnRNYXR0ZXIuc3RhdHVzIHx8ICdkcmFmdCcsXG4gICAgICAgICAgICAgICAgdGFnczogZnJvbnRNYXR0ZXIudGFncyB8fCBbXSxcbiAgICAgICAgICAgICAgICBmZWF0dXJlZDogZnJvbnRNYXR0ZXIuZmVhdHVyZWQgfHwgZmFsc2UsXG4gICAgICAgICAgICAgICAgdmlzaWJpbGl0eTogZnJvbnRNYXR0ZXIudmlzaWJpbGl0eSB8fCAncHVibGljJyxcbiAgICAgICAgICAgICAgICBzY2hlZHVsZWRUaW1lOiBmcm9udE1hdHRlci50aW1lID8gbmV3IERhdGUoZnJvbnRNYXR0ZXIudGltZSkgOiBuZXcgRGF0ZSgpXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBTaG93IHRoZSBwcmV2aWV3IG1vZGFsXG4gICAgICAgICAgICBuZXcgUHVibGlzaFByZXZpZXdNb2RhbChcbiAgICAgICAgICAgICAgICB0aGlzLmFwcCxcbiAgICAgICAgICAgICAgICB0aXRsZSxcbiAgICAgICAgICAgICAgICBwcm9jZXNzZWRDb250ZW50LFxuICAgICAgICAgICAgICAgIGluaXRpYWxPcHRpb25zLFxuICAgICAgICAgICAgICAgIGFzeW5jIChvcHRpb25zOiBQdWJsaXNoT3B0aW9ucykgPT4ge1xuICAgICAgICAgICAgICAgICAgICAvLyBDYWxsIHRoZSBwdWJsaXNoIGZ1bmN0aW9uIHdpdGggdGhlIHNlbGVjdGVkIG9wdGlvbnNcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdGhpcy5wdWJsaXNoVG9HaG9zdChcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlLFxuICAgICAgICAgICAgICAgICAgICAgICAgcHJvY2Vzc2VkQ29udGVudCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuLi5mcm9udE1hdHRlcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0dXM6IG9wdGlvbnMuc3RhdHVzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhZ3M6IG9wdGlvbnMudGFncyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmZWF0dXJlZDogb3B0aW9ucy5mZWF0dXJlZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2aXNpYmlsaXR5OiBvcHRpb25zLnZpc2liaWxpdHksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGltZTogb3B0aW9ucy5zY2hlZHVsZWRUaW1lID8gb3B0aW9ucy5zY2hlZHVsZWRUaW1lLnRvSVNPU3RyaW5nKCkgOiB1bmRlZmluZWRcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIC8vIFNob3cgc3VjY2VzcyBvciBlcnJvciBtZXNzYWdlXG4gICAgICAgICAgICAgICAgICAgIGlmIChyZXN1bHQuc3VjY2Vzcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgbmV3IE5vdGljZShgU3VjY2Vzc2Z1bGx5IHB1Ymxpc2hlZCBcIiR7dGl0bGV9XCIgYXMgJHtvcHRpb25zLnN0YXR1c31gKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBOb3RpY2UoYEZhaWxlZCB0byBwdWJsaXNoOiAke3Jlc3VsdC5lcnJvcn1gKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICkub3BlbigpO1xuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgbmV3IE5vdGljZShgRXJyb3IgcHVibGlzaGluZyBub3RlOiAke2Vycm9yfWApO1xuICAgICAgICB9XG4gICAgfVxuICAgIFxuICAgIC8vIEhlbHBlciBmdW5jdGlvbiB0byBnZW5lcmF0ZSBhIHByb3BlciBHaG9zdCBBZG1pbiBBUEkgdG9rZW5cbiAgICBnZW5lcmF0ZUdob3N0QWRtaW5Ub2tlbihpZDogc3RyaW5nLCBzZWNyZXQ6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlIC0gV2UgbmVlZCB0byB1c2UgdGhlIGNyeXB0byBsaWJyYXJ5XG4gICAgICAgICAgICBjb25zdCBjcnlwdG8gPSB3aW5kb3cucmVxdWlyZSA/IHdpbmRvdy5yZXF1aXJlKCdjcnlwdG8nKSA6IG51bGw7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmICghY3J5cHRvKSB7XG4gICAgICAgICAgICAgICAgLy8gRmFsbCBiYWNrIHRvIHRoZSBiYXNpYyB0b2tlbiBmb3JtYXQgd2hlbiBjcnlwdG8gaXNuJ3QgYXZhaWxhYmxlXG4gICAgICAgICAgICAgICAgcmV0dXJuIGBHaG9zdCAke2lkfToke3NlY3JldH1gO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBDcmVhdGUgYSBKV1QgdG9rZW4gYXMgcGVyIEdob3N0IEFQSSBkb2NzXG4gICAgICAgICAgICAvLyBSZWZlcmVuY2U6IGh0dHBzOi8vZ2hvc3Qub3JnL2RvY3MvYWRtaW4tYXBpLyNhdXRoZW50aWNhdGlvblxuICAgICAgICAgICAgXG4gICAgICAgICAgICBjb25zdCBub3cgPSBNYXRoLmZsb29yKERhdGUubm93KCkgLyAxMDAwKTtcbiAgICAgICAgICAgIGNvbnN0IGZpdmVNaW51dGVzRnJvbU5vdyA9IG5vdyArIDUgKiA2MDtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gQ3JlYXRlIEpXVCBoZWFkZXIgKGFsZ29yaXRobSAmIHRva2VuIHR5cGUpXG4gICAgICAgICAgICBjb25zdCBoZWFkZXIgPSB7XG4gICAgICAgICAgICAgICAgYWxnOiAnSFMyNTYnLFxuICAgICAgICAgICAgICAgIHR5cDogJ0pXVCcsXG4gICAgICAgICAgICAgICAga2lkOiBpZCAvLyBLZXkgSURcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIENyZWF0ZSBKV1QgcGF5bG9hZCB3aXRoIGNsYWltc1xuICAgICAgICAgICAgY29uc3QgcGF5bG9hZCA9IHtcbiAgICAgICAgICAgICAgICBpYXQ6IG5vdywgICAgICAgICAgICAgICAgICAvLyBJc3N1ZWQgYXQgdGltZVxuICAgICAgICAgICAgICAgIGV4cDogZml2ZU1pbnV0ZXNGcm9tTm93LCAgIC8vIEV4cGlyYXRpb24gdGltZVxuICAgICAgICAgICAgICAgIGF1ZDogJy92NS9hZG1pbi8nICAgICAgICAgIC8vIEF1ZGllbmNlXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBCYXNlNjQgZW5jb2RlIHRoZSBoZWFkZXIgYW5kIHBheWxvYWRcbiAgICAgICAgICAgIGNvbnN0IGVuY29kZUJhc2U2NCA9IChvYmo6IGFueSkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHN0ciA9IEpTT04uc3RyaW5naWZ5KG9iaik7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNyeXB0by5jcmVhdGVIYXNoKCdzaGEyNTYnKVxuICAgICAgICAgICAgICAgICAgICAudXBkYXRlKHN0cilcbiAgICAgICAgICAgICAgICAgICAgLmRpZ2VzdCgnYmFzZTY0JylcbiAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoL1xcKy9nLCAnLScpXG4gICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9cXC8vZywgJ18nKVxuICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgvPSskL2csICcnKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGNvbnN0IGhlYWRlckJhc2U2NCA9IEJ1ZmZlci5mcm9tKEpTT04uc3RyaW5naWZ5KGhlYWRlcikpLnRvU3RyaW5nKCdiYXNlNjQnKVxuICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9cXCsvZywgJy0nKVxuICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9cXC8vZywgJ18nKVxuICAgICAgICAgICAgICAgIC5yZXBsYWNlKC89KyQvZywgJycpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBjb25zdCBwYXlsb2FkQmFzZTY0ID0gQnVmZmVyLmZyb20oSlNPTi5zdHJpbmdpZnkocGF5bG9hZCkpLnRvU3RyaW5nKCdiYXNlNjQnKVxuICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9cXCsvZywgJy0nKVxuICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9cXC8vZywgJ18nKVxuICAgICAgICAgICAgICAgIC5yZXBsYWNlKC89KyQvZywgJycpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBDcmVhdGUgdGhlIHNpZ25hdHVyZVxuICAgICAgICAgICAgY29uc3Qgc2lnbmF0dXJlSW5wdXQgPSBgJHtoZWFkZXJCYXNlNjR9LiR7cGF5bG9hZEJhc2U2NH1gO1xuICAgICAgICAgICAgY29uc3Qgc2lnbmF0dXJlID0gY3J5cHRvLmNyZWF0ZUhtYWMoJ3NoYTI1NicsIEJ1ZmZlci5mcm9tKHNlY3JldCwgJ2hleCcpKVxuICAgICAgICAgICAgICAgIC51cGRhdGUoc2lnbmF0dXJlSW5wdXQpXG4gICAgICAgICAgICAgICAgLmRpZ2VzdCgnYmFzZTY0JylcbiAgICAgICAgICAgICAgICAucmVwbGFjZSgvXFwrL2csICctJylcbiAgICAgICAgICAgICAgICAucmVwbGFjZSgvXFwvL2csICdfJylcbiAgICAgICAgICAgICAgICAucmVwbGFjZSgvPSskL2csICcnKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gQ3JlYXRlIHRoZSBjb21wbGV0ZSBKV1QgdG9rZW5cbiAgICAgICAgICAgIGNvbnN0IHRva2VuID0gYCR7aGVhZGVyQmFzZTY0fS4ke3BheWxvYWRCYXNlNjR9LiR7c2lnbmF0dXJlfWA7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHJldHVybiBgR2hvc3QgJHt0b2tlbn1gO1xuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgLy8gRmFsbCBiYWNrIHRvIHNpbXBsZSBmb3JtYXQgaW4gY2FzZSBvZiBlcnJvclxuICAgICAgICAgICAgcmV0dXJuIGBHaG9zdCAke2lkfToke3NlY3JldH1gO1xuICAgICAgICB9XG4gICAgfVxuICAgIFxuICAgIHBhcnNlTWFya2Rvd25Ub01vYmlsZWRvYyhjb250ZW50OiBzdHJpbmcpOiBhbnkge1xuICAgICAgICBpbnRlcmZhY2UgTGV4aWNhbE5vZGUge1xuICAgICAgICAgICAgdHlwZTogc3RyaW5nO1xuICAgICAgICAgICAgY2hpbGRyZW4/OiBMZXhpY2FsTm9kZVtdO1xuICAgICAgICAgICAgZm9ybWF0PzogbnVtYmVyO1xuICAgICAgICAgICAgc3R5bGU/OiBzdHJpbmc7XG4gICAgICAgICAgICB0ZXh0Pzogc3RyaW5nO1xuICAgICAgICAgICAgZGV0YWlsPzogbnVtYmVyO1xuICAgICAgICAgICAgbW9kZT86IHN0cmluZztcbiAgICAgICAgICAgIGRpcmVjdGlvbj86IHN0cmluZztcbiAgICAgICAgICAgIGluZGVudD86IG51bWJlcjtcbiAgICAgICAgICAgIHZlcnNpb24/OiBudW1iZXI7XG4gICAgICAgICAgICBba2V5OiBzdHJpbmddOiBhbnk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBIZWxwZXIgZnVuY3Rpb24gdG8gY3JlYXRlIGEgdGV4dCBub2RlXG4gICAgICAgIGNvbnN0IGNyZWF0ZVRleHROb2RlID0gKHRleHQ6IHN0cmluZywgZm9ybWF0OiBudW1iZXIgPSAwKTogTGV4aWNhbE5vZGUgPT4gKHtcbiAgICAgICAgICAgIHR5cGU6IFwidGV4dFwiLFxuICAgICAgICAgICAgdGV4dCxcbiAgICAgICAgICAgIGRldGFpbDogMCxcbiAgICAgICAgICAgIGZvcm1hdCxcbiAgICAgICAgICAgIG1vZGU6IFwibm9ybWFsXCIsXG4gICAgICAgICAgICBzdHlsZTogXCJcIixcbiAgICAgICAgICAgIHZlcnNpb246IDFcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gSGVscGVyIGZ1bmN0aW9uIHRvIGNyZWF0ZSBhIHBhcmFncmFwaCBub2RlXG4gICAgICAgIGNvbnN0IGNyZWF0ZVBhcmFncmFwaE5vZGUgPSAoY2hpbGRyZW46IExleGljYWxOb2RlW10pOiBMZXhpY2FsTm9kZSA9PiAoe1xuICAgICAgICAgICAgdHlwZTogXCJwYXJhZ3JhcGhcIixcbiAgICAgICAgICAgIGNoaWxkcmVuLFxuICAgICAgICAgICAgZGlyZWN0aW9uOiBcImx0clwiLFxuICAgICAgICAgICAgZm9ybWF0OiAwLFxuICAgICAgICAgICAgaW5kZW50OiAwLFxuICAgICAgICAgICAgdmVyc2lvbjogMVxuICAgICAgICB9KTtcblxuICAgICAgICAvLyBIZWxwZXIgZnVuY3Rpb24gdG8gY3JlYXRlIGEgbGlzdCBub2RlXG4gICAgICAgIGNvbnN0IGNyZWF0ZUxpc3ROb2RlID0gKGxpc3RJdGVtczogTGV4aWNhbE5vZGVbXSwgbGlzdFR5cGU6IFwiYnVsbGV0XCIgfCBcIm51bWJlclwiKTogTGV4aWNhbE5vZGUgPT4gKHtcbiAgICAgICAgICAgIHR5cGU6IFwibGlzdFwiLFxuICAgICAgICAgICAgbGlzdFR5cGUsXG4gICAgICAgICAgICBzdGFydDogMSxcbiAgICAgICAgICAgIGNoaWxkcmVuOiBsaXN0SXRlbXMsXG4gICAgICAgICAgICBkaXJlY3Rpb246IFwibHRyXCIsXG4gICAgICAgICAgICBmb3JtYXQ6IDAsXG4gICAgICAgICAgICBpbmRlbnQ6IDAsXG4gICAgICAgICAgICB2ZXJzaW9uOiAxXG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIEhlbHBlciBmdW5jdGlvbiB0byBjcmVhdGUgYSBsaXN0IGl0ZW0gbm9kZVxuICAgICAgICBjb25zdCBjcmVhdGVMaXN0SXRlbU5vZGUgPSAoY2hpbGRyZW46IExleGljYWxOb2RlW10pOiBMZXhpY2FsTm9kZSA9PiAoe1xuICAgICAgICAgICAgdHlwZTogXCJsaXN0aXRlbVwiLFxuICAgICAgICAgICAgY2hpbGRyZW4sXG4gICAgICAgICAgICBkaXJlY3Rpb246IFwibHRyXCIsXG4gICAgICAgICAgICBmb3JtYXQ6IDAsXG4gICAgICAgICAgICBpbmRlbnQ6IDAsXG4gICAgICAgICAgICB2YWx1ZTogMSxcbiAgICAgICAgICAgIHZlcnNpb246IDFcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gSGVscGVyIGZ1bmN0aW9uIHRvIHByb2Nlc3MgdGV4dCB3aXRoIGxpbmtzIGFuZCBmb3JtYXR0aW5nXG4gICAgICAgIGNvbnN0IHByb2Nlc3NUZXh0V2l0aE1hcmt1cCA9ICh0ZXh0OiBzdHJpbmcpOiBMZXhpY2FsTm9kZVtdID0+IHtcbiAgICAgICAgICAgIGNvbnN0IG5vZGVzOiBMZXhpY2FsTm9kZVtdID0gW107XG4gICAgICAgICAgICBsZXQgY3VycmVudEluZGV4ID0gMDtcblxuICAgICAgICAgICAgLy8gUmVndWxhciBleHByZXNzaW9ucyBmb3IgZGlmZmVyZW50IG1hcmt1cCB0eXBlc1xuICAgICAgICAgICAgY29uc3QgbWFya3VwUmVnZXggPSAvKD86YGBgW1xcc1xcU10qP2BgYCl8KD86YFteYF0rYCl8KD86XFxbKFteXFxdXSspXFxdXFwoKFteKV0rKVxcKSl8KD86XFwqXFwqW14qXStcXCpcXCopfCg/Ol9fW15fXStfXyl8KD86XFwqW14qXStcXCopL2c7XG4gICAgICAgICAgICBsZXQgbWF0Y2g7XG5cbiAgICAgICAgICAgIHdoaWxlICgobWF0Y2ggPSBtYXJrdXBSZWdleC5leGVjKHRleHQpKSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIC8vIEFkZCBhbnkgdGV4dCBiZWZvcmUgdGhlIG1hdGNoXG4gICAgICAgICAgICAgICAgaWYgKG1hdGNoLmluZGV4ID4gY3VycmVudEluZGV4KSB7XG4gICAgICAgICAgICAgICAgICAgIG5vZGVzLnB1c2goY3JlYXRlVGV4dE5vZGUodGV4dC5zbGljZShjdXJyZW50SW5kZXgsIG1hdGNoLmluZGV4KSkpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGNvbnN0IG1hdGNoZWRUZXh0ID0gbWF0Y2hbMF07XG5cbiAgICAgICAgICAgICAgICBpZiAobWF0Y2hlZFRleHQuc3RhcnRzV2l0aCgnYGBgJykpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gQ29kZSBibG9jayAtIG5vdCBoYW5kbGluZyB0aGlzIGhlcmUgYXMgaXQgc2hvdWxkIGJlIGhhbmRsZWQgYXQgYmxvY2sgbGV2ZWxcbiAgICAgICAgICAgICAgICAgICAgbm9kZXMucHVzaChjcmVhdGVUZXh0Tm9kZShtYXRjaGVkVGV4dCkpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobWF0Y2hlZFRleHQuc3RhcnRzV2l0aCgnYCcpKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIElubGluZSBjb2RlXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNvZGUgPSBtYXRjaGVkVGV4dC5zbGljZSgxLCAtMSk7XG4gICAgICAgICAgICAgICAgICAgIG5vZGVzLnB1c2goY3JlYXRlVGV4dE5vZGUoY29kZSwgMTYpKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG1hdGNoZWRUZXh0LnN0YXJ0c1dpdGgoJ1snKSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBMaW5rXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGxpbmtNYXRjaCA9IC9cXFsoW15cXF1dKylcXF1cXCgoW14pXSspXFwpLy5leGVjKG1hdGNoZWRUZXh0KTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGxpbmtNYXRjaCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbm9kZXMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJsaW5rXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiBsaW5rTWF0Y2hbMl0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGRyZW46IFtjcmVhdGVUZXh0Tm9kZShsaW5rTWF0Y2hbMV0pXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXJlY3Rpb246IFwibHRyXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9ybWF0OiAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluZGVudDogMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2ZXJzaW9uOiAxXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobWF0Y2hlZFRleHQuc3RhcnRzV2l0aCgnKionKSB8fCBtYXRjaGVkVGV4dC5zdGFydHNXaXRoKCdfXycpKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIEJvbGRcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgYm9sZFRleHQgPSBtYXRjaGVkVGV4dC5zbGljZSgyLCAtMik7XG4gICAgICAgICAgICAgICAgICAgIG5vZGVzLnB1c2goY3JlYXRlVGV4dE5vZGUoYm9sZFRleHQsIDEpKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG1hdGNoZWRUZXh0LnN0YXJ0c1dpdGgoJyonKSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBJdGFsaWNcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaXRhbGljVGV4dCA9IG1hdGNoZWRUZXh0LnNsaWNlKDEsIC0xKTtcbiAgICAgICAgICAgICAgICAgICAgbm9kZXMucHVzaChjcmVhdGVUZXh0Tm9kZShpdGFsaWNUZXh0LCAyKSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgY3VycmVudEluZGV4ID0gbWF0Y2guaW5kZXggKyBtYXRjaGVkVGV4dC5sZW5ndGg7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIEFkZCBhbnkgcmVtYWluaW5nIHRleHRcbiAgICAgICAgICAgIGlmIChjdXJyZW50SW5kZXggPCB0ZXh0Lmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIG5vZGVzLnB1c2goY3JlYXRlVGV4dE5vZGUodGV4dC5zbGljZShjdXJyZW50SW5kZXgpKSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBub2RlcztcbiAgICAgICAgfTtcblxuICAgICAgICAvLyBQcm9jZXNzIHRoZSBjb250ZW50XG4gICAgICAgIGNvbnN0IHJvb3RDaGlsZHJlbjogTGV4aWNhbE5vZGVbXSA9IFtdO1xuICAgICAgICBsZXQgY3VycmVudExpc3RJdGVtczogTGV4aWNhbE5vZGVbXSB8IG51bGwgPSBudWxsO1xuICAgICAgICBsZXQgY3VycmVudExpc3RUeXBlOiBcImJ1bGxldFwiIHwgXCJudW1iZXJcIiB8IG51bGwgPSBudWxsO1xuXG4gICAgICAgIC8vIEZpcnN0LCBzcGxpdCBieSBwYXJhZ3JhcGhzIChkb3VibGUgbmV3bGluZXMpXG4gICAgICAgIGNvbnN0IHBhcmFncmFwaEJsb2NrcyA9IGNvbnRlbnQuc3BsaXQoJ1xcblxcbicpLmZpbHRlcihwID0+IHAudHJpbSgpKTtcbiAgICAgICAgXG4gICAgICAgIHBhcmFncmFwaEJsb2Nrcy5mb3JFYWNoKGJsb2NrID0+IHtcbiAgICAgICAgICAgIC8vIFNwbGl0IGVhY2ggYmxvY2sgaW50byBsaW5lc1xuICAgICAgICAgICAgY29uc3QgbGluZXMgPSBibG9jay5zcGxpdCgnXFxuJykuZmlsdGVyKGxpbmUgPT4gbGluZS50cmltKCkpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBQcm9jZXNzIGVhY2ggbGluZSBpbiB0aGUgYmxvY2tcbiAgICAgICAgICAgIGxpbmVzLmZvckVhY2gobGluZSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgdHJpbW1lZExpbmUgPSBsaW5lLnRyaW0oKTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAvLyBDaGVjayBmb3IgbGlzdCBpdGVtc1xuICAgICAgICAgICAgICAgIGNvbnN0IGJ1bGxldExpc3RNYXRjaCA9IHRyaW1tZWRMaW5lLm1hdGNoKC9eWy0qXVxccysoLispJC8pO1xuICAgICAgICAgICAgICAgIGNvbnN0IG51bWJlckxpc3RNYXRjaCA9IHRyaW1tZWRMaW5lLm1hdGNoKC9eKFxcZCspXFwuXFxzKyguKykkLyk7XG5cbiAgICAgICAgICAgICAgICBpZiAoYnVsbGV0TGlzdE1hdGNoIHx8IG51bWJlckxpc3RNYXRjaCkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBsaXN0VGV4dCA9IGJ1bGxldExpc3RNYXRjaCA/IGJ1bGxldExpc3RNYXRjaFsxXSA6IG51bWJlckxpc3RNYXRjaCFbMl07XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGxpc3RUeXBlOiBcImJ1bGxldFwiIHwgXCJudW1iZXJcIiA9IGJ1bGxldExpc3RNYXRjaCA/IFwiYnVsbGV0XCIgOiBcIm51bWJlclwiO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIElmIHdlJ3JlIHN0YXJ0aW5nIGEgbmV3IGxpc3Qgb3Igc3dpdGNoaW5nIGxpc3QgdHlwZXNcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFjdXJyZW50TGlzdEl0ZW1zIHx8IGN1cnJlbnRMaXN0VHlwZSAhPT0gbGlzdFR5cGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIElmIHdlIGhhdmUgYSBwcmV2aW91cyBsaXN0LCBhZGQgaXQgdG8gcm9vdCBjaGlsZHJlblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGN1cnJlbnRMaXN0SXRlbXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByb290Q2hpbGRyZW4ucHVzaChjcmVhdGVMaXN0Tm9kZShjdXJyZW50TGlzdEl0ZW1zLCBjdXJyZW50TGlzdFR5cGUhKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBTdGFydCBhIG5ldyBsaXN0XG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50TGlzdEl0ZW1zID0gW107XG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50TGlzdFR5cGUgPSBsaXN0VHlwZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIC8vIEFkZCB0aGUgbGlzdCBpdGVtXG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRMaXN0SXRlbXMucHVzaChjcmVhdGVMaXN0SXRlbU5vZGUoW1xuICAgICAgICAgICAgICAgICAgICAgICAgY3JlYXRlUGFyYWdyYXBoTm9kZShwcm9jZXNzVGV4dFdpdGhNYXJrdXAobGlzdFRleHQpKVxuICAgICAgICAgICAgICAgICAgICBdKSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBJZiB0aGlzIGxpbmUgaXNuJ3QgYSBsaXN0IGl0ZW0gYnV0IHdlIGhhdmUgYSBjdXJyZW50IGxpc3RcbiAgICAgICAgICAgICAgICBpZiAoY3VycmVudExpc3RJdGVtcykge1xuICAgICAgICAgICAgICAgICAgICByb290Q2hpbGRyZW4ucHVzaChjcmVhdGVMaXN0Tm9kZShjdXJyZW50TGlzdEl0ZW1zLCBjdXJyZW50TGlzdFR5cGUhKSk7XG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRMaXN0SXRlbXMgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICBjdXJyZW50TGlzdFR5cGUgPSBudWxsO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIENoZWNrIGZvciBob3Jpem9udGFsIHJ1bGUgKHRocmVlIG9yIG1vcmUgZGFzaGVzKVxuICAgICAgICAgICAgICAgIGlmICh0cmltbWVkTGluZS5tYXRjaCgvXi17Myx9JC8pKSB7XG4gICAgICAgICAgICAgICAgICAgIHJvb3RDaGlsZHJlbi5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiaG9yaXpvbnRhbHJ1bGVcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHZlcnNpb246IDFcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgLy8gQ2hlY2sgZm9yIGhlYWRpbmdzXG4gICAgICAgICAgICAgICAgY29uc3QgaGVhZGluZ01hdGNoID0gdHJpbW1lZExpbmUubWF0Y2goL14oI3sxLDZ9KVxccysoLispJC9tKTtcbiAgICAgICAgICAgICAgICBpZiAoaGVhZGluZ01hdGNoKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGxldmVsID0gaGVhZGluZ01hdGNoWzFdLmxlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdGV4dCA9IGhlYWRpbmdNYXRjaFsyXS50cmltKCk7XG4gICAgICAgICAgICAgICAgICAgIHJvb3RDaGlsZHJlbi5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiaGVhZGluZ1wiLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGFnOiBgaCR7bGV2ZWx9YCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuOiBwcm9jZXNzVGV4dFdpdGhNYXJrdXAodGV4dCksXG4gICAgICAgICAgICAgICAgICAgICAgICBkaXJlY3Rpb246IFwibHRyXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3JtYXQ6IDAsXG4gICAgICAgICAgICAgICAgICAgICAgICBpbmRlbnQ6IDAsXG4gICAgICAgICAgICAgICAgICAgICAgICB2ZXJzaW9uOiAxXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gQ2hlY2sgZm9yIGJsb2NrcXVvdGVzXG4gICAgICAgICAgICAgICAgaWYgKHRyaW1tZWRMaW5lLnN0YXJ0c1dpdGgoJz4nKSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBxdW90ZVRleHQgPSB0cmltbWVkTGluZS5zdWJzdHJpbmcoMSkudHJpbSgpO1xuICAgICAgICAgICAgICAgICAgICByb290Q2hpbGRyZW4ucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBcInF1b3RlXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBjaGlsZHJlbjogW2NyZWF0ZVBhcmFncmFwaE5vZGUocHJvY2Vzc1RleHRXaXRoTWFya3VwKHF1b3RlVGV4dCkpXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRpcmVjdGlvbjogXCJsdHJcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvcm1hdDogMCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGluZGVudDogMCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHZlcnNpb246IDFcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBDaGVjayBmb3IgaW1hZ2VzXG4gICAgICAgICAgICAgICAgY29uc3QgaW1hZ2VNYXRjaCA9IHRyaW1tZWRMaW5lLm1hdGNoKC9eIVxcWyguKj8pXFxdXFwoKC4qPylcXCkkLyk7XG4gICAgICAgICAgICAgICAgaWYgKGltYWdlTWF0Y2gpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgW18sIGFsdCwgc3JjXSA9IGltYWdlTWF0Y2g7XG4gICAgICAgICAgICAgICAgICAgIHJvb3RDaGlsZHJlbi5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiaW1hZ2VcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHNyYyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGFsdFRleHQ6IGFsdCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1heFdpZHRoOiBcIjEwMCVcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHNob3dDYXB0aW9uOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhcHRpb246IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRpcmVjdGlvbjogXCJsdHJcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvcm1hdDogMCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGluZGVudDogMCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHZlcnNpb246IDFcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBSZWd1bGFyIHBhcmFncmFwaFxuICAgICAgICAgICAgICAgIHJvb3RDaGlsZHJlbi5wdXNoKGNyZWF0ZVBhcmFncmFwaE5vZGUocHJvY2Vzc1RleHRXaXRoTWFya3VwKHRyaW1tZWRMaW5lKSkpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIElmIHdlIGhhdmUgYW55IHJlbWFpbmluZyBsaXN0IGl0ZW1zIGF0IHRoZSBlbmQsIGFkZCB0aGVtXG4gICAgICAgIGlmIChjdXJyZW50TGlzdEl0ZW1zKSB7XG4gICAgICAgICAgICByb290Q2hpbGRyZW4ucHVzaChjcmVhdGVMaXN0Tm9kZShjdXJyZW50TGlzdEl0ZW1zLCBjdXJyZW50TGlzdFR5cGUhKSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBDcmVhdGUgdGhlIHJvb3Qgbm9kZVxuICAgICAgICBjb25zdCByb290OiBMZXhpY2FsTm9kZSA9IHtcbiAgICAgICAgICAgIHR5cGU6IFwicm9vdFwiLFxuICAgICAgICAgICAgY2hpbGRyZW46IHJvb3RDaGlsZHJlbixcbiAgICAgICAgICAgIGRpcmVjdGlvbjogXCJsdHJcIixcbiAgICAgICAgICAgIGZvcm1hdDogMCxcbiAgICAgICAgICAgIGluZGVudDogMCxcbiAgICAgICAgICAgIHZlcnNpb246IDFcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoeyByb290IH0pO1xuICAgIH1cblxuICAgIGFzeW5jIHB1Ymxpc2hUb0dob3N0KHRpdGxlOiBzdHJpbmcsIG1hcmtkb3duQ29udGVudDogc3RyaW5nLCBmcm9udE1hdHRlcjogRnJvbnRNYXR0ZXJEYXRhKTogUHJvbWlzZTx7IHN1Y2Nlc3M6IGJvb2xlYW4sIGVycm9yPzogc3RyaW5nLCBwb3N0VXJsPzogc3RyaW5nIH0+IHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IHsgZ2hvc3RVcmwsIGFwaUtleSB9ID0gdGhpcy5zZXR0aW5ncztcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYgKCFnaG9zdFVybCB8fCAhYXBpS2V5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgXG4gICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IGZhbHNlLCBcbiAgICAgICAgICAgICAgICAgICAgZXJyb3I6ICdHaG9zdCBVUkwgYW5kIEFQSSBLZXkgYXJlIHJlcXVpcmVkJyBcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBDbGVhbiB1cCB0aGUgVVJMXG4gICAgICAgICAgICBjb25zdCBiYXNlVXJsID0gZ2hvc3RVcmwudHJpbSgpLnJlcGxhY2UoL1xcLyQvLCAnJyk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIEV4dHJhY3QgQVBJIGNyZWRlbnRpYWxzXG4gICAgICAgICAgICBjb25zdCBbaWQsIHNlY3JldF0gPSBhcGlLZXkuc3BsaXQoJzonKTtcbiAgICAgICAgICAgIGlmICghaWQgfHwgIXNlY3JldCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB7IFxuICAgICAgICAgICAgICAgICAgICBzdWNjZXNzOiBmYWxzZSwgXG4gICAgICAgICAgICAgICAgICAgIGVycm9yOiAnSW52YWxpZCBBUEkga2V5IGZvcm1hdCcgXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gQ2xlYW4gdXAgdGhlIG1hcmtkb3duIGNvbnRlbnRcbiAgICAgICAgICAgIGNvbnN0IGNsZWFuTWFya2Rvd24gPSBtYXJrZG93bkNvbnRlbnQudHJpbSgpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBEZWJ1ZyBsb2dnaW5nIGZvciBtYXJrZG93biBjb250ZW50XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnT3JpZ2luYWwgTWFya2Rvd24gY29udGVudDonLCBjbGVhbk1hcmtkb3duKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gQ2hlY2sgaWYgZmlyc3QgbGluZSBpcyBhbiBpbWFnZVxuICAgICAgICAgICAgY29uc3QgbGluZXMgPSBjbGVhbk1hcmtkb3duLnNwbGl0KCdcXG4nKTtcbiAgICAgICAgICAgIGxldCBmZWF0dXJlZEltYWdlOiBzdHJpbmcgfCB1bmRlZmluZWQ7XG4gICAgICAgICAgICBsZXQgY29udGVudFdpdGhvdXRGaXJzdEltYWdlID0gY2xlYW5NYXJrZG93bjtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYgKGxpbmVzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICBjb25zdCBmaXJzdExpbmUgPSBsaW5lc1swXS50cmltKCk7XG4gICAgICAgICAgICAgICAgY29uc3QgaW1hZ2VNYXRjaCA9IGZpcnN0TGluZS5tYXRjaCgvXiFcXFsuKj9cXF1cXCgoLio/KVxcKSQvKTtcbiAgICAgICAgICAgICAgICBpZiAoaW1hZ2VNYXRjaCkge1xuICAgICAgICAgICAgICAgICAgICBmZWF0dXJlZEltYWdlID0gaW1hZ2VNYXRjaFsxXTtcbiAgICAgICAgICAgICAgICAgICAgLy8gUmVtb3ZlIHRoZSBmaXJzdCBpbWFnZSBmcm9tIGNvbnRlbnRcbiAgICAgICAgICAgICAgICAgICAgY29udGVudFdpdGhvdXRGaXJzdEltYWdlID0gbGluZXMuc2xpY2UoMSkuam9pbignXFxuJykudHJpbSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gUGFyc2UgbWFya2Rvd24gaW50byBMZXhpY2FsIGZvcm1hdFxuICAgICAgICAgICAgY29uc3QgbGV4aWNhbCA9IHRoaXMucGFyc2VNYXJrZG93blRvTW9iaWxlZG9jKGNvbnRlbnRXaXRob3V0Rmlyc3RJbWFnZSk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIERlYnVnIGxvZ2dpbmcgZm9yIGxleGljYWwgZm9ybWF0XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnTGV4aWNhbCBmb3JtYXQ6JywgbGV4aWNhbCk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIFByZXBhcmUgdGhlIHBvc3QgZGF0YVxuICAgICAgICAgICAgY29uc3QgcG9zdERhdGE6IGFueSA9IHtcbiAgICAgICAgICAgICAgICBwb3N0czogW3tcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6IHRpdGxlLFxuICAgICAgICAgICAgICAgICAgICBsZXhpY2FsOiBsZXhpY2FsLFxuICAgICAgICAgICAgICAgICAgICBzdGF0dXM6IGZyb250TWF0dGVyLnN0YXR1cyB8fCAnZHJhZnQnLFxuICAgICAgICAgICAgICAgICAgICBmZWF0dXJlZDogZnJvbnRNYXR0ZXIuZmVhdHVyZWQgfHwgZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIHZpc2liaWxpdHk6IGZyb250TWF0dGVyLnZpc2liaWxpdHkgfHwgJ3B1YmxpYycsXG4gICAgICAgICAgICAgICAgICAgIHB1Ymxpc2hlZF9hdDogbnVsbCAvLyBJbml0aWFsaXplIHRvIG51bGxcbiAgICAgICAgICAgICAgICB9XVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gRGVidWcgbG9nZ2luZyBmb3IgZmluYWwgcG9zdCBkYXRhXG4gICAgICAgICAgICBjb25zb2xlLmxvZygnRmluYWwgcG9zdCBkYXRhOicsIEpTT04uc3RyaW5naWZ5KHBvc3REYXRhLCBudWxsLCAyKSk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIEFkZCBmZWF0dXJlZCBpbWFnZSBpZiBmb3VuZFxuICAgICAgICAgICAgaWYgKGZlYXR1cmVkSW1hZ2UpIHtcbiAgICAgICAgICAgICAgICBwb3N0RGF0YS5wb3N0c1swXS5mZWF0dXJlX2ltYWdlID0gZmVhdHVyZWRJbWFnZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gQWRkIHRhZ3MgaWYgcHJlc2VudFxuICAgICAgICAgICAgaWYgKGZyb250TWF0dGVyLnRhZ3MgJiYgZnJvbnRNYXR0ZXIudGFncy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgcG9zdERhdGEucG9zdHNbMF0udGFncyA9IGZyb250TWF0dGVyLnRhZ3MubWFwKHRhZyA9PiAoeyBuYW1lOiB0YWcgfSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBIYW5kbGUgcHVibGlzaGVkX2F0IGZpZWxkIGJhc2VkIG9uIHN0YXR1c1xuICAgICAgICAgICAgaWYgKGZyb250TWF0dGVyLnN0YXR1cyA9PT0gJ3NjaGVkdWxlZCcgJiYgZnJvbnRNYXR0ZXIudGltZSkge1xuICAgICAgICAgICAgICAgIHBvc3REYXRhLnBvc3RzWzBdLnB1Ymxpc2hlZF9hdCA9IGZyb250TWF0dGVyLnRpbWU7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGZyb250TWF0dGVyLnN0YXR1cyA9PT0gJ3B1Ymxpc2hlZCcpIHtcbiAgICAgICAgICAgICAgICBwb3N0RGF0YS5wb3N0c1swXS5wdWJsaXNoZWRfYXQgPSBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIFRyeSB0byBwdWJsaXNoIHRoZSBwb3N0IHVzaW5nIE9ic2lkaWFuJ3MgcmVxdWVzdFVybFxuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAvLyBHZW5lcmF0ZSBwcm9wZXIgSldUIHRva2VuIGZvciBHaG9zdCBBZG1pbiBBUElcbiAgICAgICAgICAgICAgICBjb25zdCBhdXRoVG9rZW4gPSB0aGlzLmdlbmVyYXRlR2hvc3RBZG1pblRva2VuKGlkLCBzZWNyZXQpO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgcmVxdWVzdFVybCh7XG4gICAgICAgICAgICAgICAgICAgIHVybDogYCR7YmFzZVVybH0vZ2hvc3QvYXBpL2FkbWluL3Bvc3RzL2AsXG4gICAgICAgICAgICAgICAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgICAgICAgICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ0F1dGhvcml6YXRpb24nOiBhdXRoVG9rZW5cbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkocG9zdERhdGEpLFxuICAgICAgICAgICAgICAgICAgICB0aHJvdzogZmFsc2VcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2Uuc3RhdHVzID49IDIwMCAmJiByZXNwb25zZS5zdGF0dXMgPCAzMDApIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QganNvbkRhdGEgPSByZXNwb25zZS5qc29uO1xuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgLy8gRXh0cmFjdCB0aGUgcG9zdCBVUkwgaWYgYXZhaWxhYmxlXG4gICAgICAgICAgICAgICAgICAgIGxldCBwb3N0VXJsID0gJyc7XG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwb3N0VXJsID0ganNvbkRhdGE/LnBvc3RzPy5bMF0/LnVybCB8fCAnJztcbiAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ0NvdWxkIG5vdCBleHRyYWN0IHBvc3QgVVJMIGZyb20gcmVzcG9uc2UnKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgLy8gSWYgZW5hYmxlZCwgb3BlbiB0aGUgZWRpdG9yIFVSTFxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5zZXR0aW5ncy5vcGVuRWRpdG9yQWZ0ZXJQdWJsaXNoICYmIGpzb25EYXRhPy5wb3N0cz8uWzBdPy5pZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZWRpdG9yVXJsID0gYCR7dGhpcy5zZXR0aW5ncy5naG9zdFVybH0vZ2hvc3QvIy9lZGl0b3IvcG9zdC8ke2pzb25EYXRhLnBvc3RzWzBdLmlkfWA7XG4gICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3cub3BlbihlZGl0b3JVcmwsICdfYmxhbmsnKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHsgXG4gICAgICAgICAgICAgICAgICAgICAgICBzdWNjZXNzOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgcG9zdFVybDogcG9zdFVybFxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGVycm9yUmVzcG9uc2UgPSByZXNwb25zZS50ZXh0O1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCdBUEkgRXJyb3Igd2hlbiBwdWJsaXNoaW5nOicsIHJlc3BvbnNlLnN0YXR1cyk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIHJlc3BvbnNlIGJvZHk6JywgZXJyb3JSZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAvLyBUcnkgYWx0ZXJuYXRlIG1ldGhvZCBpZiB3ZSBnb3QgYSB0b2tlbiBlcnJvclxuICAgICAgICAgICAgICAgICAgICBpZiAoZXJyb3JSZXNwb25zZS5pbmNsdWRlcygnSU5WQUxJRF9KV1QnKSB8fCBlcnJvclJlc3BvbnNlLmluY2x1ZGVzKCdJbnZhbGlkIHRva2VuJykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdUb2tlbiBlcnJvciBkZXRlY3RlZCwgdHJ5aW5nIE5vZGUuanMgbWV0aG9kIHdpdGggcHJvcGVyIEpXVC4uLicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMucHVibGlzaFdpdGhOb2RlKGJhc2VVcmwsIGlkLCBzZWNyZXQsIHBvc3REYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHsgXG4gICAgICAgICAgICAgICAgICAgICAgICBzdWNjZXNzOiBmYWxzZSwgXG4gICAgICAgICAgICAgICAgICAgICAgICBlcnJvcjogYEFQSSBFcnJvciAoJHtyZXNwb25zZS5zdGF0dXN9KTogJHtlcnJvclJlc3BvbnNlfWAgXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCdPYnNpZGlhbiByZXF1ZXN0IGZhaWxlZCB3aGVuIHB1Ymxpc2hpbmcsIHRyeWluZyBOb2RlLmpzOicsIGVycm9yKTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAvLyBUcnkgd2l0aCBOb2RlLmpzIGFzIGZhbGxiYWNrXG4gICAgICAgICAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMucHVibGlzaFdpdGhOb2RlKGJhc2VVcmwsIGlkLCBzZWNyZXQsIHBvc3REYXRhKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1B1Ymxpc2ggZXJyb3I6JywgZXJyb3IpO1xuICAgICAgICAgICAgcmV0dXJuIHsgXG4gICAgICAgICAgICAgICAgc3VjY2VzczogZmFsc2UsIFxuICAgICAgICAgICAgICAgIGVycm9yOiBgRXJyb3IgZHVyaW5nIHB1Ymxpc2hpbmc6ICR7ZXJyb3J9YCBcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICB9XG4gICAgXG4gICAgYXN5bmMgcHVibGlzaFdpdGhOb2RlKHVybDogc3RyaW5nLCBpZDogc3RyaW5nLCBzZWNyZXQ6IHN0cmluZywgcG9zdERhdGE6IGFueSk6IFByb21pc2U8eyBzdWNjZXNzOiBib29sZWFuLCBlcnJvcj86IHN0cmluZywgcG9zdFVybD86IHN0cmluZyB9PiB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAvLyBUcnkgdG8gYWNjZXNzIE5vZGUuanMgbW9kdWxlcyBpbiBFbGVjdHJvbiBjb250ZXh0XG4gICAgICAgICAgICAgICAgLy8gQHRzLWlnbm9yZSAtIEFjY2Vzc2luZyBnbG9iYWwgd2luZG93IG9iamVjdFxuICAgICAgICAgICAgICAgIGNvbnN0IG5vZGVSZXF1aXJlID0gd2luZG93LnJlcXVpcmU7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgaWYgKCFub2RlUmVxdWlyZSkge1xuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHsgXG4gICAgICAgICAgICAgICAgICAgICAgICBzdWNjZXNzOiBmYWxzZSwgXG4gICAgICAgICAgICAgICAgICAgICAgICBlcnJvcjogJ0NvdWxkIG5vdCBhY2Nlc3MgTm9kZS5qcyBtb2R1bGVzIGZvciBwdWJsaXNoaW5nJyBcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgY29uc3QgaHR0cHMgPSBub2RlUmVxdWlyZSgnaHR0cHMnKTtcbiAgICAgICAgICAgICAgICBjb25zdCBjcnlwdG8gPSBub2RlUmVxdWlyZSgnY3J5cHRvJyk7XG4gICAgICAgICAgICAgICAgY29uc3QgdXJsT2JqID0gbmV3IFVSTCh1cmwpO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIC8vIEdlbmVyYXRlIHByb3BlciBKV1QgdG9rZW4gdXNpbmcgTm9kZS5qcyBjcnlwdG9cbiAgICAgICAgICAgICAgICBjb25zdCBub3cgPSBNYXRoLmZsb29yKERhdGUubm93KCkgLyAxMDAwKTtcbiAgICAgICAgICAgICAgICBjb25zdCBmaXZlTWludXRlc0Zyb21Ob3cgPSBub3cgKyA1ICogNjA7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgLy8gQ3JlYXRlIEpXVCBoZWFkZXIgYW5kIHBheWxvYWRcbiAgICAgICAgICAgICAgICBjb25zdCBoZWFkZXIgPSB7XG4gICAgICAgICAgICAgICAgICAgIGFsZzogJ0hTMjU2JyxcbiAgICAgICAgICAgICAgICAgICAgdHlwOiAnSldUJyxcbiAgICAgICAgICAgICAgICAgICAga2lkOiBpZCAvLyBLZXkgSURcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGNvbnN0IHBheWxvYWQgPSB7XG4gICAgICAgICAgICAgICAgICAgIGlhdDogbm93LCAgICAgICAgICAgICAgICAgIC8vIElzc3VlZCBhdCB0aW1lXG4gICAgICAgICAgICAgICAgICAgIGV4cDogZml2ZU1pbnV0ZXNGcm9tTm93LCAgIC8vIEV4cGlyYXRpb24gdGltZVxuICAgICAgICAgICAgICAgICAgICBhdWQ6ICcvdjUvYWRtaW4vJyAgICAgICAgICAvLyBBdWRpZW5jZVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgLy8gQmFzZTY0IGVuY29kZSB0aGUgaGVhZGVyIGFuZCBwYXlsb2FkXG4gICAgICAgICAgICAgICAgY29uc3QgaGVhZGVyQmFzZTY0ID0gQnVmZmVyLmZyb20oSlNPTi5zdHJpbmdpZnkoaGVhZGVyKSkudG9TdHJpbmcoJ2Jhc2U2NCcpXG4gICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9cXCsvZywgJy0nKVxuICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgvXFwvL2csICdfJylcbiAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoLz0rJC9nLCAnJyk7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgY29uc3QgcGF5bG9hZEJhc2U2NCA9IEJ1ZmZlci5mcm9tKEpTT04uc3RyaW5naWZ5KHBheWxvYWQpKS50b1N0cmluZygnYmFzZTY0JylcbiAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoL1xcKy9nLCAnLScpXG4gICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9cXC8vZywgJ18nKVxuICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgvPSskL2csICcnKTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAvLyBDcmVhdGUgdGhlIHNpZ25hdHVyZVxuICAgICAgICAgICAgICAgIGNvbnN0IHNpZ25hdHVyZUlucHV0ID0gYCR7aGVhZGVyQmFzZTY0fS4ke3BheWxvYWRCYXNlNjR9YDtcbiAgICAgICAgICAgICAgICBjb25zdCBzaWduYXR1cmUgPSBjcnlwdG8uY3JlYXRlSG1hYygnc2hhMjU2JywgQnVmZmVyLmZyb20oc2VjcmV0LCAnaGV4JykpXG4gICAgICAgICAgICAgICAgICAgIC51cGRhdGUoc2lnbmF0dXJlSW5wdXQpXG4gICAgICAgICAgICAgICAgICAgIC5kaWdlc3QoJ2Jhc2U2NCcpXG4gICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9cXCsvZywgJy0nKVxuICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgvXFwvL2csICdfJylcbiAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoLz0rJC9nLCAnJyk7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgLy8gQ3JlYXRlIHRoZSBjb21wbGV0ZSBKV1QgdG9rZW5cbiAgICAgICAgICAgICAgICBjb25zdCB0b2tlbiA9IGAke2hlYWRlckJhc2U2NH0uJHtwYXlsb2FkQmFzZTY0fS4ke3NpZ25hdHVyZX1gO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIC8vIEF1dGggaGVhZGVyIHdpdGggSldUIHRva2VuXG4gICAgICAgICAgICAgICAgY29uc3QgYXV0aFRva2VuID0gYEdob3N0ICR7dG9rZW59YDtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBjb25zdCBwb3N0Q29udGVudCA9IEpTT04uc3RyaW5naWZ5KHBvc3REYXRhKTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBjb25zdCBvcHRpb25zID0ge1xuICAgICAgICAgICAgICAgICAgICBob3N0bmFtZTogdXJsT2JqLmhvc3RuYW1lLFxuICAgICAgICAgICAgICAgICAgICBwYXRoOiB1cmxPYmoucGF0aG5hbWUgKyB1cmxPYmouc2VhcmNoLFxuICAgICAgICAgICAgICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgICAgICAgICAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICdDb250ZW50LUxlbmd0aCc6IHBvc3RDb250ZW50Lmxlbmd0aCxcbiAgICAgICAgICAgICAgICAgICAgICAgICdBdXRob3JpemF0aW9uJzogYXV0aFRva2VuXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGNvbnN0IHJlcSA9IGh0dHBzLnJlcXVlc3Qob3B0aW9ucywgKHJlczogYW55KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBkYXRhID0gJyc7XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICByZXMub24oJ2RhdGEnLCAoY2h1bms6IHN0cmluZykgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YSArPSBjaHVuaztcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICByZXMub24oJ2VuZCcsICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXMuc3RhdHVzQ29kZSA+PSAyMDAgJiYgcmVzLnN0YXR1c0NvZGUgPCAzMDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBqc29uRGF0YSA9IEpTT04ucGFyc2UoZGF0YSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBFeHRyYWN0IHRoZSBwb3N0IFVSTCBpZiBhdmFpbGFibGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHBvc3RVcmwgPSAnJztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvc3RVcmwgPSBqc29uRGF0YT8ucG9zdHM/LlswXT8udXJsIHx8ICcnO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnQ291bGQgbm90IGV4dHJhY3QgcG9zdCBVUkwgZnJvbSByZXNwb25zZScpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBJZiBlbmFibGVkLCBvcGVuIHRoZSBlZGl0b3IgVVJMXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnNldHRpbmdzLm9wZW5FZGl0b3JBZnRlclB1Ymxpc2ggJiYganNvbkRhdGE/LnBvc3RzPy5bMF0/LmlkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBlZGl0b3JVcmwgPSBgJHt0aGlzLnNldHRpbmdzLmdob3N0VXJsfS9naG9zdC8jL2VkaXRvci9wb3N0LyR7anNvbkRhdGEucG9zdHNbMF0uaWR9YDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvdy5vcGVuKGVkaXRvclVybCwgJ19ibGFuaycpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHsgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWNjZXNzOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9zdFVybDogcG9zdFVybFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIHBhcnNpbmcgSlNPTiBmcm9tIHB1Ymxpc2ggcmVzcG9uc2U6JywgZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoeyBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IHRydWUsIC8vIFN0aWxsIGNvbnNpZGVyIGl0IGEgc3VjY2VzcyBpZiBzdGF0dXMgY29kZSBpcyBnb29kXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvcjogYENvdWxkIG5vdCBwYXJzZSByZXNwb25zZSBkYXRhOiAke2V9YCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCdBUEkgRXJyb3IgZnJvbSBOb2RlLmpzIHB1Ymxpc2g6JywgcmVzLnN0YXR1c0NvZGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIHJlc3BvbnNlIGJvZHk6JywgZGF0YSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSh7IFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWNjZXNzOiBmYWxzZSwgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yOiBgQVBJIEVycm9yICgke3Jlcy5zdGF0dXNDb2RlfSk6ICR7ZGF0YX1gIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICByZXEub24oJ2Vycm9yJywgKGVycm9yOiBFcnJvcikgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCdOb2RlLmpzIHB1Ymxpc2ggZXJyb3I6JywgZXJyb3IpO1xuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHsgXG4gICAgICAgICAgICAgICAgICAgICAgICBzdWNjZXNzOiBmYWxzZSwgXG4gICAgICAgICAgICAgICAgICAgICAgICBlcnJvcjogYE5ldHdvcmsgZXJyb3IgZHVyaW5nIHB1Ymxpc2hpbmc6ICR7ZXJyb3IubWVzc2FnZX1gIFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAvLyBXcml0ZSBwb3N0IGRhdGEgYW5kIGVuZCByZXF1ZXN0XG4gICAgICAgICAgICAgICAgcmVxLndyaXRlKHBvc3RDb250ZW50KTtcbiAgICAgICAgICAgICAgICByZXEuZW5kKCk7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGluIE5vZGUuanMgcHVibGlzaGluZzonLCBlcnJvcik7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZSh7IFxuICAgICAgICAgICAgICAgICAgICBzdWNjZXNzOiBmYWxzZSwgXG4gICAgICAgICAgICAgICAgICAgIGVycm9yOiBgRXJyb3IgZHVyaW5nIHB1Ymxpc2hpbmc6ICR7ZXJyb3J9YCBcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgb251bmxvYWQoKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdVbmxvYWRlZCBHaG9zdHkgUG9zdHkgcGx1Z2luJyk7XG4gICAgfVxuXG4gICAgYXN5bmMgbG9hZFNldHRpbmdzKCkge1xuICAgICAgICB0aGlzLnNldHRpbmdzID0gT2JqZWN0LmFzc2lnbih7fSwgREVGQVVMVF9TRVRUSU5HUywgYXdhaXQgdGhpcy5sb2FkRGF0YSgpKTtcbiAgICB9XG5cbiAgICBhc3luYyBzYXZlU2V0dGluZ3MoKSB7XG4gICAgICAgIGF3YWl0IHRoaXMuc2F2ZURhdGEodGhpcy5zZXR0aW5ncyk7XG4gICAgfVxuXG4gICAgYXN5bmMgZmV0Y2hSZWNlbnRQb3N0cygpOiBQcm9taXNlPHsgdGl0bGU6IHN0cmluZywgdXJsOiBzdHJpbmcsIHB1Ymxpc2hlZF9hdDogc3RyaW5nLCB0YWdzOiBzdHJpbmdbXSB9W10+IHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IHsgZ2hvc3RVcmwsIGFwaUtleSB9ID0gdGhpcy5zZXR0aW5ncztcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYgKCFnaG9zdFVybCB8fCAhYXBpS2V5KSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdHaG9zdCBVUkwgYW5kIEFQSSBLZXkgYXJlIHJlcXVpcmVkJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIENsZWFuIHVwIHRoZSBVUkxcbiAgICAgICAgICAgIGNvbnN0IGJhc2VVcmwgPSBnaG9zdFVybC50cmltKCkucmVwbGFjZSgvXFwvJC8sICcnKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gRXh0cmFjdCBBUEkgY3JlZGVudGlhbHNcbiAgICAgICAgICAgIGNvbnN0IFtpZCwgc2VjcmV0XSA9IGFwaUtleS5zcGxpdCgnOicpO1xuICAgICAgICAgICAgaWYgKCFpZCB8fCAhc2VjcmV0KSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIEFQSSBrZXkgZm9ybWF0Jyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIEdlbmVyYXRlIGF1dGggdG9rZW5cbiAgICAgICAgICAgIGNvbnN0IGF1dGhUb2tlbiA9IHRoaXMuZ2VuZXJhdGVHaG9zdEFkbWluVG9rZW4oaWQsIHNlY3JldCk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIEZldGNoIHJlY2VudCBwb3N0cyAoaW5jcmVhc2VkIHRvIDIwKVxuICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCByZXF1ZXN0VXJsKHtcbiAgICAgICAgICAgICAgICB1cmw6IGAke2Jhc2VVcmx9L2dob3N0L2FwaS9hZG1pbi9wb3N0cy8/bGltaXQ9MjAmb3JkZXI9cHVibGlzaGVkX2F0JTIwZGVzYyZmb3JtYXRzPW1vYmlsZWRvYyxodG1sLHBsYWludGV4dCZpbmNsdWRlPXRhZ3NgLFxuICAgICAgICAgICAgICAgIG1ldGhvZDogJ0dFVCcsXG4gICAgICAgICAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICAgICAgICAgICAnQXV0aG9yaXphdGlvbic6IGF1dGhUb2tlblxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAocmVzcG9uc2Uuc3RhdHVzICE9PSAyMDApIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEFQSSBFcnJvcjogJHtyZXNwb25zZS5zdGF0dXN9YCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGNvbnN0IHBvc3RzID0gcmVzcG9uc2UuanNvbi5wb3N0cztcbiAgICAgICAgICAgIHJldHVybiBwb3N0cy5tYXAoKHBvc3Q6IGFueSkgPT4gKHtcbiAgICAgICAgICAgICAgICB0aXRsZTogcG9zdC50aXRsZSxcbiAgICAgICAgICAgICAgICB1cmw6IHBvc3QudXJsLFxuICAgICAgICAgICAgICAgIHB1Ymxpc2hlZF9hdDogcG9zdC5wdWJsaXNoZWRfYXQsXG4gICAgICAgICAgICAgICAgdGFnczogKHBvc3QudGFncyB8fCBbXSkubWFwKCh0YWc6IGFueSkgPT4gdGFnLm5hbWUpXG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBmZXRjaGluZyByZWNlbnQgcG9zdHM6JywgZXJyb3IpO1xuICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBhc3luYyB1cGRhdGVSZWNlbnRQb3N0cygpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGlmICghdGhpcy5zZXR0aW5ncy5lbmFibGVSZWNlbnRQb3N0cykge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uc3QgcG9zdHMgPSBhd2FpdCB0aGlzLmZldGNoUmVjZW50UG9zdHMoKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gRm9ybWF0IGRhdGUgaGVscGVyIGZ1bmN0aW9uXG4gICAgICAgICAgICBjb25zdCBmb3JtYXREYXRlID0gKGRhdGVTdHI6IHN0cmluZykgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGRhdGUgPSBuZXcgRGF0ZShkYXRlU3RyKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZGF0ZS50b0xvY2FsZURhdGVTdHJpbmcoJ2VuLVVTJywge1xuICAgICAgICAgICAgICAgICAgICB5ZWFyOiAnbnVtZXJpYycsXG4gICAgICAgICAgICAgICAgICAgIG1vbnRoOiAnbG9uZycsXG4gICAgICAgICAgICAgICAgICAgIGRheTogJ251bWVyaWMnXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBDcmVhdGUgY29udGVudCBmb3IgdGhlIGZpbGVcbiAgICAgICAgICAgIGNvbnN0IGNvbnRlbnQgPSBbXG4gICAgICAgICAgICAgICAgJyMgUmVjZW50IEdob3N0IFBvc3RzJyxcbiAgICAgICAgICAgICAgICAnJyxcbiAgICAgICAgICAgICAgICAnTGFzdCB1cGRhdGVkOiAnICsgbmV3IERhdGUoKS50b0xvY2FsZURhdGVTdHJpbmcoJ2VuLVVTJywge1xuICAgICAgICAgICAgICAgICAgICB5ZWFyOiAnbnVtZXJpYycsXG4gICAgICAgICAgICAgICAgICAgIG1vbnRoOiAnbG9uZycsXG4gICAgICAgICAgICAgICAgICAgIGRheTogJ251bWVyaWMnXG4gICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgJycsXG4gICAgICAgICAgICAgICAgJ3wgVGl0bGUgfCBEYXRlIHwgVGFncyB8JyxcbiAgICAgICAgICAgICAgICAnfC0tLS0tLS18LS0tLS0tfC0tLS0tLXwnLFxuICAgICAgICAgICAgICAgIC4uLnBvc3RzLm1hcChwb3N0ID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZGF0ZSA9IGZvcm1hdERhdGUocG9zdC5wdWJsaXNoZWRfYXQpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB0aXRsZSA9IGBbJHtwb3N0LnRpdGxlfV0oJHtwb3N0LnVybH0pYDtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdGFncyA9IHBvc3QudGFncy5sZW5ndGggPiAwID8gcG9zdC50YWdzLmpvaW4oJywgJykgOiAnLSc7XG4gICAgICAgICAgICAgICAgICAgIC8vIEVzY2FwZSBhbnkgcGlwZSBjaGFyYWN0ZXJzIGluIHRoZSBjb250ZW50XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGVzY2FwZWRUaXRsZSA9IHRpdGxlLnJlcGxhY2UoL1xcfC9nLCAnXFxcXHwnKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZXNjYXBlZFRhZ3MgPSB0YWdzLnJlcGxhY2UoL1xcfC9nLCAnXFxcXHwnKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGB8ICR7ZXNjYXBlZFRpdGxlfSB8ICR7ZGF0ZX0gfCAke2VzY2FwZWRUYWdzfSB8YDtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgXS5qb2luKCdcXG4nKTtcblxuICAgICAgICAgICAgLy8gR2V0IG9yIGNyZWF0ZSB0aGUgZmlsZVxuICAgICAgICAgICAgY29uc3QgZmlsZVBhdGggPSB0aGlzLnNldHRpbmdzLnJlY2VudFBvc3RzRmlsZTtcbiAgICAgICAgICAgIGxldCBmaWxlID0gdGhpcy5hcHAudmF1bHQuZ2V0QWJzdHJhY3RGaWxlQnlQYXRoKGZpbGVQYXRoKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYgKCFmaWxlKSB7XG4gICAgICAgICAgICAgICAgZmlsZSA9IGF3YWl0IHRoaXMuYXBwLnZhdWx0LmNyZWF0ZShmaWxlUGF0aCwgY29udGVudCk7XG4gICAgICAgICAgICAgICAgbmV3IE5vdGljZShgQ3JlYXRlZCByZWNlbnQgcG9zdHMgZmlsZTogJHtmaWxlUGF0aH1gKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoZmlsZSBpbnN0YW5jZW9mIFRGaWxlKSB7XG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5hcHAudmF1bHQubW9kaWZ5KGZpbGUsIGNvbnRlbnQpO1xuICAgICAgICAgICAgICAgIG5ldyBOb3RpY2UoJ1VwZGF0ZWQgcmVjZW50IHBvc3RzJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBuZXcgTm90aWNlKGBFcnJvciB1cGRhdGluZyByZWNlbnQgcG9zdHM6ICR7ZXJyb3J9YCk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmNsYXNzIEdob3N0eVBvc3R5U2V0dGluZ1RhYiBleHRlbmRzIFBsdWdpblNldHRpbmdUYWIge1xuICAgIHBsdWdpbjogR2hvc3R5UG9zdHlQbHVnaW47XG5cbiAgICBjb25zdHJ1Y3RvcihhcHA6IEFwcCwgcGx1Z2luOiBHaG9zdHlQb3N0eVBsdWdpbikge1xuICAgICAgICBzdXBlcihhcHAsIHBsdWdpbik7XG4gICAgICAgIHRoaXMucGx1Z2luID0gcGx1Z2luO1xuICAgIH1cblxuICAgIGRpc3BsYXkoKTogdm9pZCB7XG4gICAgICAgIGNvbnN0IHsgY29udGFpbmVyRWwgfSA9IHRoaXM7XG5cbiAgICAgICAgY29udGFpbmVyRWwuZW1wdHkoKTtcblxuICAgICAgICBjb250YWluZXJFbC5jcmVhdGVFbCgnaDInLCB7IHRleHQ6ICdHaG9zdHkgUG9zdHkgU2V0dGluZ3MnIH0pO1xuXG4gICAgICAgIG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxuICAgICAgICAgICAgLnNldE5hbWUoJ0dob3N0IEJsb2cgVVJMJylcbiAgICAgICAgICAgIC5zZXREZXNjKCdVUkwgb2YgeW91ciBHaG9zdCBibG9nIChleDogaHR0cHM6Ly95b3VyYmxvZy5jb20pJylcbiAgICAgICAgICAgIC5hZGRUZXh0KHRleHQgPT4gdGV4dFxuICAgICAgICAgICAgICAgIC5zZXRQbGFjZWhvbGRlcignaHR0cHM6Ly95b3VyYmxvZy5jb20nKVxuICAgICAgICAgICAgICAgIC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5naG9zdFVybClcbiAgICAgICAgICAgICAgICAub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLmdob3N0VXJsID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuICAgICAgICAgICAgICAgIH0pKTtcblxuICAgICAgICBuZXcgU2V0dGluZyhjb250YWluZXJFbClcbiAgICAgICAgICAgIC5zZXROYW1lKCdBZG1pbiBBUEkgS2V5JylcbiAgICAgICAgICAgIC5zZXREZXNjKCdZb3VyIEdob3N0IEFkbWluIEFQSSBrZXknKVxuICAgICAgICAgICAgLmFkZFRleHQodGV4dCA9PiB0ZXh0XG4gICAgICAgICAgICAgICAgLnNldFBsYWNlaG9sZGVyKCcwMDAwMDAwMDAwMDAwMDAwMDAwMDowMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMCcpXG4gICAgICAgICAgICAgICAgLnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLmFwaUtleSlcbiAgICAgICAgICAgICAgICAub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLmFwaUtleSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcbiAgICAgICAgICAgICAgICB9KSk7XG5cbiAgICAgICAgbmV3IFNldHRpbmcoY29udGFpbmVyRWwpXG4gICAgICAgICAgICAuc2V0TmFtZSgnSW1hZ2VzIERpcmVjdG9yeScpXG4gICAgICAgICAgICAuc2V0RGVzYygnRGVmYXVsdCBkaXJlY3RvcnkgaW4geW91ciB2YXVsdCB3aGVyZSBpbWFnZXMgYXJlIHN0b3JlZCAoZS5nLiwgYXNzZXRzL2ZpbGVzKScpXG4gICAgICAgICAgICAuYWRkVGV4dCh0ZXh0ID0+IHRleHRcbiAgICAgICAgICAgICAgICAuc2V0UGxhY2Vob2xkZXIoJ2Fzc2V0cy9maWxlcycpXG4gICAgICAgICAgICAgICAgLnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLmltYWdlc0RpcmVjdG9yeSlcbiAgICAgICAgICAgICAgICAub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFJlbW92ZSBsZWFkaW5nIGFuZCB0cmFpbGluZyBzbGFzaGVzIGZvciBjb25zaXN0ZW5jeVxuICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5pbWFnZXNEaXJlY3RvcnkgPSB2YWx1ZS5yZXBsYWNlKC9eXFwvK3xcXC8rJC9nLCAnJyk7XG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuICAgICAgICAgICAgICAgIH0pKTtcblxuICAgICAgICBuZXcgU2V0dGluZyhjb250YWluZXJFbClcbiAgICAgICAgICAgIC5zZXROYW1lKCdPcGVuIEVkaXRvciBBZnRlciBQdWJsaXNoJylcbiAgICAgICAgICAgIC5zZXREZXNjKCdXaGV0aGVyIHRvIG9wZW4gdGhlIGVkaXRvciBhZnRlciBwdWJsaXNoaW5nIGEgcG9zdCcpXG4gICAgICAgICAgICAuYWRkVG9nZ2xlKHRvZ2dsZSA9PiB0b2dnbGVcbiAgICAgICAgICAgICAgICAuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3Mub3BlbkVkaXRvckFmdGVyUHVibGlzaClcbiAgICAgICAgICAgICAgICAub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLm9wZW5FZGl0b3JBZnRlclB1Ymxpc2ggPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XG4gICAgICAgICAgICAgICAgfSkpO1xuXG4gICAgICAgIG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxuICAgICAgICAgICAgLnNldE5hbWUoJ1JlY2VudCBQb3N0cyBGaWxlJylcbiAgICAgICAgICAgIC5zZXREZXNjKCdUaGUgZmlsZSBuYW1lIGZvciB0aGUgcmVjZW50IHBvc3RzIGZpbGUnKVxuICAgICAgICAgICAgLmFkZFRleHQodGV4dCA9PiB0ZXh0XG4gICAgICAgICAgICAgICAgLnNldFBsYWNlaG9sZGVyKCdSZWNlbnQgR2hvc3QgUG9zdHMubWQnKVxuICAgICAgICAgICAgICAgIC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5yZWNlbnRQb3N0c0ZpbGUpXG4gICAgICAgICAgICAgICAgLm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5yZWNlbnRQb3N0c0ZpbGUgPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XG4gICAgICAgICAgICAgICAgfSkpO1xuXG4gICAgICAgIG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxuICAgICAgICAgICAgLnNldE5hbWUoJ0VuYWJsZSBSZWNlbnQgUG9zdHMnKVxuICAgICAgICAgICAgLnNldERlc2MoJ1doZXRoZXIgdG8gZW5hYmxlIHRoZSByZWNlbnQgcG9zdHMgZmVhdHVyZScpXG4gICAgICAgICAgICAuYWRkVG9nZ2xlKHRvZ2dsZSA9PiB0b2dnbGVcbiAgICAgICAgICAgICAgICAuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MuZW5hYmxlUmVjZW50UG9zdHMpXG4gICAgICAgICAgICAgICAgLm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5lbmFibGVSZWNlbnRQb3N0cyA9IHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcbiAgICAgICAgICAgICAgICB9KSk7XG5cbiAgICAgICAgbmV3IFNldHRpbmcoY29udGFpbmVyRWwpXG4gICAgICAgICAgICAuc2V0TmFtZSgnVGVzdCBDb25uZWN0aW9uJylcbiAgICAgICAgICAgIC5zZXREZXNjKCdWZXJpZnkgeW91ciBHaG9zdCBjcmVkZW50aWFscycpXG4gICAgICAgICAgICAuYWRkQnV0dG9uKGJ1dHRvbiA9PiBidXR0b25cbiAgICAgICAgICAgICAgICAuc2V0QnV0dG9uVGV4dCgnVGVzdCBDb25uZWN0aW9uJylcbiAgICAgICAgICAgICAgICAuc2V0Q3RhKClcbiAgICAgICAgICAgICAgICAub25DbGljayhhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGJ1dHRvbi5zZXREaXNhYmxlZCh0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgYnV0dG9uLnNldEJ1dHRvblRleHQoJ1Rlc3RpbmcuLi4nKTtcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB0aGlzLnRlc3RHaG9zdENvbm5lY3Rpb24oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXN1bHQuc3VjY2Vzcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBOb3RpY2UoJ0Nvbm5lY3Rpb24gc3VjY2Vzc2Z1bCEnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IE5vdGljZShgQ29ubmVjdGlvbiBmYWlsZWQ6ICR7cmVzdWx0LmVycm9yfWApO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYnV0dG9uLnNldERpc2FibGVkKGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJ1dHRvbi5zZXRCdXR0b25UZXh0KCdUZXN0IENvbm5lY3Rpb24nKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pKTtcbiAgICB9XG5cbiAgICBhc3luYyB0ZXN0R2hvc3RDb25uZWN0aW9uKCk6IFByb21pc2U8eyBzdWNjZXNzOiBib29sZWFuLCBlcnJvcj86IHN0cmluZyB9PiB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCB7IGdob3N0VXJsLCBhcGlLZXkgfSA9IHRoaXMucGx1Z2luLnNldHRpbmdzO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAoIWdob3N0VXJsIHx8ICFhcGlLZXkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4geyBcbiAgICAgICAgICAgICAgICAgICAgc3VjY2VzczogZmFsc2UsIFxuICAgICAgICAgICAgICAgICAgICBlcnJvcjogJ1BsZWFzZSBlbnRlciBib3RoIEdob3N0IFVSTCBhbmQgQVBJIEtleScgXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gQ2xlYW4gdXAgdGhlIFVSTFxuICAgICAgICAgICAgY29uc3QgYmFzZVVybCA9IGdob3N0VXJsLnRyaW0oKS5yZXBsYWNlKC9cXC8kLywgJycpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBNYWtlIHN1cmUgVVJMIGhhcyBjb3JyZWN0IGZvcm1hdFxuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBuZXcgVVJMKGJhc2VVcmwpO1xuICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB7IFxuICAgICAgICAgICAgICAgICAgICBzdWNjZXNzOiBmYWxzZSwgXG4gICAgICAgICAgICAgICAgICAgIGVycm9yOiAnSW52YWxpZCBVUkwgZm9ybWF0JyBcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBFeHRyYWN0IEFQSSBjcmVkZW50aWFsc1xuICAgICAgICAgICAgY29uc3QgW2lkLCBzZWNyZXRdID0gYXBpS2V5LnNwbGl0KCc6Jyk7XG4gICAgICAgICAgICBpZiAoIWlkIHx8ICFzZWNyZXQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4geyBcbiAgICAgICAgICAgICAgICAgICAgc3VjY2VzczogZmFsc2UsIFxuICAgICAgICAgICAgICAgICAgICBlcnJvcjogJ0ludmFsaWQgQVBJIGtleSBmb3JtYXQuIFNob3VsZCBiZSBJRDpTRUNSRVQnIFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIENvbnN0cnVjdCB0aGUgQVBJIFVSTHMgZm9yIHRoZSB2NSBHaG9zdCBBUElcbiAgICAgICAgICAgIC8vIFRyeSBtdWx0aXBsZSB3ZWxsLWtub3duIGVuZHBvaW50cyB1bnRpbCBvbmUgd29ya3NcbiAgICAgICAgICAgIGNvbnN0IHBvc3NpYmxlRW5kcG9pbnRzID0gW1xuICAgICAgICAgICAgICAgIC8vIFBvc3RzIGVuZHBvaW50IGlzIHZlcnkgbGlrZWx5IHRvIGV4aXN0IGFuZCBzaG91bGQgd29yayBmb3IgdGVzdGluZyBhdXRoXG4gICAgICAgICAgICAgICAgYC9naG9zdC9hcGkvYWRtaW4vcG9zdHMvYCxcbiAgICAgICAgICAgICAgICAvLyBTZXR0aW5ncyBlbmRwb2ludCBhbHNvIGNvbW1vbmx5IHdvcmtzXG4gICAgICAgICAgICAgICAgYC9naG9zdC9hcGkvYWRtaW4vc2V0dGluZ3MvYCxcbiAgICAgICAgICAgICAgICAvLyBVc2VycyBlbmRwb2ludCBmb3IgY3VycmVudCB1c2VyXG4gICAgICAgICAgICAgICAgYC9naG9zdC9hcGkvYWRtaW4vdXNlcnMvbWUvYCxcbiAgICAgICAgICAgICAgICAvLyBTaXRlIGVuZHBvaW50IChwcmV2aW91c2x5IHRyaWVkKVxuICAgICAgICAgICAgICAgIGAvZ2hvc3QvYXBpL2FkbWluL3NpdGUvYFxuICAgICAgICAgICAgXTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgZm9yIChjb25zdCBlbmRwb2ludCBvZiBwb3NzaWJsZUVuZHBvaW50cykge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHRlc3RVcmwgPSBgJHtiYXNlVXJsfSR7ZW5kcG9pbnR9YDtcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgcmVxdWVzdFVybCh7XG4gICAgICAgICAgICAgICAgICAgICAgICB1cmw6IHRlc3RVcmwsXG4gICAgICAgICAgICAgICAgICAgICAgICBtZXRob2Q6ICdHRVQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdBdXRob3JpemF0aW9uJzogYEdob3N0ICR7aWR9OiR7c2VjcmV0fWBcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdzogZmFsc2VcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2Uuc3RhdHVzID49IDIwMCAmJiByZXNwb25zZS5zdGF0dXMgPCAzMDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IHRydWUgfTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICByZXR1cm4geyBcbiAgICAgICAgICAgICAgICBzdWNjZXNzOiBmYWxzZSwgXG4gICAgICAgICAgICAgICAgZXJyb3I6ICdDb25uZWN0aW9uIGZhaWxlZC4gUGxlYXNlIGNoZWNrIHlvdXIgR2hvc3QgVVJMIGFuZCBBUEkgS2V5JyBcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICByZXR1cm4geyBcbiAgICAgICAgICAgICAgICBzdWNjZXNzOiBmYWxzZSwgXG4gICAgICAgICAgICAgICAgZXJyb3I6IGBFcnJvciBkdXJpbmcgY29ubmVjdGlvbiB0ZXN0OiAke2Vycm9yfWAgXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgfVxufSIsICJpbXBvcnQgeyBBcHAsIE1vZGFsLCBTZXR0aW5nLCBNYXJrZG93blJlbmRlcmVyLCBDb21wb25lbnQsIERyb3Bkb3duQ29tcG9uZW50IH0gZnJvbSAnb2JzaWRpYW4nO1xuaW1wb3J0ICcuL3N0eWxlcy5jc3MnO1xuXG5leHBvcnQgaW50ZXJmYWNlIFB1Ymxpc2hPcHRpb25zIHtcbiAgICBzdGF0dXM6ICdkcmFmdCcgfCAncHVibGlzaGVkJyB8ICdzY2hlZHVsZWQnO1xuICAgIHRhZ3M6IHN0cmluZ1tdO1xuICAgIGZlYXR1cmVkOiBib29sZWFuO1xuICAgIHZpc2liaWxpdHk6ICdwdWJsaWMnIHwgJ21lbWJlcnMnIHwgJ3BhaWQnO1xuICAgIHNjaGVkdWxlZFRpbWU6IERhdGUgfCBudWxsO1xufVxuXG5leHBvcnQgY2xhc3MgUHVibGlzaFByZXZpZXdNb2RhbCBleHRlbmRzIE1vZGFsIHtcbiAgICBwcml2YXRlIG1hcmtkb3duQ29udGVudDogc3RyaW5nO1xuICAgIHByaXZhdGUgdGl0bGU6IHN0cmluZztcbiAgICBwcml2YXRlIGluaXRpYWxPcHRpb25zOiBQdWJsaXNoT3B0aW9ucztcbiAgICBwcml2YXRlIG9uU3VibWl0OiAob3B0aW9uczogUHVibGlzaE9wdGlvbnMpID0+IHZvaWQ7XG4gICAgcHJpdmF0ZSBwcmV2aWV3RWw6IEhUTUxFbGVtZW50O1xuICAgIHByaXZhdGUgY3VycmVudE9wdGlvbnM6IFB1Ymxpc2hPcHRpb25zO1xuICAgIHByaXZhdGUgcHJldmlld0NvbXBvbmVudDogQ29tcG9uZW50O1xuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIGFwcDogQXBwLFxuICAgICAgICB0aXRsZTogc3RyaW5nLFxuICAgICAgICBtYXJrZG93bkNvbnRlbnQ6IHN0cmluZyxcbiAgICAgICAgaW5pdGlhbE9wdGlvbnM6IFB1Ymxpc2hPcHRpb25zLFxuICAgICAgICBvblN1Ym1pdDogKG9wdGlvbnM6IFB1Ymxpc2hPcHRpb25zKSA9PiB2b2lkXG4gICAgKSB7XG4gICAgICAgIHN1cGVyKGFwcCk7XG4gICAgICAgIHRoaXMudGl0bGUgPSB0aXRsZTtcbiAgICAgICAgdGhpcy5tYXJrZG93bkNvbnRlbnQgPSBtYXJrZG93bkNvbnRlbnQ7XG4gICAgICAgIHRoaXMuaW5pdGlhbE9wdGlvbnMgPSBpbml0aWFsT3B0aW9ucztcbiAgICAgICAgdGhpcy5vblN1Ym1pdCA9IG9uU3VibWl0O1xuICAgICAgICB0aGlzLmN1cnJlbnRPcHRpb25zID0geyBcbiAgICAgICAgICAgIC4uLmluaXRpYWxPcHRpb25zLFxuICAgICAgICAgICAgc2NoZWR1bGVkVGltZTogaW5pdGlhbE9wdGlvbnMuc2NoZWR1bGVkVGltZSB8fCBuZXcgRGF0ZSgpXG4gICAgICAgIH07XG4gICAgICAgIHRoaXMucHJldmlld0NvbXBvbmVudCA9IG5ldyBDb21wb25lbnQoKTtcbiAgICB9XG5cbiAgICBvbk9wZW4oKSB7XG4gICAgICAgIGNvbnN0IHsgY29udGVudEVsIH0gPSB0aGlzO1xuXG4gICAgICAgIC8vIENyZWF0ZSBjb250YWluZXIgd2l0aCBtYXggaGVpZ2h0IGFuZCBzY3JvbGxpbmdcbiAgICAgICAgY29udGVudEVsLmNyZWF0ZUVsKCdoMicsIHsgdGV4dDogJ1ByZXZpZXcgJiBQdWJsaXNoJyB9KTtcblxuICAgICAgICAvLyBBZGQgcHVibGlzaGluZyBvcHRpb25zXG4gICAgICAgIC8vIFRpdGxlIGlucHV0XG4gICAgICAgIG5ldyBTZXR0aW5nKGNvbnRlbnRFbClcbiAgICAgICAgICAgIC5zZXROYW1lKCdUaXRsZScpXG4gICAgICAgICAgICAuYWRkVGV4dCh0ZXh0ID0+IHRleHRcbiAgICAgICAgICAgICAgICAuc2V0VmFsdWUodGhpcy50aXRsZSlcbiAgICAgICAgICAgICAgICAub25DaGFuZ2UodmFsdWUgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnRpdGxlID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgfSkpO1xuXG4gICAgICAgIGxldCBzdGF0dXNEcm9wZG93bjogRHJvcGRvd25Db21wb25lbnQ7XG4gICAgICAgIGNvbnN0IHN0YXR1c1NldHRpbmcgPSBuZXcgU2V0dGluZyhjb250ZW50RWwpXG4gICAgICAgICAgICAuc2V0TmFtZSgnU3RhdHVzJylcbiAgICAgICAgICAgIC5hZGREcm9wZG93bihkcm9wZG93biA9PiB7XG4gICAgICAgICAgICAgICAgc3RhdHVzRHJvcGRvd24gPSBkcm9wZG93bjtcbiAgICAgICAgICAgICAgICByZXR1cm4gZHJvcGRvd25cbiAgICAgICAgICAgICAgICAgICAgLmFkZE9wdGlvbignZHJhZnQnLCAnRHJhZnQnKVxuICAgICAgICAgICAgICAgICAgICAuYWRkT3B0aW9uKCdwdWJsaXNoZWQnLCAnUHVibGlzaGVkJylcbiAgICAgICAgICAgICAgICAgICAgLmFkZE9wdGlvbignc2NoZWR1bGVkJywgJ1NjaGVkdWxlZCcpXG4gICAgICAgICAgICAgICAgICAgIC5zZXRWYWx1ZSh0aGlzLmN1cnJlbnRPcHRpb25zLnN0YXR1cylcbiAgICAgICAgICAgICAgICAgICAgLm9uQ2hhbmdlKHZhbHVlID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG5ld1N0YXR1cyA9IHZhbHVlIGFzICdkcmFmdCcgfCAncHVibGlzaGVkJyB8ICdzY2hlZHVsZWQnO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50T3B0aW9ucy5zdGF0dXMgPSBuZXdTdGF0dXM7XG4gICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFVwZGF0ZSBzY2hlZHVsZWRUaW1lIGJhc2VkIG9uIHN0YXR1c1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5ld1N0YXR1cyA9PT0gJ3NjaGVkdWxlZCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY2hlZHVsZVNldHRpbmcuc2V0dGluZ0VsLnN0eWxlLmRpc3BsYXkgPSAnZmxleCc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLmN1cnJlbnRPcHRpb25zLnNjaGVkdWxlZFRpbWUgfHwgdGhpcy5jdXJyZW50T3B0aW9ucy5zY2hlZHVsZWRUaW1lIDw9IG5ldyBEYXRlKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2V0IGRlZmF1bHQgc2NoZWR1bGVkIHRpbWUgdG8gMSBob3VyIGZyb20gbm93XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG9uZUhvdXJGcm9tTm93ID0gbmV3IERhdGUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25lSG91ckZyb21Ob3cuc2V0SG91cnMob25lSG91ckZyb21Ob3cuZ2V0SG91cnMoKSArIDEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnRPcHRpb25zLnNjaGVkdWxlZFRpbWUgPSBvbmVIb3VyRnJvbU5vdztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0ZUlucHV0LnZhbHVlID0gdGhpcy5mb3JtYXREYXRlRm9ySW5wdXQob25lSG91ckZyb21Ob3cpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NoZWR1bGVTZXR0aW5nLnNldHRpbmdFbC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudE9wdGlvbnMuc2NoZWR1bGVkVGltZSA9IG5ldyBEYXRlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gU2NoZWR1bGUgcG9zdCBzZXR0aW5nXG4gICAgICAgIGNvbnN0IHNjaGVkdWxlU2V0dGluZyA9IG5ldyBTZXR0aW5nKGNvbnRlbnRFbClcbiAgICAgICAgICAgIC5zZXROYW1lKCdTY2hlZHVsZSBQb3N0JylcbiAgICAgICAgICAgIC5zZXREZXNjKCdJbiB5b3VyIGxvY2FsIHRpbWUgem9uZSwgb25seSB1c2VkIHdoZW4gc3RhdHVzIGlzIFwic2NoZWR1bGVkXCInKTtcbiAgICAgICAgc2NoZWR1bGVTZXR0aW5nLnNldHRpbmdFbC5hZGRDbGFzcygnc2NoZWR1bGUtc2V0dGluZycpO1xuXG4gICAgICAgIGNvbnN0IGRhdGVJbnB1dCA9IHNjaGVkdWxlU2V0dGluZy5jb250cm9sRWwuY3JlYXRlRWwoJ2lucHV0Jywge1xuICAgICAgICAgICAgdHlwZTogJ2RhdGV0aW1lLWxvY2FsJyxcbiAgICAgICAgICAgIHZhbHVlOiB0aGlzLmZvcm1hdERhdGVGb3JJbnB1dCh0aGlzLmN1cnJlbnRPcHRpb25zLnNjaGVkdWxlZFRpbWUpXG4gICAgICAgIH0pO1xuICAgICAgICBcbiAgICAgICAgZGF0ZUlucHV0LnR5cGUgPSAnZGF0ZXRpbWUtbG9jYWwnO1xuICAgICAgICBkYXRlSW5wdXQudmFsdWUgPSB0aGlzLmZvcm1hdERhdGVGb3JJbnB1dCh0aGlzLmN1cnJlbnRPcHRpb25zLnNjaGVkdWxlZFRpbWUpO1xuICAgICAgICBkYXRlSW5wdXQuY2xhc3NOYW1lID0gJ3B1Ymxpc2gtcHJldmlldy1kYXRldGltZS1pbnB1dCc7XG4gICAgICAgIFxuICAgICAgICBkYXRlSW5wdXQuYWRkRXZlbnRMaXN0ZW5lcignaW5wdXQnLCAoZSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgdGFyZ2V0ID0gZS50YXJnZXQgYXMgSFRNTElucHV0RWxlbWVudDtcbiAgICAgICAgICAgIGlmICh0YXJnZXQudmFsdWUpIHtcbiAgICAgICAgICAgICAgICAvLyBDcmVhdGUgZGF0ZSBmcm9tIGxvY2FsIGlucHV0IHZhbHVlXG4gICAgICAgICAgICAgICAgY29uc3Qgc2NoZWR1bGVkRGF0ZSA9IG5ldyBEYXRlKHRhcmdldC52YWx1ZSk7XG4gICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50T3B0aW9ucy5zY2hlZHVsZWRUaW1lID0gc2NoZWR1bGVkRGF0ZTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc3Qgb25lSG91ckZyb21Ob3cgPSBuZXcgRGF0ZSgpO1xuICAgICAgICAgICAgICAgIG9uZUhvdXJGcm9tTm93LnNldEhvdXJzKG9uZUhvdXJGcm9tTm93LmdldEhvdXJzKCkgKyAxKTtcbiAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnRPcHRpb25zLnNjaGVkdWxlZFRpbWUgPSBvbmVIb3VyRnJvbU5vdztcbiAgICAgICAgICAgICAgICBkYXRlSW5wdXQudmFsdWUgPSB0aGlzLmZvcm1hdERhdGVGb3JJbnB1dChvbmVIb3VyRnJvbU5vdyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIEluaXRpYWxseSBzaG93L2hpZGUgc2NoZWR1bGUgc2V0dGluZyBiYXNlZCBvbiBjdXJyZW50IHN0YXR1c1xuICAgICAgICBpZiAodGhpcy5jdXJyZW50T3B0aW9ucy5zdGF0dXMgPT09ICdzY2hlZHVsZWQnKSB7XG4gICAgICAgICAgICBzY2hlZHVsZVNldHRpbmcuc2V0dGluZ0VsLmFkZENsYXNzKCd2aXNpYmxlJyk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBWaXNpYmlsaXR5IGRyb3Bkb3duXG4gICAgICAgIG5ldyBTZXR0aW5nKGNvbnRlbnRFbClcbiAgICAgICAgICAgIC5zZXROYW1lKCdWaXNpYmlsaXR5JylcbiAgICAgICAgICAgIC5zZXREZXNjKCdXaG8gY2FuIHNlZSB0aGlzIHBvc3QnKVxuICAgICAgICAgICAgLmFkZERyb3Bkb3duKGRyb3Bkb3duID0+IGRyb3Bkb3duXG4gICAgICAgICAgICAgICAgLmFkZE9wdGlvbigncHVibGljJywgJ0V2ZXJ5b25lJylcbiAgICAgICAgICAgICAgICAuYWRkT3B0aW9uKCdtZW1iZXJzJywgJ0FsbCBNZW1iZXJzJylcbiAgICAgICAgICAgICAgICAuYWRkT3B0aW9uKCdwYWlkJywgJ1BhaWQgTWVtYmVycyBPbmx5JylcbiAgICAgICAgICAgICAgICAuc2V0VmFsdWUodGhpcy5jdXJyZW50T3B0aW9ucy52aXNpYmlsaXR5KVxuICAgICAgICAgICAgICAgIC5vbkNoYW5nZSh2YWx1ZSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudE9wdGlvbnMudmlzaWJpbGl0eSA9IHZhbHVlIGFzICdwdWJsaWMnIHwgJ21lbWJlcnMnIHwgJ3BhaWQnO1xuICAgICAgICAgICAgICAgIH0pKTtcblxuICAgICAgICAvLyBGZWF0dXJlZCBwb3N0IHRvZ2dsZVxuICAgICAgICBuZXcgU2V0dGluZyhjb250ZW50RWwpXG4gICAgICAgICAgICAuc2V0TmFtZSgnRmVhdHVyZWQgUG9zdCcpXG4gICAgICAgICAgICAuc2V0RGVzYygnTWFyayB0aGlzIHBvc3QgYXMgZmVhdHVyZWQnKVxuICAgICAgICAgICAgLmFkZFRvZ2dsZSh0b2dnbGUgPT4gdG9nZ2xlXG4gICAgICAgICAgICAgICAgLnNldFZhbHVlKHRoaXMuY3VycmVudE9wdGlvbnMuZmVhdHVyZWQpXG4gICAgICAgICAgICAgICAgLm9uQ2hhbmdlKHZhbHVlID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50T3B0aW9ucy5mZWF0dXJlZCA9IHZhbHVlO1xuICAgICAgICAgICAgICAgIH0pKTtcblxuICAgICAgICAvLyBUYWdzIGlucHV0XG4gICAgICAgIGNvbnN0IHRhZ3NDb250YWluZXIgPSBjb250ZW50RWwuY3JlYXRlRGl2KCk7XG4gICAgICAgIG5ldyBTZXR0aW5nKHRhZ3NDb250YWluZXIpXG4gICAgICAgICAgICAuc2V0TmFtZSgnVGFncycpXG4gICAgICAgICAgICAuc2V0RGVzYygnQ29tbWEtc2VwYXJhdGVkIGxpc3Qgb2YgdGFncycpXG4gICAgICAgICAgICAuYWRkVGV4dCh0ZXh0ID0+IHRleHRcbiAgICAgICAgICAgICAgICAuc2V0VmFsdWUodGhpcy5jdXJyZW50T3B0aW9ucy50YWdzLmpvaW4oJywgJykpXG4gICAgICAgICAgICAgICAgLm9uQ2hhbmdlKHZhbHVlID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50T3B0aW9ucy50YWdzID0gdmFsdWUuc3BsaXQoJywnKVxuICAgICAgICAgICAgICAgICAgICAgICAgLm1hcCh0YWcgPT4gdGFnLnRyaW0oKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC5maWx0ZXIodGFnID0+IHRhZy5sZW5ndGggPiAwKTtcbiAgICAgICAgICAgICAgICB9KSk7XG5cbiAgICAgICAgLy8gQWRkIGJ1dHRvbnMgYXQgdGhlIGJvdHRvbVxuICAgICAgICBjb25zdCBidXR0b25Db250YWluZXIgPSBjb250ZW50RWwuY3JlYXRlRGl2KHsgY2xzOiAnbW9kYWwtYnV0dG9uLWNvbnRhaW5lciBwdWJsaXNoLXByZXZpZXctYnV0dG9ucycgfSk7XG5cbiAgICAgICAgY29uc3QgY2FuY2VsQnV0dG9uID0gYnV0dG9uQ29udGFpbmVyLmNyZWF0ZUVsKCdidXR0b24nLCB7IFxuICAgICAgICAgICAgdGV4dDogJ0NhbmNlbCcsXG4gICAgICAgICAgICBjbHM6ICdtb2RhbC1idXR0b24nXG4gICAgICAgIH0pO1xuICAgICAgICBjYW5jZWxCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB0aGlzLmNsb3NlKCkpO1xuXG4gICAgICAgIGNvbnN0IHB1Ymxpc2hCdXR0b24gPSBidXR0b25Db250YWluZXIuY3JlYXRlRWwoJ2J1dHRvbicsIHsgXG4gICAgICAgICAgICB0ZXh0OiAnUHVibGlzaCcsXG4gICAgICAgICAgICBjbHM6ICdtb2RhbC1idXR0b24gbW9kLWN0YSdcbiAgICAgICAgfSk7XG4gICAgICAgIHB1Ymxpc2hCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLm9uU3VibWl0KHRoaXMuY3VycmVudE9wdGlvbnMpO1xuICAgICAgICAgICAgdGhpcy5jbG9zZSgpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGZvcm1hdERhdGVGb3JJbnB1dChkYXRlOiBEYXRlIHwgbnVsbCk6IHN0cmluZyB7XG4gICAgICAgIGNvbnN0IGlucHV0RGF0ZSA9IGRhdGUgfHwgbmV3IERhdGUoKTtcbiAgICAgICAgLy8gR2V0IGxvY2FsIElTTyBzdHJpbmcgKFlZWVktTU0tRERUSEg6bW0pIGJ5IGFkanVzdGluZyBmb3IgdGltZXpvbmVcbiAgICAgICAgY29uc3QgeWVhciA9IGlucHV0RGF0ZS5nZXRGdWxsWWVhcigpO1xuICAgICAgICBjb25zdCBtb250aCA9IFN0cmluZyhpbnB1dERhdGUuZ2V0TW9udGgoKSArIDEpLnBhZFN0YXJ0KDIsICcwJyk7XG4gICAgICAgIGNvbnN0IGRheSA9IFN0cmluZyhpbnB1dERhdGUuZ2V0RGF0ZSgpKS5wYWRTdGFydCgyLCAnMCcpO1xuICAgICAgICBjb25zdCBob3VycyA9IFN0cmluZyhpbnB1dERhdGUuZ2V0SG91cnMoKSkucGFkU3RhcnQoMiwgJzAnKTtcbiAgICAgICAgY29uc3QgbWludXRlcyA9IFN0cmluZyhpbnB1dERhdGUuZ2V0TWludXRlcygpKS5wYWRTdGFydCgyLCAnMCcpO1xuICAgICAgICByZXR1cm4gYCR7eWVhcn0tJHttb250aH0tJHtkYXl9VCR7aG91cnN9OiR7bWludXRlc31gO1xuICAgIH1cblxuICAgIG9uQ2xvc2UoKSB7XG4gICAgICAgIGNvbnN0IHsgY29udGVudEVsIH0gPSB0aGlzO1xuICAgICAgICBjb250ZW50RWwuZW1wdHkoKTtcbiAgICAgICAgdGhpcy5wcmV2aWV3Q29tcG9uZW50LnVubG9hZCgpO1xuICAgIH1cbn0gIl0sCiAgIm1hcHBpbmdzIjogIjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLHVCQUF3Rzs7O0FDQXhHLHNCQUFvRjtBQVc3RSxJQUFNLHNCQUFOLGNBQWtDLHNCQUFNO0FBQUEsRUFTM0MsWUFDSSxLQUNBLE9BQ0EsaUJBQ0EsZ0JBQ0EsVUFDRjtBQUNFLFVBQU0sR0FBRztBQUNULFNBQUssUUFBUTtBQUNiLFNBQUssa0JBQWtCO0FBQ3ZCLFNBQUssaUJBQWlCO0FBQ3RCLFNBQUssV0FBVztBQUNoQixTQUFLLGlCQUFpQjtBQUFBLE1BQ2xCLEdBQUc7QUFBQSxNQUNILGVBQWUsZUFBZSxpQkFBaUIsSUFBSSxLQUFLO0FBQUEsSUFDNUQ7QUFDQSxTQUFLLG1CQUFtQixJQUFJLDBCQUFVO0FBQUEsRUFDMUM7QUFBQSxFQUVBLFNBQVM7QUFDTCxVQUFNLEVBQUUsY0FBYztBQUd0QixjQUFVLFNBQVMsTUFBTSxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFJdEQsUUFBSSx3QkFBUSxTQUFTLEVBQ2hCLFFBQVEsT0FBTyxFQUNmLFFBQVEsVUFBUSxLQUNaLFNBQVMsS0FBSyxLQUFLLEVBQ25CLFNBQVMsV0FBUztBQUNmLFdBQUssUUFBUTtBQUFBLElBQ2pCLENBQUMsQ0FBQztBQUVWLFFBQUk7QUFDSixVQUFNLGdCQUFnQixJQUFJLHdCQUFRLFNBQVMsRUFDdEMsUUFBUSxRQUFRLEVBQ2hCLFlBQVksY0FBWTtBQUNyQix1QkFBaUI7QUFDakIsYUFBTyxTQUNGLFVBQVUsU0FBUyxPQUFPLEVBQzFCLFVBQVUsYUFBYSxXQUFXLEVBQ2xDLFVBQVUsYUFBYSxXQUFXLEVBQ2xDLFNBQVMsS0FBSyxlQUFlLE1BQU0sRUFDbkMsU0FBUyxXQUFTO0FBQ2YsY0FBTSxZQUFZO0FBQ2xCLGFBQUssZUFBZSxTQUFTO0FBRzdCLFlBQUksY0FBYyxhQUFhO0FBQzNCLDBCQUFnQixVQUFVLE1BQU0sVUFBVTtBQUMxQyxjQUFJLENBQUMsS0FBSyxlQUFlLGlCQUFpQixLQUFLLGVBQWUsaUJBQWlCLElBQUksS0FBSyxHQUFHO0FBRXZGLGtCQUFNLGlCQUFpQixJQUFJLEtBQUs7QUFDaEMsMkJBQWUsU0FBUyxlQUFlLFNBQVMsSUFBSSxDQUFDO0FBQ3JELGlCQUFLLGVBQWUsZ0JBQWdCO0FBQ3BDLHNCQUFVLFFBQVEsS0FBSyxtQkFBbUIsY0FBYztBQUFBLFVBQzVEO0FBQUEsUUFDSixPQUFPO0FBQ0gsMEJBQWdCLFVBQVUsTUFBTSxVQUFVO0FBQzFDLGVBQUssZUFBZSxnQkFBZ0IsSUFBSSxLQUFLO0FBQUEsUUFDakQ7QUFBQSxNQUNKLENBQUM7QUFBQSxJQUNULENBQUM7QUFHTCxVQUFNLGtCQUFrQixJQUFJLHdCQUFRLFNBQVMsRUFDeEMsUUFBUSxlQUFlLEVBQ3ZCLFFBQVEsK0RBQStEO0FBQzVFLG9CQUFnQixVQUFVLFNBQVMsa0JBQWtCO0FBRXJELFVBQU0sWUFBWSxnQkFBZ0IsVUFBVSxTQUFTLFNBQVM7QUFBQSxNQUMxRCxNQUFNO0FBQUEsTUFDTixPQUFPLEtBQUssbUJBQW1CLEtBQUssZUFBZSxhQUFhO0FBQUEsSUFDcEUsQ0FBQztBQUVELGNBQVUsT0FBTztBQUNqQixjQUFVLFFBQVEsS0FBSyxtQkFBbUIsS0FBSyxlQUFlLGFBQWE7QUFDM0UsY0FBVSxZQUFZO0FBRXRCLGNBQVUsaUJBQWlCLFNBQVMsQ0FBQyxNQUFNO0FBQ3ZDLFlBQU0sU0FBUyxFQUFFO0FBQ2pCLFVBQUksT0FBTyxPQUFPO0FBRWQsY0FBTSxnQkFBZ0IsSUFBSSxLQUFLLE9BQU8sS0FBSztBQUMzQyxhQUFLLGVBQWUsZ0JBQWdCO0FBQUEsTUFDeEMsT0FBTztBQUNILGNBQU0saUJBQWlCLElBQUksS0FBSztBQUNoQyx1QkFBZSxTQUFTLGVBQWUsU0FBUyxJQUFJLENBQUM7QUFDckQsYUFBSyxlQUFlLGdCQUFnQjtBQUNwQyxrQkFBVSxRQUFRLEtBQUssbUJBQW1CLGNBQWM7QUFBQSxNQUM1RDtBQUFBLElBQ0osQ0FBQztBQUdELFFBQUksS0FBSyxlQUFlLFdBQVcsYUFBYTtBQUM1QyxzQkFBZ0IsVUFBVSxTQUFTLFNBQVM7QUFBQSxJQUNoRDtBQUdBLFFBQUksd0JBQVEsU0FBUyxFQUNoQixRQUFRLFlBQVksRUFDcEIsUUFBUSx1QkFBdUIsRUFDL0IsWUFBWSxjQUFZLFNBQ3BCLFVBQVUsVUFBVSxVQUFVLEVBQzlCLFVBQVUsV0FBVyxhQUFhLEVBQ2xDLFVBQVUsUUFBUSxtQkFBbUIsRUFDckMsU0FBUyxLQUFLLGVBQWUsVUFBVSxFQUN2QyxTQUFTLFdBQVM7QUFDZixXQUFLLGVBQWUsYUFBYTtBQUFBLElBQ3JDLENBQUMsQ0FBQztBQUdWLFFBQUksd0JBQVEsU0FBUyxFQUNoQixRQUFRLGVBQWUsRUFDdkIsUUFBUSw0QkFBNEIsRUFDcEMsVUFBVSxZQUFVLE9BQ2hCLFNBQVMsS0FBSyxlQUFlLFFBQVEsRUFDckMsU0FBUyxXQUFTO0FBQ2YsV0FBSyxlQUFlLFdBQVc7QUFBQSxJQUNuQyxDQUFDLENBQUM7QUFHVixVQUFNLGdCQUFnQixVQUFVLFVBQVU7QUFDMUMsUUFBSSx3QkFBUSxhQUFhLEVBQ3BCLFFBQVEsTUFBTSxFQUNkLFFBQVEsOEJBQThCLEVBQ3RDLFFBQVEsVUFBUSxLQUNaLFNBQVMsS0FBSyxlQUFlLEtBQUssS0FBSyxJQUFJLENBQUMsRUFDNUMsU0FBUyxXQUFTO0FBQ2YsV0FBSyxlQUFlLE9BQU8sTUFBTSxNQUFNLEdBQUcsRUFDckMsSUFBSSxTQUFPLElBQUksS0FBSyxDQUFDLEVBQ3JCLE9BQU8sU0FBTyxJQUFJLFNBQVMsQ0FBQztBQUFBLElBQ3JDLENBQUMsQ0FBQztBQUdWLFVBQU0sa0JBQWtCLFVBQVUsVUFBVSxFQUFFLEtBQUssaURBQWlELENBQUM7QUFFckcsVUFBTSxlQUFlLGdCQUFnQixTQUFTLFVBQVU7QUFBQSxNQUNwRCxNQUFNO0FBQUEsTUFDTixLQUFLO0FBQUEsSUFDVCxDQUFDO0FBQ0QsaUJBQWEsaUJBQWlCLFNBQVMsTUFBTSxLQUFLLE1BQU0sQ0FBQztBQUV6RCxVQUFNLGdCQUFnQixnQkFBZ0IsU0FBUyxVQUFVO0FBQUEsTUFDckQsTUFBTTtBQUFBLE1BQ04sS0FBSztBQUFBLElBQ1QsQ0FBQztBQUNELGtCQUFjLGlCQUFpQixTQUFTLE1BQU07QUFDMUMsV0FBSyxTQUFTLEtBQUssY0FBYztBQUNqQyxXQUFLLE1BQU07QUFBQSxJQUNmLENBQUM7QUFBQSxFQUNMO0FBQUEsRUFFQSxBQUFRLG1CQUFtQixNQUEyQjtBQUNsRCxVQUFNLFlBQVksUUFBUSxJQUFJLEtBQUs7QUFFbkMsVUFBTSxPQUFPLFVBQVUsWUFBWTtBQUNuQyxVQUFNLFFBQVEsT0FBTyxVQUFVLFNBQVMsSUFBSSxDQUFDLEVBQUUsU0FBUyxHQUFHLEdBQUc7QUFDOUQsVUFBTSxNQUFNLE9BQU8sVUFBVSxRQUFRLENBQUMsRUFBRSxTQUFTLEdBQUcsR0FBRztBQUN2RCxVQUFNLFFBQVEsT0FBTyxVQUFVLFNBQVMsQ0FBQyxFQUFFLFNBQVMsR0FBRyxHQUFHO0FBQzFELFVBQU0sVUFBVSxPQUFPLFVBQVUsV0FBVyxDQUFDLEVBQUUsU0FBUyxHQUFHLEdBQUc7QUFDOUQsV0FBTyxHQUFHLFFBQVEsU0FBUyxPQUFPLFNBQVM7QUFBQSxFQUMvQztBQUFBLEVBRUEsVUFBVTtBQUNOLFVBQU0sRUFBRSxjQUFjO0FBQ3RCLGNBQVUsTUFBTTtBQUNoQixTQUFLLGlCQUFpQixPQUFPO0FBQUEsRUFDakM7QUFDSjs7O0FEMUtBLElBQU0sbUJBQXdDO0FBQUEsRUFDMUMsVUFBVTtBQUFBLEVBQ1YsUUFBUTtBQUFBLEVBQ1IsaUJBQWlCO0FBQUEsRUFDakIsd0JBQXdCO0FBQUEsRUFDeEIsaUJBQWlCO0FBQUEsRUFDakIsbUJBQW1CO0FBQ3ZCO0FBRUEsSUFBcUIsb0JBQXJCLGNBQStDLHdCQUFPO0FBQUEsRUFHbEQsTUFBTSxTQUFTO0FBQ1gsVUFBTSxLQUFLLGFBQWE7QUFFeEIsU0FBSyxjQUFjLElBQUksc0JBQXNCLEtBQUssS0FBSyxJQUFJLENBQUM7QUFHNUQsU0FBSyxXQUFXO0FBQUEsTUFDWixJQUFJO0FBQUEsTUFDSixNQUFNO0FBQUEsTUFDTixlQUFlLENBQUMsYUFBc0I7QUFFbEMsY0FBTSxhQUFhLEtBQUssSUFBSSxVQUFVLG9CQUFvQiw2QkFBWTtBQUN0RSxZQUFJLENBQUMsWUFBWTtBQUNiLGlCQUFPO0FBQUEsUUFDWDtBQUdBLFlBQUksVUFBVTtBQUNWLGlCQUFPLENBQUMsQ0FBQyxLQUFLLFNBQVMsWUFBWSxDQUFDLENBQUMsS0FBSyxTQUFTO0FBQUEsUUFDdkQ7QUFHQSxhQUFLLG1CQUFtQixVQUFVO0FBQ2xDLGVBQU87QUFBQSxNQUNYO0FBQUEsSUFDSixDQUFDO0FBR0QsU0FBSyxXQUFXO0FBQUEsTUFDWixJQUFJO0FBQUEsTUFDSixNQUFNO0FBQUEsTUFDTixlQUFlLENBQUMsYUFBc0I7QUFDbEMsWUFBSSxVQUFVO0FBQ1YsaUJBQU8sS0FBSyxTQUFTLHFCQUNkLENBQUMsQ0FBQyxLQUFLLFNBQVMsWUFDaEIsQ0FBQyxDQUFDLEtBQUssU0FBUztBQUFBLFFBQzNCO0FBRUEsYUFBSyxrQkFBa0I7QUFDdkIsZUFBTztBQUFBLE1BQ1g7QUFBQSxJQUNKLENBQUM7QUFHRCxRQUFJLEtBQUssU0FBUyxtQkFBbUI7QUFDakMsV0FBSyxrQkFBa0I7QUFBQSxJQUMzQjtBQUFBLEVBQ0o7QUFBQSxFQUVBLGlCQUFpQixTQUE0RTtBQUV6RixVQUFNLGNBQStCO0FBQUEsTUFDakMsUUFBUTtBQUFBLE1BQ1IsTUFBTSxDQUFDO0FBQUEsTUFDUCxVQUFVO0FBQUEsTUFDVixZQUFZO0FBQUEsSUFDaEI7QUFHQSxRQUFJLENBQUMsUUFBUSxXQUFXLEtBQUssR0FBRztBQUM1QixhQUFPLEVBQUUsYUFBYSxpQkFBaUIsUUFBUTtBQUFBLElBQ25EO0FBR0EsVUFBTSxnQkFBZ0IsUUFBUSxRQUFRLE9BQU8sQ0FBQztBQUM5QyxRQUFJLGtCQUFrQixJQUFJO0FBQ3RCLGFBQU8sRUFBRSxhQUFhLGlCQUFpQixRQUFRO0FBQUEsSUFDbkQ7QUFHQSxVQUFNLGtCQUFrQixRQUFRLFVBQVUsR0FBRyxhQUFhLEVBQUUsS0FBSztBQUNqRSxVQUFNLGtCQUFrQixRQUFRLFVBQVUsZ0JBQWdCLENBQUMsRUFBRSxLQUFLO0FBR2xFLFVBQU0sUUFBUSxnQkFBZ0IsTUFBTSxJQUFJO0FBQ3hDLGFBQVMsSUFBSSxHQUFHLElBQUksTUFBTSxRQUFRLEtBQUs7QUFDbkMsWUFBTSxPQUFPLE1BQU0sR0FBRyxLQUFLO0FBRzNCLFVBQUksQ0FBQztBQUFNO0FBR1gsVUFBSSxLQUFLLFNBQVMsR0FBRyxHQUFHO0FBQ3BCLGNBQU0sQ0FBQyxLQUFLLFNBQVMsS0FBSyxNQUFNLEtBQUssQ0FBQyxFQUFFLElBQUksT0FBSyxFQUFFLEtBQUssQ0FBQztBQUV6RCxnQkFBUSxJQUFJLFlBQVk7QUFBQSxlQUNmO0FBQ0Qsd0JBQVksUUFBUTtBQUNwQjtBQUFBLGVBQ0M7QUFDRCx3QkFBWSxTQUFTLFVBQVUsVUFBVSxVQUFVLGNBQWMsY0FBYztBQUMvRTtBQUFBLGVBQ0M7QUFDRCx3QkFBWSxPQUFPO0FBQ25CO0FBQUEsZUFDQztBQUNELHdCQUFZLFdBQVcsTUFBTSxZQUFZLE1BQU07QUFDL0M7QUFBQSxlQUNDO0FBQ0Qsa0JBQU0sa0JBQWtCLE1BQU0sWUFBWTtBQUMxQyxnQkFBSSxDQUFDLFVBQVUsV0FBVyxNQUFNLEVBQUUsU0FBUyxlQUFlLEdBQUc7QUFDekQsMEJBQVksYUFBYTtBQUFBLFlBQzdCO0FBQ0E7QUFBQSxlQUNDO0FBRUQsa0JBQU0sVUFBb0IsQ0FBQztBQUczQixnQkFBSSxPQUFPO0FBQ1Asb0JBQU0sTUFBTSxHQUFHLEVBQUUsUUFBUSxTQUFPO0FBQzVCLHNCQUFNLGFBQWEsSUFBSSxLQUFLO0FBQzVCLG9CQUFJO0FBQVksMEJBQVEsS0FBSyxVQUFVO0FBQUEsY0FDM0MsQ0FBQztBQUFBLFlBQ0wsT0FFSztBQUNELGtCQUFJLElBQUksSUFBSTtBQUNaLHFCQUFPLElBQUksTUFBTSxVQUFVLE1BQU0sR0FBRyxLQUFLLEVBQUUsV0FBVyxHQUFHLEdBQUc7QUFDeEQsc0JBQU0sTUFBTSxNQUFNLEdBQUcsS0FBSyxFQUFFLFVBQVUsQ0FBQyxFQUFFLEtBQUs7QUFDOUMsb0JBQUk7QUFBSywwQkFBUSxLQUFLLEdBQUc7QUFDekI7QUFBQSxjQUNKO0FBQUEsWUFDSjtBQUVBLHdCQUFZLE9BQU87QUFDbkI7QUFBQTtBQUFBLE1BRVo7QUFBQSxJQUNKO0FBRUEsV0FBTyxFQUFFLGFBQWEsZ0JBQWdCO0FBQUEsRUFDMUM7QUFBQSxFQUVBLDBCQUEwQixTQUF5QjtBQUUvQyxXQUFPLFFBQVEsUUFBUSxtQkFBbUIsU0FBUztBQUFBLEVBQ3ZEO0FBQUEsRUFFQSxpQkFBaUIsU0FBeUI7QUFJdEMsV0FBTyxRQUFRLFFBQVEseUJBQXlCLENBQUMsT0FBTyxTQUFTO0FBRTdELGFBQU87QUFBQSxJQUNYLENBQUM7QUFBQSxFQUNMO0FBQUEsRUFFQSxNQUFNLGtCQUFrQixTQUFpQixNQUFxQztBQUMxRSxVQUFNLGFBQWE7QUFDbkIsVUFBTSxhQUF1QixDQUFDO0FBQzlCLFFBQUk7QUFHSixXQUFRLFNBQVEsV0FBVyxLQUFLLE9BQU8sT0FBTyxNQUFNO0FBQ2hELGlCQUFXLEtBQUssTUFBTSxFQUFFO0FBQUEsSUFDNUI7QUFFQSxRQUFJLFdBQVcsV0FBVyxHQUFHO0FBRXpCLGFBQU87QUFBQSxJQUNYO0FBR0EsVUFBTSxXQUFXLG9CQUFJLElBQW9CO0FBRXpDLGVBQVcsYUFBYSxZQUFZO0FBQ2hDLFVBQUk7QUFDQSxjQUFNLFdBQVcsTUFBTSxLQUFLLG1CQUFtQixXQUFXLElBQUk7QUFDOUQsWUFBSSxVQUFVO0FBQ1YsbUJBQVMsSUFBSSxXQUFXLFFBQVE7QUFBQSxRQUNwQztBQUFBLE1BQ0osU0FBUyxPQUFQO0FBQ0UsWUFBSSx3QkFBTywwQkFBMEIsY0FBYyxPQUFPO0FBQUEsTUFDOUQ7QUFBQSxJQUNKO0FBR0EsUUFBSSxtQkFBbUI7QUFDdkIsZUFBVyxDQUFDLFdBQVcsYUFBYSxTQUFTLFFBQVEsR0FBRztBQUNwRCxZQUFNLFFBQVEsSUFBSSxPQUFPLFVBQVUsS0FBSyxhQUFhLFNBQVMsV0FBVyxHQUFHO0FBQzVFLHlCQUFtQixpQkFBaUIsUUFBUSxPQUFPLE9BQU8sV0FBVztBQUFBLElBQ3pFO0FBR0EsdUJBQW1CLEtBQUssaUJBQWlCLGdCQUFnQjtBQUV6RCxXQUFPO0FBQUEsRUFDWDtBQUFBLEVBRUEsYUFBYSxRQUF3QjtBQUNqQyxXQUFPLE9BQU8sUUFBUSx1QkFBdUIsTUFBTTtBQUFBLEVBQ3ZEO0FBQUEsRUFFQSxNQUFNLG1CQUFtQixXQUFtQixNQUE0QztBQUNwRixRQUFJO0FBRUEsWUFBTSxPQUFPLEtBQUssSUFBSSxNQUFNLHNCQUV4QixLQUFLLGlCQUFpQixXQUFXLElBQUksQ0FDekM7QUFFQSxVQUFJLENBQUMsUUFBUSxDQUFFLGlCQUFnQix5QkFBUTtBQUNuQyxZQUFJLHdCQUFPLG9CQUFvQixXQUFXO0FBQzFDLGVBQU87QUFBQSxNQUNYO0FBR0EsWUFBTSxXQUFXLE1BQU0sS0FBSyxJQUFJLE1BQU0sV0FBVyxJQUFJO0FBR3JELFlBQU0sWUFBWSxNQUFNLEtBQUssa0JBQWtCLEtBQUssTUFBTSxRQUFRO0FBQ2xFLFVBQUksV0FBVztBQUNYLGVBQU87QUFBQSxNQUNYLE9BQU87QUFDSCxZQUFJLHdCQUFPLHdCQUF3QjtBQUNuQyxlQUFPO0FBQUEsTUFDWDtBQUFBLElBQ0osU0FBUyxPQUFQO0FBQ0UsVUFBSSx3QkFBTyx5QkFBeUIsY0FBYyxPQUFPO0FBQ3pELGFBQU87QUFBQSxJQUNYO0FBQUEsRUFDSjtBQUFBLEVBRUEsaUJBQWlCLFdBQW1CLE1BQTRCO0FBbFFwRTtBQW9RUSxRQUFJLFVBQVUsV0FBVyxHQUFHLEdBQUc7QUFDM0IsYUFBTztBQUFBLElBQ1g7QUFHQSxVQUFNLGtCQUFrQixrQkFBSyxTQUFMLG1CQUFXLFdBQVgsbUJBQW1CLFNBQVE7QUFDbkQsVUFBTSxpQkFBaUIsR0FBRyxtQkFBbUI7QUFHN0MsUUFBSSxLQUFLLElBQUksTUFBTSxzQkFBc0IsY0FBYyxHQUFHO0FBQ3RELGFBQU87QUFBQSxJQUNYO0FBR0EsV0FBTyxHQUFHLEtBQUssU0FBUyxtQkFBbUI7QUFBQSxFQUMvQztBQUFBLEVBRUEsTUFBTSxrQkFBa0IsVUFBa0IsVUFBK0M7QUFyUjdGO0FBc1JRLFFBQUk7QUFDQSxZQUFNLEVBQUUsVUFBVSxXQUFXLEtBQUs7QUFFbEMsVUFBSSxDQUFDLFlBQVksQ0FBQyxRQUFRO0FBQ3RCLFlBQUksd0JBQU8sb0NBQW9DO0FBQy9DLGVBQU87QUFBQSxNQUNYO0FBR0EsWUFBTSxVQUFVLFNBQVMsS0FBSyxFQUFFLFFBQVEsT0FBTyxFQUFFO0FBR2pELFlBQU0sQ0FBQyxJQUFJLFVBQVUsT0FBTyxNQUFNLEdBQUc7QUFDckMsVUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRO0FBQ2hCLFlBQUksd0JBQU8sd0JBQXdCO0FBQ25DLGVBQU87QUFBQSxNQUNYO0FBR0EsWUFBTSxTQUFTLEdBQUc7QUFJbEIsWUFBTSxXQUFXLDJCQUEyQixLQUFLLE9BQU8sRUFBRSxTQUFTLEVBQUUsRUFBRSxVQUFVLENBQUM7QUFFbEYsWUFBTSxhQUNGLEtBQUs7QUFBQSx5REFDcUQ7QUFBQSxnQkFDekMsS0FBSyxZQUFZLFFBQVE7QUFBQTtBQUFBO0FBRTlDLFlBQU0sYUFBYTtBQUFBLElBQVM7QUFBQTtBQUc1QixZQUFNLGVBQWUsSUFBSSxZQUFZLEVBQUUsT0FBTyxVQUFVO0FBQ3hELFlBQU0sZUFBZSxJQUFJLFlBQVksRUFBRSxPQUFPLFVBQVU7QUFHeEQsWUFBTSxpQkFBaUIsSUFBSSxXQUN2QixhQUFhLGFBQWEsU0FBUyxhQUFhLGFBQWEsVUFDakU7QUFDQSxxQkFBZSxJQUFJLElBQUksV0FBVyxZQUFZLEdBQUcsQ0FBQztBQUNsRCxxQkFBZSxJQUFJLElBQUksV0FBVyxRQUFRLEdBQUcsYUFBYSxVQUFVO0FBQ3BFLHFCQUFlLElBQUksSUFBSSxXQUFXLFlBQVksR0FBRyxhQUFhLGFBQWEsU0FBUyxVQUFVO0FBRzlGLFlBQU0sWUFBWSxLQUFLLHdCQUF3QixJQUFJLE1BQU07QUFFekQsVUFBSTtBQUVBLGNBQU0sV0FBVyxNQUFNLGlDQUFXO0FBQUEsVUFDOUIsS0FBSztBQUFBLFVBQ0wsUUFBUTtBQUFBLFVBQ1IsU0FBUztBQUFBLFlBQ0wsZ0JBQWdCLGlDQUFpQztBQUFBLFlBQ2pELGlCQUFpQjtBQUFBLFVBQ3JCO0FBQUEsVUFDQSxNQUFNO0FBQUEsVUFDTixPQUFPO0FBQUEsUUFDWCxDQUFDO0FBRUQsWUFBSSxTQUFTLFVBQVUsT0FBTyxTQUFTLFNBQVMsS0FBSztBQUNqRCxpQkFBTyw0QkFBUyxTQUFULG1CQUFlLFdBQWYsbUJBQXdCLE9BQXhCLG1CQUE0QixRQUFPO0FBQUEsUUFDOUMsT0FBTztBQUNILGlCQUFPO0FBQUEsUUFDWDtBQUFBLE1BQ0osU0FBUyxPQUFQO0FBRUUsZUFBTyxNQUFNLEtBQUssbUJBQW1CLFFBQVEsSUFBSSxRQUFRLFVBQVUsUUFBUTtBQUFBLE1BQy9FO0FBQUEsSUFDSixTQUFTLE9BQVA7QUFDRSxVQUFJLHdCQUFPLHlCQUF5QixhQUFhLE9BQU87QUFDeEQsYUFBTztBQUFBLElBQ1g7QUFBQSxFQUNKO0FBQUEsRUFFQSxNQUFNLG1CQUFtQixLQUFhLElBQVksUUFBZ0IsVUFBa0IsVUFBK0M7QUFDL0gsV0FBTyxJQUFJLFFBQVEsQ0FBQyxZQUFZO0FBQzVCLFVBQUk7QUFHQSxjQUFNLGNBQWMsT0FBTztBQUUzQixZQUFJLENBQUMsYUFBYTtBQUNkLGtCQUFRLElBQUk7QUFDWjtBQUFBLFFBQ0o7QUFFQSxjQUFNLFFBQVEsWUFBWSxPQUFPO0FBQ2pDLGNBQU0sU0FBUyxZQUFZLFFBQVE7QUFDbkMsY0FBTSxTQUFTLElBQUksSUFBSSxHQUFHO0FBRzFCLGNBQU0sV0FBVywyQkFBMkIsS0FBSyxPQUFPLEVBQUUsU0FBUyxFQUFFLEVBQUUsVUFBVSxDQUFDO0FBR2xGLGNBQU0sTUFBTSxLQUFLLE1BQU0sS0FBSyxJQUFJLElBQUksR0FBSTtBQUN4QyxjQUFNLHFCQUFxQixNQUFNLElBQUk7QUFHckMsY0FBTSxTQUFTO0FBQUEsVUFDWCxLQUFLO0FBQUEsVUFDTCxLQUFLO0FBQUEsVUFDTCxLQUFLO0FBQUEsUUFDVDtBQUVBLGNBQU0sVUFBVTtBQUFBLFVBQ1osS0FBSztBQUFBLFVBQ0wsS0FBSztBQUFBLFVBQ0wsS0FBSztBQUFBLFFBQ1Q7QUFHQSxjQUFNLGVBQWUsQ0FBQyxRQUFhO0FBQy9CLGdCQUFNLE1BQU0sS0FBSyxVQUFVLEdBQUc7QUFDOUIsaUJBQU8sT0FBTyxXQUFXLFFBQVEsRUFDNUIsT0FBTyxHQUFHLEVBQ1YsT0FBTyxRQUFRLEVBQ2YsUUFBUSxPQUFPLEdBQUcsRUFDbEIsUUFBUSxPQUFPLEdBQUcsRUFDbEIsUUFBUSxRQUFRLEVBQUU7QUFBQSxRQUMzQjtBQUVBLGNBQU0sZUFBZSxPQUFPLEtBQUssS0FBSyxVQUFVLE1BQU0sQ0FBQyxFQUFFLFNBQVMsUUFBUSxFQUNyRSxRQUFRLE9BQU8sR0FBRyxFQUNsQixRQUFRLE9BQU8sR0FBRyxFQUNsQixRQUFRLFFBQVEsRUFBRTtBQUV2QixjQUFNLGdCQUFnQixPQUFPLEtBQUssS0FBSyxVQUFVLE9BQU8sQ0FBQyxFQUFFLFNBQVMsUUFBUSxFQUN2RSxRQUFRLE9BQU8sR0FBRyxFQUNsQixRQUFRLE9BQU8sR0FBRyxFQUNsQixRQUFRLFFBQVEsRUFBRTtBQUd2QixjQUFNLGlCQUFpQixHQUFHLGdCQUFnQjtBQUMxQyxjQUFNLFlBQVksT0FBTyxXQUFXLFVBQVUsT0FBTyxLQUFLLFFBQVEsS0FBSyxDQUFDLEVBQ25FLE9BQU8sY0FBYyxFQUNyQixPQUFPLFFBQVEsRUFDZixRQUFRLE9BQU8sR0FBRyxFQUNsQixRQUFRLE9BQU8sR0FBRyxFQUNsQixRQUFRLFFBQVEsRUFBRTtBQUd2QixjQUFNLFFBQVEsR0FBRyxnQkFBZ0IsaUJBQWlCO0FBR2xELGNBQU0sYUFDRixLQUFLO0FBQUEseURBQ3FEO0FBQUEsZ0JBQ3pDLEtBQUssWUFBWSxRQUFRO0FBQUE7QUFBQTtBQUU5QyxjQUFNLGFBQWE7QUFBQSxJQUFTO0FBQUE7QUFHNUIsY0FBTSxlQUFlLE9BQU8sS0FBSyxVQUFVO0FBQzNDLGNBQU0sZUFBZSxPQUFPLEtBQUssVUFBVTtBQUMzQyxjQUFNLGFBQWEsT0FBTyxLQUFLLFFBQVE7QUFHdkMsY0FBTSxhQUFhLE9BQU8sT0FBTztBQUFBLFVBQzdCO0FBQUEsVUFDQTtBQUFBLFVBQ0E7QUFBQSxRQUNKLENBQUM7QUFFRCxjQUFNLFVBQVU7QUFBQSxVQUNaLFVBQVUsT0FBTztBQUFBLFVBQ2pCLE1BQU0sT0FBTyxXQUFXLE9BQU87QUFBQSxVQUMvQixRQUFRO0FBQUEsVUFDUixTQUFTO0FBQUEsWUFDTCxnQkFBZ0IsaUNBQWlDO0FBQUEsWUFDakQsa0JBQWtCLFdBQVc7QUFBQSxZQUM3QixpQkFBaUIsU0FBUztBQUFBLFVBQzlCO0FBQUEsUUFDSjtBQUVBLGNBQU0sTUFBTSxNQUFNLFFBQVEsU0FBUyxDQUFDLFFBQWE7QUFDN0MsY0FBSSxPQUFPO0FBRVgsY0FBSSxHQUFHLFFBQVEsQ0FBQyxVQUFrQjtBQUM5QixvQkFBUTtBQUFBLFVBQ1osQ0FBQztBQUVELGNBQUksR0FBRyxPQUFPLE1BQU07QUE1Y3hDO0FBNmN3QixnQkFBSSxJQUFJLGNBQWMsT0FBTyxJQUFJLGFBQWEsS0FBSztBQUMvQyxrQkFBSTtBQUNBLHNCQUFNLFdBQVcsS0FBSyxNQUFNLElBQUk7QUFDaEMsd0JBQVEsa0RBQVUsV0FBVixtQkFBbUIsT0FBbkIsbUJBQXVCLFFBQU8sSUFBSTtBQUFBLGNBQzlDLFNBQVMsR0FBUDtBQUNFLHdCQUFRLElBQUk7QUFBQSxjQUNoQjtBQUFBLFlBQ0osT0FBTztBQUNILHNCQUFRLElBQUk7QUFBQSxZQUNoQjtBQUFBLFVBQ0osQ0FBQztBQUFBLFFBQ0wsQ0FBQztBQUVELFlBQUksR0FBRyxTQUFTLENBQUMsVUFBaUI7QUFDOUIsa0JBQVEsSUFBSTtBQUFBLFFBQ2hCLENBQUM7QUFHRCxZQUFJLE1BQU0sVUFBVTtBQUNwQixZQUFJLElBQUk7QUFBQSxNQUVaLFNBQVMsT0FBUDtBQUNFLGdCQUFRLElBQUk7QUFBQSxNQUNoQjtBQUFBLElBQ0osQ0FBQztBQUFBLEVBQ0w7QUFBQSxFQUVBLFlBQVksVUFBMEI7QUF4ZTFDO0FBeWVRLFVBQU0sWUFBWSxlQUFTLE1BQU0sR0FBRyxFQUFFLElBQUksTUFBeEIsbUJBQTJCO0FBQzdDLFVBQU0sWUFBcUM7QUFBQSxNQUN2QyxPQUFPO0FBQUEsTUFDUCxRQUFRO0FBQUEsTUFDUixPQUFPO0FBQUEsTUFDUCxPQUFPO0FBQUEsTUFDUCxRQUFRO0FBQUEsTUFDUixPQUFPO0FBQUEsTUFDUCxRQUFRO0FBQUEsTUFDUixPQUFPO0FBQUEsTUFDUCxPQUFPO0FBQUEsSUFDWDtBQUVBLFdBQU8sVUFBVSxhQUFhLE9BQU87QUFBQSxFQUN6QztBQUFBLEVBRUEsTUFBTSxtQkFBbUIsTUFBb0I7QUF6ZmpEO0FBMGZRLFFBQUk7QUFFQSxZQUFNLFNBQVMsS0FBSztBQUNwQixZQUFNLFVBQVUsT0FBTyxTQUFTO0FBQ2hDLFlBQU0sV0FBVyxZQUFLLFNBQUwsbUJBQVcsYUFBWTtBQUd4QyxZQUFNLEVBQUUsYUFBYSxvQkFBb0IsS0FBSyxpQkFBaUIsT0FBTztBQUd0RSxZQUFNLG1CQUFtQixNQUFNLEtBQUssa0JBQWtCLGlCQUFpQixJQUFJO0FBRzNFLFlBQU0sUUFBUSxZQUFZLFNBQVM7QUFHbkMsWUFBTSxpQkFBaUM7QUFBQSxRQUNuQyxRQUFRLFlBQVksVUFBVTtBQUFBLFFBQzlCLE1BQU0sWUFBWSxRQUFRLENBQUM7QUFBQSxRQUMzQixVQUFVLFlBQVksWUFBWTtBQUFBLFFBQ2xDLFlBQVksWUFBWSxjQUFjO0FBQUEsUUFDdEMsZUFBZSxZQUFZLE9BQU8sSUFBSSxLQUFLLFlBQVksSUFBSSxJQUFJLElBQUksS0FBSztBQUFBLE1BQzVFO0FBR0EsVUFBSSxvQkFDQSxLQUFLLEtBQ0wsT0FDQSxrQkFDQSxnQkFDQSxPQUFPLFlBQTRCO0FBRS9CLGNBQU0sU0FBUyxNQUFNLEtBQUssZUFDdEIsT0FDQSxrQkFDQTtBQUFBLFVBQ0ksR0FBRztBQUFBLFVBQ0gsUUFBUSxRQUFRO0FBQUEsVUFDaEIsTUFBTSxRQUFRO0FBQUEsVUFDZCxVQUFVLFFBQVE7QUFBQSxVQUNsQixZQUFZLFFBQVE7QUFBQSxVQUNwQixNQUFNLFFBQVEsZ0JBQWdCLFFBQVEsY0FBYyxZQUFZLElBQUk7QUFBQSxRQUN4RSxDQUNKO0FBR0EsWUFBSSxPQUFPLFNBQVM7QUFDaEIsY0FBSSx3QkFBTywyQkFBMkIsYUFBYSxRQUFRLFFBQVE7QUFBQSxRQUN2RSxPQUFPO0FBQ0gsY0FBSSx3QkFBTyxzQkFBc0IsT0FBTyxPQUFPO0FBQUEsUUFDbkQ7QUFBQSxNQUNKLENBQ0osRUFBRSxLQUFLO0FBQUEsSUFDWCxTQUFTLE9BQVA7QUFDRSxVQUFJLHdCQUFPLDBCQUEwQixPQUFPO0FBQUEsSUFDaEQ7QUFBQSxFQUNKO0FBQUEsRUFHQSx3QkFBd0IsSUFBWSxRQUF3QjtBQUN4RCxRQUFJO0FBRUEsWUFBTSxTQUFTLE9BQU8sVUFBVSxPQUFPLFFBQVEsUUFBUSxJQUFJO0FBRTNELFVBQUksQ0FBQyxRQUFRO0FBRVQsZUFBTyxTQUFTLE1BQU07QUFBQSxNQUMxQjtBQUtBLFlBQU0sTUFBTSxLQUFLLE1BQU0sS0FBSyxJQUFJLElBQUksR0FBSTtBQUN4QyxZQUFNLHFCQUFxQixNQUFNLElBQUk7QUFHckMsWUFBTSxTQUFTO0FBQUEsUUFDWCxLQUFLO0FBQUEsUUFDTCxLQUFLO0FBQUEsUUFDTCxLQUFLO0FBQUEsTUFDVDtBQUdBLFlBQU0sVUFBVTtBQUFBLFFBQ1osS0FBSztBQUFBLFFBQ0wsS0FBSztBQUFBLFFBQ0wsS0FBSztBQUFBLE1BQ1Q7QUFHQSxZQUFNLGVBQWUsQ0FBQyxRQUFhO0FBQy9CLGNBQU0sTUFBTSxLQUFLLFVBQVUsR0FBRztBQUM5QixlQUFPLE9BQU8sV0FBVyxRQUFRLEVBQzVCLE9BQU8sR0FBRyxFQUNWLE9BQU8sUUFBUSxFQUNmLFFBQVEsT0FBTyxHQUFHLEVBQ2xCLFFBQVEsT0FBTyxHQUFHLEVBQ2xCLFFBQVEsUUFBUSxFQUFFO0FBQUEsTUFDM0I7QUFFQSxZQUFNLGVBQWUsT0FBTyxLQUFLLEtBQUssVUFBVSxNQUFNLENBQUMsRUFBRSxTQUFTLFFBQVEsRUFDckUsUUFBUSxPQUFPLEdBQUcsRUFDbEIsUUFBUSxPQUFPLEdBQUcsRUFDbEIsUUFBUSxRQUFRLEVBQUU7QUFFdkIsWUFBTSxnQkFBZ0IsT0FBTyxLQUFLLEtBQUssVUFBVSxPQUFPLENBQUMsRUFBRSxTQUFTLFFBQVEsRUFDdkUsUUFBUSxPQUFPLEdBQUcsRUFDbEIsUUFBUSxPQUFPLEdBQUcsRUFDbEIsUUFBUSxRQUFRLEVBQUU7QUFHdkIsWUFBTSxpQkFBaUIsR0FBRyxnQkFBZ0I7QUFDMUMsWUFBTSxZQUFZLE9BQU8sV0FBVyxVQUFVLE9BQU8sS0FBSyxRQUFRLEtBQUssQ0FBQyxFQUNuRSxPQUFPLGNBQWMsRUFDckIsT0FBTyxRQUFRLEVBQ2YsUUFBUSxPQUFPLEdBQUcsRUFDbEIsUUFBUSxPQUFPLEdBQUcsRUFDbEIsUUFBUSxRQUFRLEVBQUU7QUFHdkIsWUFBTSxRQUFRLEdBQUcsZ0JBQWdCLGlCQUFpQjtBQUVsRCxhQUFPLFNBQVM7QUFBQSxJQUNwQixTQUFTLE9BQVA7QUFFRSxhQUFPLFNBQVMsTUFBTTtBQUFBLElBQzFCO0FBQUEsRUFDSjtBQUFBLEVBRUEseUJBQXlCLFNBQXNCO0FBZ0IzQyxVQUFNLGlCQUFpQixDQUFDLE1BQWMsU0FBaUIsTUFBb0I7QUFBQSxNQUN2RSxNQUFNO0FBQUEsTUFDTjtBQUFBLE1BQ0EsUUFBUTtBQUFBLE1BQ1I7QUFBQSxNQUNBLE1BQU07QUFBQSxNQUNOLE9BQU87QUFBQSxNQUNQLFNBQVM7QUFBQSxJQUNiO0FBR0EsVUFBTSxzQkFBc0IsQ0FBQyxhQUEwQztBQUFBLE1BQ25FLE1BQU07QUFBQSxNQUNOO0FBQUEsTUFDQSxXQUFXO0FBQUEsTUFDWCxRQUFRO0FBQUEsTUFDUixRQUFRO0FBQUEsTUFDUixTQUFTO0FBQUEsSUFDYjtBQUdBLFVBQU0saUJBQWlCLENBQUMsV0FBMEIsYUFBZ0Q7QUFBQSxNQUM5RixNQUFNO0FBQUEsTUFDTjtBQUFBLE1BQ0EsT0FBTztBQUFBLE1BQ1AsVUFBVTtBQUFBLE1BQ1YsV0FBVztBQUFBLE1BQ1gsUUFBUTtBQUFBLE1BQ1IsUUFBUTtBQUFBLE1BQ1IsU0FBUztBQUFBLElBQ2I7QUFHQSxVQUFNLHFCQUFxQixDQUFDLGFBQTBDO0FBQUEsTUFDbEUsTUFBTTtBQUFBLE1BQ047QUFBQSxNQUNBLFdBQVc7QUFBQSxNQUNYLFFBQVE7QUFBQSxNQUNSLFFBQVE7QUFBQSxNQUNSLE9BQU87QUFBQSxNQUNQLFNBQVM7QUFBQSxJQUNiO0FBR0EsVUFBTSx3QkFBd0IsQ0FBQyxTQUFnQztBQUMzRCxZQUFNLFFBQXVCLENBQUM7QUFDOUIsVUFBSSxlQUFlO0FBR25CLFlBQU0sY0FBYztBQUNwQixVQUFJO0FBRUosYUFBUSxTQUFRLFlBQVksS0FBSyxJQUFJLE9BQU8sTUFBTTtBQUU5QyxZQUFJLE1BQU0sUUFBUSxjQUFjO0FBQzVCLGdCQUFNLEtBQUssZUFBZSxLQUFLLE1BQU0sY0FBYyxNQUFNLEtBQUssQ0FBQyxDQUFDO0FBQUEsUUFDcEU7QUFFQSxjQUFNLGNBQWMsTUFBTTtBQUUxQixZQUFJLFlBQVksV0FBVyxLQUFLLEdBQUc7QUFFL0IsZ0JBQU0sS0FBSyxlQUFlLFdBQVcsQ0FBQztBQUFBLFFBQzFDLFdBQVcsWUFBWSxXQUFXLEdBQUcsR0FBRztBQUVwQyxnQkFBTSxPQUFPLFlBQVksTUFBTSxHQUFHLEVBQUU7QUFDcEMsZ0JBQU0sS0FBSyxlQUFlLE1BQU0sRUFBRSxDQUFDO0FBQUEsUUFDdkMsV0FBVyxZQUFZLFdBQVcsR0FBRyxHQUFHO0FBRXBDLGdCQUFNLFlBQVksMEJBQTBCLEtBQUssV0FBVztBQUM1RCxjQUFJLFdBQVc7QUFDWCxrQkFBTSxLQUFLO0FBQUEsY0FDUCxNQUFNO0FBQUEsY0FDTixLQUFLLFVBQVU7QUFBQSxjQUNmLFVBQVUsQ0FBQyxlQUFlLFVBQVUsRUFBRSxDQUFDO0FBQUEsY0FDdkMsV0FBVztBQUFBLGNBQ1gsUUFBUTtBQUFBLGNBQ1IsUUFBUTtBQUFBLGNBQ1IsU0FBUztBQUFBLFlBQ2IsQ0FBQztBQUFBLFVBQ0w7QUFBQSxRQUNKLFdBQVcsWUFBWSxXQUFXLElBQUksS0FBSyxZQUFZLFdBQVcsSUFBSSxHQUFHO0FBRXJFLGdCQUFNLFdBQVcsWUFBWSxNQUFNLEdBQUcsRUFBRTtBQUN4QyxnQkFBTSxLQUFLLGVBQWUsVUFBVSxDQUFDLENBQUM7QUFBQSxRQUMxQyxXQUFXLFlBQVksV0FBVyxHQUFHLEdBQUc7QUFFcEMsZ0JBQU0sYUFBYSxZQUFZLE1BQU0sR0FBRyxFQUFFO0FBQzFDLGdCQUFNLEtBQUssZUFBZSxZQUFZLENBQUMsQ0FBQztBQUFBLFFBQzVDO0FBRUEsdUJBQWUsTUFBTSxRQUFRLFlBQVk7QUFBQSxNQUM3QztBQUdBLFVBQUksZUFBZSxLQUFLLFFBQVE7QUFDNUIsY0FBTSxLQUFLLGVBQWUsS0FBSyxNQUFNLFlBQVksQ0FBQyxDQUFDO0FBQUEsTUFDdkQ7QUFFQSxhQUFPO0FBQUEsSUFDWDtBQUdBLFVBQU0sZUFBOEIsQ0FBQztBQUNyQyxRQUFJLG1CQUF5QztBQUM3QyxRQUFJLGtCQUE4QztBQUdsRCxVQUFNLGtCQUFrQixRQUFRLE1BQU0sTUFBTSxFQUFFLE9BQU8sT0FBSyxFQUFFLEtBQUssQ0FBQztBQUVsRSxvQkFBZ0IsUUFBUSxXQUFTO0FBRTdCLFlBQU0sUUFBUSxNQUFNLE1BQU0sSUFBSSxFQUFFLE9BQU8sVUFBUSxLQUFLLEtBQUssQ0FBQztBQUcxRCxZQUFNLFFBQVEsVUFBUTtBQUNsQixjQUFNLGNBQWMsS0FBSyxLQUFLO0FBRzlCLGNBQU0sa0JBQWtCLFlBQVksTUFBTSxlQUFlO0FBQ3pELGNBQU0sa0JBQWtCLFlBQVksTUFBTSxrQkFBa0I7QUFFNUQsWUFBSSxtQkFBbUIsaUJBQWlCO0FBQ3BDLGdCQUFNLFdBQVcsa0JBQWtCLGdCQUFnQixLQUFLLGdCQUFpQjtBQUN6RSxnQkFBTSxXQUFnQyxrQkFBa0IsV0FBVztBQUduRSxjQUFJLENBQUMsb0JBQW9CLG9CQUFvQixVQUFVO0FBRW5ELGdCQUFJLGtCQUFrQjtBQUNsQiwyQkFBYSxLQUFLLGVBQWUsa0JBQWtCLGVBQWdCLENBQUM7QUFBQSxZQUN4RTtBQUVBLCtCQUFtQixDQUFDO0FBQ3BCLDhCQUFrQjtBQUFBLFVBQ3RCO0FBR0EsMkJBQWlCLEtBQUssbUJBQW1CO0FBQUEsWUFDckMsb0JBQW9CLHNCQUFzQixRQUFRLENBQUM7QUFBQSxVQUN2RCxDQUFDLENBQUM7QUFDRjtBQUFBLFFBQ0o7QUFHQSxZQUFJLGtCQUFrQjtBQUNsQix1QkFBYSxLQUFLLGVBQWUsa0JBQWtCLGVBQWdCLENBQUM7QUFDcEUsNkJBQW1CO0FBQ25CLDRCQUFrQjtBQUFBLFFBQ3RCO0FBR0EsWUFBSSxZQUFZLE1BQU0sU0FBUyxHQUFHO0FBQzlCLHVCQUFhLEtBQUs7QUFBQSxZQUNkLE1BQU07QUFBQSxZQUNOLFNBQVM7QUFBQSxVQUNiLENBQUM7QUFDRDtBQUFBLFFBQ0o7QUFHQSxjQUFNLGVBQWUsWUFBWSxNQUFNLG9CQUFvQjtBQUMzRCxZQUFJLGNBQWM7QUFDZCxnQkFBTSxRQUFRLGFBQWEsR0FBRztBQUM5QixnQkFBTSxPQUFPLGFBQWEsR0FBRyxLQUFLO0FBQ2xDLHVCQUFhLEtBQUs7QUFBQSxZQUNkLE1BQU07QUFBQSxZQUNOLEtBQUssSUFBSTtBQUFBLFlBQ1QsVUFBVSxzQkFBc0IsSUFBSTtBQUFBLFlBQ3BDLFdBQVc7QUFBQSxZQUNYLFFBQVE7QUFBQSxZQUNSLFFBQVE7QUFBQSxZQUNSLFNBQVM7QUFBQSxVQUNiLENBQUM7QUFDRDtBQUFBLFFBQ0o7QUFHQSxZQUFJLFlBQVksV0FBVyxHQUFHLEdBQUc7QUFDN0IsZ0JBQU0sWUFBWSxZQUFZLFVBQVUsQ0FBQyxFQUFFLEtBQUs7QUFDaEQsdUJBQWEsS0FBSztBQUFBLFlBQ2QsTUFBTTtBQUFBLFlBQ04sVUFBVSxDQUFDLG9CQUFvQixzQkFBc0IsU0FBUyxDQUFDLENBQUM7QUFBQSxZQUNoRSxXQUFXO0FBQUEsWUFDWCxRQUFRO0FBQUEsWUFDUixRQUFRO0FBQUEsWUFDUixTQUFTO0FBQUEsVUFDYixDQUFDO0FBQ0Q7QUFBQSxRQUNKO0FBR0EsY0FBTSxhQUFhLFlBQVksTUFBTSx1QkFBdUI7QUFDNUQsWUFBSSxZQUFZO0FBQ1osZ0JBQU0sQ0FBQyxHQUFHLEtBQUssT0FBTztBQUN0Qix1QkFBYSxLQUFLO0FBQUEsWUFDZCxNQUFNO0FBQUEsWUFDTjtBQUFBLFlBQ0EsU0FBUztBQUFBLFlBQ1QsT0FBTztBQUFBLFlBQ1AsUUFBUTtBQUFBLFlBQ1IsVUFBVTtBQUFBLFlBQ1YsYUFBYTtBQUFBLFlBQ2IsU0FBUztBQUFBLFlBQ1QsV0FBVztBQUFBLFlBQ1gsUUFBUTtBQUFBLFlBQ1IsUUFBUTtBQUFBLFlBQ1IsU0FBUztBQUFBLFVBQ2IsQ0FBQztBQUNEO0FBQUEsUUFDSjtBQUdBLHFCQUFhLEtBQUssb0JBQW9CLHNCQUFzQixXQUFXLENBQUMsQ0FBQztBQUFBLE1BQzdFLENBQUM7QUFBQSxJQUNMLENBQUM7QUFHRCxRQUFJLGtCQUFrQjtBQUNsQixtQkFBYSxLQUFLLGVBQWUsa0JBQWtCLGVBQWdCLENBQUM7QUFBQSxJQUN4RTtBQUdBLFVBQU0sT0FBb0I7QUFBQSxNQUN0QixNQUFNO0FBQUEsTUFDTixVQUFVO0FBQUEsTUFDVixXQUFXO0FBQUEsTUFDWCxRQUFRO0FBQUEsTUFDUixRQUFRO0FBQUEsTUFDUixTQUFTO0FBQUEsSUFDYjtBQUVBLFdBQU8sS0FBSyxVQUFVLEVBQUUsS0FBSyxDQUFDO0FBQUEsRUFDbEM7QUFBQSxFQUVBLE1BQU0sZUFBZSxPQUFlLGlCQUF5QixhQUErRjtBQXQzQmhLO0FBdTNCUSxRQUFJO0FBQ0EsWUFBTSxFQUFFLFVBQVUsV0FBVyxLQUFLO0FBRWxDLFVBQUksQ0FBQyxZQUFZLENBQUMsUUFBUTtBQUN0QixlQUFPO0FBQUEsVUFDSCxTQUFTO0FBQUEsVUFDVCxPQUFPO0FBQUEsUUFDWDtBQUFBLE1BQ0o7QUFHQSxZQUFNLFVBQVUsU0FBUyxLQUFLLEVBQUUsUUFBUSxPQUFPLEVBQUU7QUFHakQsWUFBTSxDQUFDLElBQUksVUFBVSxPQUFPLE1BQU0sR0FBRztBQUNyQyxVQUFJLENBQUMsTUFBTSxDQUFDLFFBQVE7QUFDaEIsZUFBTztBQUFBLFVBQ0gsU0FBUztBQUFBLFVBQ1QsT0FBTztBQUFBLFFBQ1g7QUFBQSxNQUNKO0FBR0EsWUFBTSxnQkFBZ0IsZ0JBQWdCLEtBQUs7QUFHM0MsY0FBUSxJQUFJLDhCQUE4QixhQUFhO0FBR3ZELFlBQU0sUUFBUSxjQUFjLE1BQU0sSUFBSTtBQUN0QyxVQUFJO0FBQ0osVUFBSSwyQkFBMkI7QUFFL0IsVUFBSSxNQUFNLFNBQVMsR0FBRztBQUNsQixjQUFNLFlBQVksTUFBTSxHQUFHLEtBQUs7QUFDaEMsY0FBTSxhQUFhLFVBQVUsTUFBTSxxQkFBcUI7QUFDeEQsWUFBSSxZQUFZO0FBQ1osMEJBQWdCLFdBQVc7QUFFM0IscUNBQTJCLE1BQU0sTUFBTSxDQUFDLEVBQUUsS0FBSyxJQUFJLEVBQUUsS0FBSztBQUFBLFFBQzlEO0FBQUEsTUFDSjtBQUdBLFlBQU0sVUFBVSxLQUFLLHlCQUF5Qix3QkFBd0I7QUFHdEUsY0FBUSxJQUFJLG1CQUFtQixPQUFPO0FBR3RDLFlBQU0sV0FBZ0I7QUFBQSxRQUNsQixPQUFPLENBQUM7QUFBQSxVQUNKO0FBQUEsVUFDQTtBQUFBLFVBQ0EsUUFBUSxZQUFZLFVBQVU7QUFBQSxVQUM5QixVQUFVLFlBQVksWUFBWTtBQUFBLFVBQ2xDLFlBQVksWUFBWSxjQUFjO0FBQUEsVUFDdEMsY0FBYztBQUFBLFFBQ2xCLENBQUM7QUFBQSxNQUNMO0FBR0EsY0FBUSxJQUFJLG9CQUFvQixLQUFLLFVBQVUsVUFBVSxNQUFNLENBQUMsQ0FBQztBQUdqRSxVQUFJLGVBQWU7QUFDZixpQkFBUyxNQUFNLEdBQUcsZ0JBQWdCO0FBQUEsTUFDdEM7QUFHQSxVQUFJLFlBQVksUUFBUSxZQUFZLEtBQUssU0FBUyxHQUFHO0FBQ2pELGlCQUFTLE1BQU0sR0FBRyxPQUFPLFlBQVksS0FBSyxJQUFJLFNBQVEsR0FBRSxNQUFNLElBQUksRUFBRTtBQUFBLE1BQ3hFO0FBR0EsVUFBSSxZQUFZLFdBQVcsZUFBZSxZQUFZLE1BQU07QUFDeEQsaUJBQVMsTUFBTSxHQUFHLGVBQWUsWUFBWTtBQUFBLE1BQ2pELFdBQVcsWUFBWSxXQUFXLGFBQWE7QUFDM0MsaUJBQVMsTUFBTSxHQUFHLGVBQWUsSUFBSSxLQUFLLEVBQUUsWUFBWTtBQUFBLE1BQzVEO0FBR0EsVUFBSTtBQUVBLGNBQU0sWUFBWSxLQUFLLHdCQUF3QixJQUFJLE1BQU07QUFFekQsY0FBTSxXQUFXLE1BQU0saUNBQVc7QUFBQSxVQUM5QixLQUFLLEdBQUc7QUFBQSxVQUNSLFFBQVE7QUFBQSxVQUNSLFNBQVM7QUFBQSxZQUNMLGdCQUFnQjtBQUFBLFlBQ2hCLGlCQUFpQjtBQUFBLFVBQ3JCO0FBQUEsVUFDQSxNQUFNLEtBQUssVUFBVSxRQUFRO0FBQUEsVUFDN0IsT0FBTztBQUFBLFFBQ1gsQ0FBQztBQUVELFlBQUksU0FBUyxVQUFVLE9BQU8sU0FBUyxTQUFTLEtBQUs7QUFDakQsZ0JBQU0sV0FBVyxTQUFTO0FBRzFCLGNBQUksVUFBVTtBQUNkLGNBQUk7QUFDQSxzQkFBVSxrREFBVSxVQUFWLG1CQUFrQixPQUFsQixtQkFBc0IsUUFBTztBQUFBLFVBQzNDLFNBQVMsR0FBUDtBQUNFLG9CQUFRLElBQUksMENBQTBDO0FBQUEsVUFDMUQ7QUFHQSxjQUFJLEtBQUssU0FBUywwQkFBMEIsa0RBQVUsVUFBVixtQkFBa0IsT0FBbEIsbUJBQXNCLEtBQUk7QUFDbEUsa0JBQU0sWUFBWSxHQUFHLEtBQUssU0FBUyxnQ0FBZ0MsU0FBUyxNQUFNLEdBQUc7QUFDckYsbUJBQU8sS0FBSyxXQUFXLFFBQVE7QUFBQSxVQUNuQztBQUVBLGlCQUFPO0FBQUEsWUFDSCxTQUFTO0FBQUEsWUFDVDtBQUFBLFVBQ0o7QUFBQSxRQUNKLE9BQU87QUFDSCxnQkFBTSxnQkFBZ0IsU0FBUztBQUMvQixrQkFBUSxNQUFNLDhCQUE4QixTQUFTLE1BQU07QUFDM0Qsa0JBQVEsTUFBTSx3QkFBd0IsYUFBYTtBQUduRCxjQUFJLGNBQWMsU0FBUyxhQUFhLEtBQUssY0FBYyxTQUFTLGVBQWUsR0FBRztBQUNsRixvQkFBUSxJQUFJLGdFQUFnRTtBQUM1RSxtQkFBTyxNQUFNLEtBQUssZ0JBQWdCLFNBQVMsSUFBSSxRQUFRLFFBQVE7QUFBQSxVQUNuRTtBQUVBLGlCQUFPO0FBQUEsWUFDSCxTQUFTO0FBQUEsWUFDVCxPQUFPLGNBQWMsU0FBUyxZQUFZO0FBQUEsVUFDOUM7QUFBQSxRQUNKO0FBQUEsTUFDSixTQUFTLE9BQVA7QUFDRSxnQkFBUSxNQUFNLDREQUE0RCxLQUFLO0FBRy9FLGVBQU8sTUFBTSxLQUFLLGdCQUFnQixTQUFTLElBQUksUUFBUSxRQUFRO0FBQUEsTUFDbkU7QUFBQSxJQUNKLFNBQVMsT0FBUDtBQUNFLGNBQVEsTUFBTSxrQkFBa0IsS0FBSztBQUNyQyxhQUFPO0FBQUEsUUFDSCxTQUFTO0FBQUEsUUFDVCxPQUFPLDRCQUE0QjtBQUFBLE1BQ3ZDO0FBQUEsSUFDSjtBQUFBLEVBQ0o7QUFBQSxFQUVBLE1BQU0sZ0JBQWdCLEtBQWEsSUFBWSxRQUFnQixVQUFnRjtBQUMzSSxXQUFPLElBQUksUUFBUSxDQUFDLFlBQVk7QUFDNUIsVUFBSTtBQUdBLGNBQU0sY0FBYyxPQUFPO0FBRTNCLFlBQUksQ0FBQyxhQUFhO0FBQ2Qsa0JBQVE7QUFBQSxZQUNKLFNBQVM7QUFBQSxZQUNULE9BQU87QUFBQSxVQUNYLENBQUM7QUFDRDtBQUFBLFFBQ0o7QUFFQSxjQUFNLFFBQVEsWUFBWSxPQUFPO0FBQ2pDLGNBQU0sU0FBUyxZQUFZLFFBQVE7QUFDbkMsY0FBTSxTQUFTLElBQUksSUFBSSxHQUFHO0FBRzFCLGNBQU0sTUFBTSxLQUFLLE1BQU0sS0FBSyxJQUFJLElBQUksR0FBSTtBQUN4QyxjQUFNLHFCQUFxQixNQUFNLElBQUk7QUFHckMsY0FBTSxTQUFTO0FBQUEsVUFDWCxLQUFLO0FBQUEsVUFDTCxLQUFLO0FBQUEsVUFDTCxLQUFLO0FBQUEsUUFDVDtBQUVBLGNBQU0sVUFBVTtBQUFBLFVBQ1osS0FBSztBQUFBLFVBQ0wsS0FBSztBQUFBLFVBQ0wsS0FBSztBQUFBLFFBQ1Q7QUFHQSxjQUFNLGVBQWUsT0FBTyxLQUFLLEtBQUssVUFBVSxNQUFNLENBQUMsRUFBRSxTQUFTLFFBQVEsRUFDckUsUUFBUSxPQUFPLEdBQUcsRUFDbEIsUUFBUSxPQUFPLEdBQUcsRUFDbEIsUUFBUSxRQUFRLEVBQUU7QUFFdkIsY0FBTSxnQkFBZ0IsT0FBTyxLQUFLLEtBQUssVUFBVSxPQUFPLENBQUMsRUFBRSxTQUFTLFFBQVEsRUFDdkUsUUFBUSxPQUFPLEdBQUcsRUFDbEIsUUFBUSxPQUFPLEdBQUcsRUFDbEIsUUFBUSxRQUFRLEVBQUU7QUFHdkIsY0FBTSxpQkFBaUIsR0FBRyxnQkFBZ0I7QUFDMUMsY0FBTSxZQUFZLE9BQU8sV0FBVyxVQUFVLE9BQU8sS0FBSyxRQUFRLEtBQUssQ0FBQyxFQUNuRSxPQUFPLGNBQWMsRUFDckIsT0FBTyxRQUFRLEVBQ2YsUUFBUSxPQUFPLEdBQUcsRUFDbEIsUUFBUSxPQUFPLEdBQUcsRUFDbEIsUUFBUSxRQUFRLEVBQUU7QUFHdkIsY0FBTSxRQUFRLEdBQUcsZ0JBQWdCLGlCQUFpQjtBQUdsRCxjQUFNLFlBQVksU0FBUztBQUUzQixjQUFNLGNBQWMsS0FBSyxVQUFVLFFBQVE7QUFFM0MsY0FBTSxVQUFVO0FBQUEsVUFDWixVQUFVLE9BQU87QUFBQSxVQUNqQixNQUFNLE9BQU8sV0FBVyxPQUFPO0FBQUEsVUFDL0IsUUFBUTtBQUFBLFVBQ1IsU0FBUztBQUFBLFlBQ0wsZ0JBQWdCO0FBQUEsWUFDaEIsa0JBQWtCLFlBQVk7QUFBQSxZQUM5QixpQkFBaUI7QUFBQSxVQUNyQjtBQUFBLFFBQ0o7QUFFQSxjQUFNLE1BQU0sTUFBTSxRQUFRLFNBQVMsQ0FBQyxRQUFhO0FBQzdDLGNBQUksT0FBTztBQUVYLGNBQUksR0FBRyxRQUFRLENBQUMsVUFBa0I7QUFDOUIsb0JBQVE7QUFBQSxVQUNaLENBQUM7QUFFRCxjQUFJLEdBQUcsT0FBTyxNQUFNO0FBOWxDeEM7QUErbEN3QixnQkFBSSxJQUFJLGNBQWMsT0FBTyxJQUFJLGFBQWEsS0FBSztBQUMvQyxrQkFBSTtBQUNBLHNCQUFNLFdBQVcsS0FBSyxNQUFNLElBQUk7QUFHaEMsb0JBQUksVUFBVTtBQUNkLG9CQUFJO0FBQ0EsNEJBQVUsa0RBQVUsVUFBVixtQkFBa0IsT0FBbEIsbUJBQXNCLFFBQU87QUFBQSxnQkFDM0MsU0FBUyxHQUFQO0FBQ0UsMEJBQVEsSUFBSSwwQ0FBMEM7QUFBQSxnQkFDMUQ7QUFHQSxvQkFBSSxLQUFLLFNBQVMsMEJBQTBCLGtEQUFVLFVBQVYsbUJBQWtCLE9BQWxCLG1CQUFzQixLQUFJO0FBQ2xFLHdCQUFNLFlBQVksR0FBRyxLQUFLLFNBQVMsZ0NBQWdDLFNBQVMsTUFBTSxHQUFHO0FBQ3JGLHlCQUFPLEtBQUssV0FBVyxRQUFRO0FBQUEsZ0JBQ25DO0FBRUEsd0JBQVE7QUFBQSxrQkFDSixTQUFTO0FBQUEsa0JBQ1Q7QUFBQSxnQkFDSixDQUFDO0FBQUEsY0FDTCxTQUFTLEdBQVA7QUFDRSx3QkFBUSxNQUFNLDZDQUE2QyxDQUFDO0FBQzVELHdCQUFRO0FBQUEsa0JBQ0osU0FBUztBQUFBLGtCQUNULE9BQU8sa0NBQWtDO0FBQUEsZ0JBQzdDLENBQUM7QUFBQSxjQUNMO0FBQUEsWUFDSixPQUFPO0FBQ0gsc0JBQVEsTUFBTSxtQ0FBbUMsSUFBSSxVQUFVO0FBQy9ELHNCQUFRLE1BQU0sd0JBQXdCLElBQUk7QUFDMUMsc0JBQVE7QUFBQSxnQkFDSixTQUFTO0FBQUEsZ0JBQ1QsT0FBTyxjQUFjLElBQUksZ0JBQWdCO0FBQUEsY0FDN0MsQ0FBQztBQUFBLFlBQ0w7QUFBQSxVQUNKLENBQUM7QUFBQSxRQUNMLENBQUM7QUFFRCxZQUFJLEdBQUcsU0FBUyxDQUFDLFVBQWlCO0FBQzlCLGtCQUFRLE1BQU0sMEJBQTBCLEtBQUs7QUFDN0Msa0JBQVE7QUFBQSxZQUNKLFNBQVM7QUFBQSxZQUNULE9BQU8sb0NBQW9DLE1BQU07QUFBQSxVQUNyRCxDQUFDO0FBQUEsUUFDTCxDQUFDO0FBR0QsWUFBSSxNQUFNLFdBQVc7QUFDckIsWUFBSSxJQUFJO0FBQUEsTUFFWixTQUFTLE9BQVA7QUFDRSxnQkFBUSxNQUFNLGdDQUFnQyxLQUFLO0FBQ25ELGdCQUFRO0FBQUEsVUFDSixTQUFTO0FBQUEsVUFDVCxPQUFPLDRCQUE0QjtBQUFBLFFBQ3ZDLENBQUM7QUFBQSxNQUNMO0FBQUEsSUFDSixDQUFDO0FBQUEsRUFDTDtBQUFBLEVBRUEsV0FBVztBQUNQLFlBQVEsSUFBSSw4QkFBOEI7QUFBQSxFQUM5QztBQUFBLEVBRUEsTUFBTSxlQUFlO0FBQ2pCLFNBQUssV0FBVyxPQUFPLE9BQU8sQ0FBQyxHQUFHLGtCQUFrQixNQUFNLEtBQUssU0FBUyxDQUFDO0FBQUEsRUFDN0U7QUFBQSxFQUVBLE1BQU0sZUFBZTtBQUNqQixVQUFNLEtBQUssU0FBUyxLQUFLLFFBQVE7QUFBQSxFQUNyQztBQUFBLEVBRUEsTUFBTSxtQkFBb0c7QUFDdEcsUUFBSTtBQUNBLFlBQU0sRUFBRSxVQUFVLFdBQVcsS0FBSztBQUVsQyxVQUFJLENBQUMsWUFBWSxDQUFDLFFBQVE7QUFDdEIsY0FBTSxJQUFJLE1BQU0sb0NBQW9DO0FBQUEsTUFDeEQ7QUFHQSxZQUFNLFVBQVUsU0FBUyxLQUFLLEVBQUUsUUFBUSxPQUFPLEVBQUU7QUFHakQsWUFBTSxDQUFDLElBQUksVUFBVSxPQUFPLE1BQU0sR0FBRztBQUNyQyxVQUFJLENBQUMsTUFBTSxDQUFDLFFBQVE7QUFDaEIsY0FBTSxJQUFJLE1BQU0sd0JBQXdCO0FBQUEsTUFDNUM7QUFHQSxZQUFNLFlBQVksS0FBSyx3QkFBd0IsSUFBSSxNQUFNO0FBR3pELFlBQU0sV0FBVyxNQUFNLGlDQUFXO0FBQUEsUUFDOUIsS0FBSyxHQUFHO0FBQUEsUUFDUixRQUFRO0FBQUEsUUFDUixTQUFTO0FBQUEsVUFDTCxpQkFBaUI7QUFBQSxRQUNyQjtBQUFBLE1BQ0osQ0FBQztBQUVELFVBQUksU0FBUyxXQUFXLEtBQUs7QUFDekIsY0FBTSxJQUFJLE1BQU0sY0FBYyxTQUFTLFFBQVE7QUFBQSxNQUNuRDtBQUVBLFlBQU0sUUFBUSxTQUFTLEtBQUs7QUFDNUIsYUFBTyxNQUFNLElBQUksQ0FBQyxTQUFlO0FBQUEsUUFDN0IsT0FBTyxLQUFLO0FBQUEsUUFDWixLQUFLLEtBQUs7QUFBQSxRQUNWLGNBQWMsS0FBSztBQUFBLFFBQ25CLE1BQU8sTUFBSyxRQUFRLENBQUMsR0FBRyxJQUFJLENBQUMsUUFBYSxJQUFJLElBQUk7QUFBQSxNQUN0RCxFQUFFO0FBQUEsSUFDTixTQUFTLE9BQVA7QUFDRSxjQUFRLE1BQU0sZ0NBQWdDLEtBQUs7QUFDbkQsWUFBTTtBQUFBLElBQ1Y7QUFBQSxFQUNKO0FBQUEsRUFFQSxNQUFNLG9CQUFvQjtBQUN0QixRQUFJO0FBQ0EsVUFBSSxDQUFDLEtBQUssU0FBUyxtQkFBbUI7QUFDbEM7QUFBQSxNQUNKO0FBRUEsWUFBTSxRQUFRLE1BQU0sS0FBSyxpQkFBaUI7QUFHMUMsWUFBTSxhQUFhLENBQUMsWUFBb0I7QUFDcEMsY0FBTSxPQUFPLElBQUksS0FBSyxPQUFPO0FBQzdCLGVBQU8sS0FBSyxtQkFBbUIsU0FBUztBQUFBLFVBQ3BDLE1BQU07QUFBQSxVQUNOLE9BQU87QUFBQSxVQUNQLEtBQUs7QUFBQSxRQUNULENBQUM7QUFBQSxNQUNMO0FBR0EsWUFBTSxVQUFVO0FBQUEsUUFDWjtBQUFBLFFBQ0E7QUFBQSxRQUNBLG1CQUFtQixJQUFJLEtBQUssRUFBRSxtQkFBbUIsU0FBUztBQUFBLFVBQ3RELE1BQU07QUFBQSxVQUNOLE9BQU87QUFBQSxVQUNQLEtBQUs7QUFBQSxRQUNULENBQUM7QUFBQSxRQUNEO0FBQUEsUUFDQTtBQUFBLFFBQ0E7QUFBQSxRQUNBLEdBQUcsTUFBTSxJQUFJLFVBQVE7QUFDakIsZ0JBQU0sT0FBTyxXQUFXLEtBQUssWUFBWTtBQUN6QyxnQkFBTSxRQUFRLElBQUksS0FBSyxVQUFVLEtBQUs7QUFDdEMsZ0JBQU0sT0FBTyxLQUFLLEtBQUssU0FBUyxJQUFJLEtBQUssS0FBSyxLQUFLLElBQUksSUFBSTtBQUUzRCxnQkFBTSxlQUFlLE1BQU0sUUFBUSxPQUFPLEtBQUs7QUFDL0MsZ0JBQU0sY0FBYyxLQUFLLFFBQVEsT0FBTyxLQUFLO0FBQzdDLGlCQUFPLEtBQUssa0JBQWtCLFVBQVU7QUFBQSxRQUM1QyxDQUFDO0FBQUEsTUFDTCxFQUFFLEtBQUssSUFBSTtBQUdYLFlBQU0sV0FBVyxLQUFLLFNBQVM7QUFDL0IsVUFBSSxPQUFPLEtBQUssSUFBSSxNQUFNLHNCQUFzQixRQUFRO0FBRXhELFVBQUksQ0FBQyxNQUFNO0FBQ1AsZUFBTyxNQUFNLEtBQUssSUFBSSxNQUFNLE9BQU8sVUFBVSxPQUFPO0FBQ3BELFlBQUksd0JBQU8sOEJBQThCLFVBQVU7QUFBQSxNQUN2RCxXQUFXLGdCQUFnQix3QkFBTztBQUM5QixjQUFNLEtBQUssSUFBSSxNQUFNLE9BQU8sTUFBTSxPQUFPO0FBQ3pDLFlBQUksd0JBQU8sc0JBQXNCO0FBQUEsTUFDckM7QUFBQSxJQUNKLFNBQVMsT0FBUDtBQUNFLFVBQUksd0JBQU8sZ0NBQWdDLE9BQU87QUFBQSxJQUN0RDtBQUFBLEVBQ0o7QUFDSjtBQUVBLElBQU0sd0JBQU4sY0FBb0Msa0NBQWlCO0FBQUEsRUFHakQsWUFBWSxLQUFVLFFBQTJCO0FBQzdDLFVBQU0sS0FBSyxNQUFNO0FBQ2pCLFNBQUssU0FBUztBQUFBLEVBQ2xCO0FBQUEsRUFFQSxVQUFnQjtBQUNaLFVBQU0sRUFBRSxnQkFBZ0I7QUFFeEIsZ0JBQVksTUFBTTtBQUVsQixnQkFBWSxTQUFTLE1BQU0sRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBRTVELFFBQUkseUJBQVEsV0FBVyxFQUNsQixRQUFRLGdCQUFnQixFQUN4QixRQUFRLG1EQUFtRCxFQUMzRCxRQUFRLFVBQVEsS0FDWixlQUFlLHNCQUFzQixFQUNyQyxTQUFTLEtBQUssT0FBTyxTQUFTLFFBQVEsRUFDdEMsU0FBUyxPQUFPLFVBQVU7QUFDdkIsV0FBSyxPQUFPLFNBQVMsV0FBVztBQUNoQyxZQUFNLEtBQUssT0FBTyxhQUFhO0FBQUEsSUFDbkMsQ0FBQyxDQUFDO0FBRVYsUUFBSSx5QkFBUSxXQUFXLEVBQ2xCLFFBQVEsZUFBZSxFQUN2QixRQUFRLDBCQUEwQixFQUNsQyxRQUFRLFVBQVEsS0FDWixlQUFlLG1FQUFtRSxFQUNsRixTQUFTLEtBQUssT0FBTyxTQUFTLE1BQU0sRUFDcEMsU0FBUyxPQUFPLFVBQVU7QUFDdkIsV0FBSyxPQUFPLFNBQVMsU0FBUztBQUM5QixZQUFNLEtBQUssT0FBTyxhQUFhO0FBQUEsSUFDbkMsQ0FBQyxDQUFDO0FBRVYsUUFBSSx5QkFBUSxXQUFXLEVBQ2xCLFFBQVEsa0JBQWtCLEVBQzFCLFFBQVEsOEVBQThFLEVBQ3RGLFFBQVEsVUFBUSxLQUNaLGVBQWUsY0FBYyxFQUM3QixTQUFTLEtBQUssT0FBTyxTQUFTLGVBQWUsRUFDN0MsU0FBUyxPQUFPLFVBQVU7QUFFdkIsV0FBSyxPQUFPLFNBQVMsa0JBQWtCLE1BQU0sUUFBUSxjQUFjLEVBQUU7QUFDckUsWUFBTSxLQUFLLE9BQU8sYUFBYTtBQUFBLElBQ25DLENBQUMsQ0FBQztBQUVWLFFBQUkseUJBQVEsV0FBVyxFQUNsQixRQUFRLDJCQUEyQixFQUNuQyxRQUFRLG9EQUFvRCxFQUM1RCxVQUFVLFlBQVUsT0FDaEIsU0FBUyxLQUFLLE9BQU8sU0FBUyxzQkFBc0IsRUFDcEQsU0FBUyxPQUFPLFVBQVU7QUFDdkIsV0FBSyxPQUFPLFNBQVMseUJBQXlCO0FBQzlDLFlBQU0sS0FBSyxPQUFPLGFBQWE7QUFBQSxJQUNuQyxDQUFDLENBQUM7QUFFVixRQUFJLHlCQUFRLFdBQVcsRUFDbEIsUUFBUSxtQkFBbUIsRUFDM0IsUUFBUSx5Q0FBeUMsRUFDakQsUUFBUSxVQUFRLEtBQ1osZUFBZSx1QkFBdUIsRUFDdEMsU0FBUyxLQUFLLE9BQU8sU0FBUyxlQUFlLEVBQzdDLFNBQVMsT0FBTyxVQUFVO0FBQ3ZCLFdBQUssT0FBTyxTQUFTLGtCQUFrQjtBQUN2QyxZQUFNLEtBQUssT0FBTyxhQUFhO0FBQUEsSUFDbkMsQ0FBQyxDQUFDO0FBRVYsUUFBSSx5QkFBUSxXQUFXLEVBQ2xCLFFBQVEscUJBQXFCLEVBQzdCLFFBQVEsNENBQTRDLEVBQ3BELFVBQVUsWUFBVSxPQUNoQixTQUFTLEtBQUssT0FBTyxTQUFTLGlCQUFpQixFQUMvQyxTQUFTLE9BQU8sVUFBVTtBQUN2QixXQUFLLE9BQU8sU0FBUyxvQkFBb0I7QUFDekMsWUFBTSxLQUFLLE9BQU8sYUFBYTtBQUFBLElBQ25DLENBQUMsQ0FBQztBQUVWLFFBQUkseUJBQVEsV0FBVyxFQUNsQixRQUFRLGlCQUFpQixFQUN6QixRQUFRLCtCQUErQixFQUN2QyxVQUFVLFlBQVUsT0FDaEIsY0FBYyxpQkFBaUIsRUFDL0IsT0FBTyxFQUNQLFFBQVEsWUFBWTtBQUNqQixhQUFPLFlBQVksSUFBSTtBQUN2QixhQUFPLGNBQWMsWUFBWTtBQUVqQyxVQUFJO0FBQ0EsY0FBTSxTQUFTLE1BQU0sS0FBSyxvQkFBb0I7QUFDOUMsWUFBSSxPQUFPLFNBQVM7QUFDaEIsY0FBSSx3QkFBTyx3QkFBd0I7QUFBQSxRQUN2QyxPQUFPO0FBQ0gsY0FBSSx3QkFBTyxzQkFBc0IsT0FBTyxPQUFPO0FBQUEsUUFDbkQ7QUFBQSxNQUNKLFVBQUU7QUFDRSxlQUFPLFlBQVksS0FBSztBQUN4QixlQUFPLGNBQWMsaUJBQWlCO0FBQUEsTUFDMUM7QUFBQSxJQUNKLENBQUMsQ0FBQztBQUFBLEVBQ2Q7QUFBQSxFQUVBLE1BQU0sc0JBQXFFO0FBQ3ZFLFFBQUk7QUFDQSxZQUFNLEVBQUUsVUFBVSxXQUFXLEtBQUssT0FBTztBQUV6QyxVQUFJLENBQUMsWUFBWSxDQUFDLFFBQVE7QUFDdEIsZUFBTztBQUFBLFVBQ0gsU0FBUztBQUFBLFVBQ1QsT0FBTztBQUFBLFFBQ1g7QUFBQSxNQUNKO0FBR0EsWUFBTSxVQUFVLFNBQVMsS0FBSyxFQUFFLFFBQVEsT0FBTyxFQUFFO0FBR2pELFVBQUk7QUFDQSxZQUFJLElBQUksT0FBTztBQUFBLE1BQ25CLFNBQVMsR0FBUDtBQUNFLGVBQU87QUFBQSxVQUNILFNBQVM7QUFBQSxVQUNULE9BQU87QUFBQSxRQUNYO0FBQUEsTUFDSjtBQUdBLFlBQU0sQ0FBQyxJQUFJLFVBQVUsT0FBTyxNQUFNLEdBQUc7QUFDckMsVUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRO0FBQ2hCLGVBQU87QUFBQSxVQUNILFNBQVM7QUFBQSxVQUNULE9BQU87QUFBQSxRQUNYO0FBQUEsTUFDSjtBQUlBLFlBQU0sb0JBQW9CO0FBQUEsUUFFdEI7QUFBQSxRQUVBO0FBQUEsUUFFQTtBQUFBLFFBRUE7QUFBQSxNQUNKO0FBRUEsaUJBQVcsWUFBWSxtQkFBbUI7QUFDdEMsWUFBSTtBQUNBLGdCQUFNLFVBQVUsR0FBRyxVQUFVO0FBRTdCLGdCQUFNLFdBQVcsTUFBTSxpQ0FBVztBQUFBLFlBQzlCLEtBQUs7QUFBQSxZQUNMLFFBQVE7QUFBQSxZQUNSLFNBQVM7QUFBQSxjQUNMLGlCQUFpQixTQUFTLE1BQU07QUFBQSxZQUNwQztBQUFBLFlBQ0EsT0FBTztBQUFBLFVBQ1gsQ0FBQztBQUVELGNBQUksU0FBUyxVQUFVLE9BQU8sU0FBUyxTQUFTLEtBQUs7QUFDakQsbUJBQU8sRUFBRSxTQUFTLEtBQUs7QUFBQSxVQUMzQjtBQUFBLFFBQ0osU0FBUyxHQUFQO0FBQ0U7QUFBQSxRQUNKO0FBQUEsTUFDSjtBQUVBLGFBQU87QUFBQSxRQUNILFNBQVM7QUFBQSxRQUNULE9BQU87QUFBQSxNQUNYO0FBQUEsSUFDSixTQUFTLE9BQVA7QUFDRSxhQUFPO0FBQUEsUUFDSCxTQUFTO0FBQUEsUUFDVCxPQUFPLGlDQUFpQztBQUFBLE1BQzVDO0FBQUEsSUFDSjtBQUFBLEVBQ0o7QUFDSjsiLAogICJuYW1lcyI6IFtdCn0K
